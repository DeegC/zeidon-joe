^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    1) /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    2)     Zeidon JOE is free software: you can redistribute it and/or modify
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    3)     it under the terms of the GNU Lesser General Public License as published by
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    4)     the Free Software Foundation, either version 3 of the License, or
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    5)     (at your option) any later version.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    6) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    7)     Zeidon JOE is distributed in the hope that it will be useful,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    8)     but WITHOUT ANY WARRANTY; without even the implied warranty of
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500    9)     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   10)     GNU Lesser General Public License for more details.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   11) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   12)     You should have received a copy of the GNU Lesser General Public License
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   13)     along with Zeidon JOE.  If not, see <http://www.gnu.org/licenses/>.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   14) 
58d3a7d6 (DeegC          2015-03-15 23:10:50 -0400   15)     Copyright 2009-2015 QuinSoft
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   16)  */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   17) package com.quinsoft.zeidon.standardoe;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   18) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   19) import java.io.Serializable;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   20) import java.util.ArrayList;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   21) import java.util.Arrays;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   22) import java.util.Collection;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   23) import java.util.Collections;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   24) import java.util.Comparator;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   25) import java.util.EnumSet;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   26) import java.util.Iterator;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   27) import java.util.List;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   28) import java.util.UUID;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   29) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   30) import org.apache.commons.lang3.StringUtils;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   31) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   32) import com.quinsoft.zeidon.AttributeInstance;
39061526 (DeegC          2015-07-10 23:48:48 -0400   33) import com.quinsoft.zeidon.CompareEntityOptions;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400   34) import com.quinsoft.zeidon.CopyAttributesBuilder;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   35) import com.quinsoft.zeidon.CreateEntityFlags;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   36) import com.quinsoft.zeidon.CursorPosition;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   37) import com.quinsoft.zeidon.CursorResult;
1496146d (DeegC          2014-11-08 13:38:32 -0500   38) import com.quinsoft.zeidon.EntityConstraintType;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   39) import com.quinsoft.zeidon.EntityCursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   40) import com.quinsoft.zeidon.EntityInstance;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   41) import com.quinsoft.zeidon.EntityIterator;
1e2935d5 (dgc            2015-08-28 14:41:25 -0400   42) import com.quinsoft.zeidon.HiddenAttributeException;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   43) import com.quinsoft.zeidon.HiddenCursorException;
6db096c5 (DeegC          2015-05-31 16:21:32 -0400   44) import com.quinsoft.zeidon.IncludeFlags;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   45) import com.quinsoft.zeidon.NullCursorException;
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500   46) import com.quinsoft.zeidon.OutOfScopeException;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   47) import com.quinsoft.zeidon.SetMatchingFlags;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   48) import com.quinsoft.zeidon.ZeidonException;
c002a606 (DeegC          2014-09-10 21:47:14 -0400   49) import com.quinsoft.zeidon.objectdefinition.AttributeDef;
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400   50) import com.quinsoft.zeidon.objectdefinition.DynamicAttributeDefConfiguration;
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400   51) import com.quinsoft.zeidon.objectdefinition.EntityDef;
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400   52) import com.quinsoft.zeidon.objectdefinition.LazyLoadConfig;
65d77e0a (DeegC          2014-09-10 22:43:28 -0400   53) import com.quinsoft.zeidon.objectdefinition.LodDef;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   54) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   55) /**
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   56)  * @author DG
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   57)  *
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   58)  */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   59) class EntityCursorImpl implements EntityCursor
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   60) {
6fcb8fd6 (DeegC          2015-02-12 14:22:14 -0500   61)     private final EntityDef        entityDef;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   62)     private final ViewCursor       viewCursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   63)     private final EntityCursorImpl parentCursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   64) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   65)     private EntityCursorImpl   prevHier;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   66)     private EntityCursorImpl   nextHier;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   67)     private EntityIterator<EntityInstanceImpl> currentIterator;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   68) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   69)     /**
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400   70)      * Used to keep track of most recent setFirst/setLast.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400   71)      */
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400   72)     private boolean forwardDirection = true;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400   73) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400   74)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   75)      * This points to the cursor's current entity instance.  It's a weak reference so
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   76)      * that if the entity is dropped then this cursor will release it.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   77)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   78)     private EntityInstanceImpl entityInstance;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   79) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400   80)     EntityCursorImpl(ViewCursor viewCursor, EntityDef entityDef, EntityCursorImpl parentCsr)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   81)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   82)         this.viewCursor = viewCursor;
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400   83)         this.entityDef = entityDef;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   84)         this.parentCursor = parentCsr;
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400   85)         assert parentCsr != null || entityDef.getParent() == null : "Parent Cursor not set correctly";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   86)         setEntityInstance( null );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   87)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   88) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   89)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   90)      * Create a cursor and initialize it to point to the same entity as 'source'.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   91)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   92)      * @param viewCursor
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   93)      * @param source
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500   94)      * @param parentCsr
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   95)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   96)     EntityCursorImpl( ViewCursor viewCursor, EntityCursorImpl source, EntityCursorImpl parentCsr )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400   97)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400   98)         this( viewCursor, source.getEntityDef(), parentCsr );
965ca3d2 (DeegC          2014-07-19 00:12:43 -0400   99)         setEntityInstance( source.entityInstance );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  100)         if ( source.currentIterator != null)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  101)             currentIterator = IteratorBuilder.build( source.currentIterator, this );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  102)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  103) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  104)     private ObjectInstance getObjectInstance()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  105)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  106)         return viewCursor.getObjectInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  107)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  108)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  109)      * Returns the current entity pointed to by this cursor or null.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  110)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  111)      * If the cursor is currently pointing to null then this logic will attempt to
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  112)      * re-establish the cursor by looking at parent cursor values.  Will return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  113)      * an entity instance even if it's hidden.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  114)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  115)      * If necessary, this will lazy load an entity instance.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  116)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  117)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  118)     public EntityInstanceImpl getEntityInstance()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  119)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  120)         return getEntityInstance( true );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  121)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  122) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  123)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  124)      * Attempts to get an entity instance.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  125)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  126)      * @param allowLazyLoad If false, then don't attempt to lazy load an instance.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  127)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  128)      * @return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  129)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  130)     private EntityInstanceImpl getEntityInstance( boolean allowLazyLoad )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  131)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  132)         // There are some edge cases with dropped entities.  Look to see if the current
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  133)         // entity is dropped and if it is set the cursor to null.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  134)         // KJS 05/13/10 - Commenting out temporarily per DG request.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  135)         //if ( entityInstance != null && entityInstance.isDropped() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  136)         //    setEntityInstance( null );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  137) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  138)         // If it's null then we'll still try to re-establish the cursor because it's
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  139)         // possible that an entity was created using a different view.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  140)         if ( entityInstance == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  141)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  142)             if ( entityDef.getParent() == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  143)                 entityInstance = getObjectInstance().getRootEntityInstance();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  144)             else
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  145)             {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  146)                 // Try to get the entity instance for the parent.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  147)                 EntityCursorImpl parentCsr = viewCursor.getEntityCursor( entityDef.getParent() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  148)                 EntityInstanceImpl parentInstance = parentCsr.getEntityInstance( allowLazyLoad );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  149) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  150)                 // If the parent instance is null then this cursor must be null as well.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  151)                 if ( parentInstance == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  152)                 {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  153)                     entityInstance = null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  154)                     return null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  155)                 }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  156) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  157)                 // Do some validity checking.  Parent shouldn't be higher in the hier structure
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  158)                 // than the recursive root.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  159)                 if ( viewCursor.getRecursiveRoot() != null &&
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  160)                      viewCursor.getRecursiveRoot().getDepth() > parentInstance.getDepth() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  161)                 {
29323f9d (DeegC          2015-09-06 13:57:14 -0400  162)                     viewCursor.getView().logObjectInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  163)                     throw new ZeidonException("Internal error: parent level for %s doesn't match " +
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  164)                                               "level for suboject root %s", parentInstance,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  165)                                               viewCursor.getRecursiveRoot() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  166)                 }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  167) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  168)                 // Check to see if we need to load a lazy child.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  169)                 if ( allowLazyLoad )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  170)                     parentInstance.lazyLoadChild( getView(), getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  171) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  172)                 EntityInstanceImpl searchInstance = null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  173) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  174)                 // We need to find the first entityInstance under the parent.  The
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  175)                 // quickest way is to find a previous sibling and search hier from there.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  176)                 EntityDef prevSibling = entityDef.getPrevSibling();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  177)                 if ( prevSibling != null)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  178)                     // Use getEntityInstance because its possible for the cursor to be null.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  179)                     searchInstance = viewCursor.getEntityCursor( prevSibling ).getEntityInstance( false );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  180) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  181)                 // No siblings were found so start the search from the parent.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  182)                 if ( searchInstance == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  183)                     searchInstance = parentInstance.getNextHier();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  184) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  185)                 // Find the first entity instance under the parent that:
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  186)                 //    1) Has the same entityDef for the cursor we're trying to set.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  187)                 //    2) Has the same instance level for the entityDef + recursive diff.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  188)                 //       Checking for instance level will skip over recursive suboject
65d77e0a (DeegC          2014-09-10 22:43:28 -0400  189)                 //       instances with the same LodDef.
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  190)                 int level = entityDef.getDepth() + viewCursor.getRecursiveDiff();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  191)                 for ( ; searchInstance != null; searchInstance = searchInstance.getNextHier() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  192)                 {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  193)                     // If the searchInstance level is less than the parent then there is no
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  194)                     // entity that matches what we want.
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  195)                     if ( searchInstance.getDepth() <= parentInstance.getDepth() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  196)                     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  197)                         searchInstance = null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  198)                         break;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  199)                     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  200) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  201)                     if ( searchInstance.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  202)                         continue;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  203) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  204)                     EntityDef searchEntityDef = searchInstance.getEntityDef();
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  205)                     if ( searchEntityDef == entityDef && searchInstance.getDepth() == level )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  206)                         break;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  207)                 }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  208) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  209)                 entityInstance = searchInstance;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  210)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  211)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  212) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  213)         if ( entityInstance != null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  214)             entityInstance = entityInstance.getLatestVersion();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  215) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  216)         return entityInstance;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  217)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  218) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  219)     /**
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  220)      * Gets the cursor's entity instance.  Throws NullCursorException if the entity is null.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  221)      * @return
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  222)      * @throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  223)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  224)     private EntityInstanceImpl getExistingInstance( boolean allowHidden ) throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  225)     {
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500  226)         if ( ! viewCursor.isCursorInScope( this ) )
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500  227)             throw new OutOfScopeException( this );
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500  228) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  229)         EntityInstanceImpl ei = getEntityInstance();  // Potentially sets UNSET_CSR.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  230)         if ( ei == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  231)             throw new NullCursorException( this );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  232) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  233)        if ( ! allowHidden && ei.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  234)             throw new HiddenCursorException( this );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  235) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  236)        if ( ! viewCursor.isCursorInScope( this ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  237)            throw new ZeidonException( "Cursor %s is out of scope", getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  238) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  239)        // Sanity checking--make sure that the existing instance has at least one linked instance,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  240)        // which is itself.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  241)        assert ei.getAllLinkedInstances( allowHidden ).contains( ei ) : "Entity doesn't have itself in linked instances";
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  242) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  243)        return ei;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  244)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  245) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  246)     private EntityInstanceImpl getExistingInstance() throws NullCursorException
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  247)     {
fa1ce727 (DeegC          2015-02-07 09:49:28 -0500  248)         return getExistingInstance( getView().isAllowHiddenEntities() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  249)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  250) 
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  251)     /**
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  252)      * Sets the EntityInstance for this cursor.
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  253)      *
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  254)      * Note:  Most code should call setCursor( ei ) instead of this method.
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  255)      * Other than simple validity checking this code does not perform any
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  256)      * extra processing (like reseting child cursors).  This should only be used by code
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  257)      * that expects to explicitly set all the cursors.
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  258)      *
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  259)      * @param entityInstance
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  260)      * @return
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  261)      */
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  262)     EntityInstanceImpl setEntityInstance( EntityInstanceImpl entityInstance )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  263)     {
42b05dfd (dgc            2015-04-09 20:15:05 -0400  264)         if ( entityInstance == null ||
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  265)              entityInstance.getEntityDef() == getEntityDef() ||
42b05dfd (dgc            2015-04-09 20:15:05 -0400  266)              entityInstance.getEntityDef().getRecursiveParent() == getEntityDef() )
42b05dfd (dgc            2015-04-09 20:15:05 -0400  267)         {
42b05dfd (dgc            2015-04-09 20:15:05 -0400  268)             this.entityInstance = entityInstance;
42b05dfd (dgc            2015-04-09 20:15:05 -0400  269)             return entityInstance;
42b05dfd (dgc            2015-04-09 20:15:05 -0400  270)         }
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  271) 
42b05dfd (dgc            2015-04-09 20:15:05 -0400  272)         throw new ZeidonException( "Internal error: Attempting to set a cursor to an invalid entity def" );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  273)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  274) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  275)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  276)     public EntityInstanceImpl getParent()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  277)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  278)         if ( parentCursor == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  279)             return null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  280) 
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  281)         // If this entity is a recursive parent and the current view is in a subobject
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  282)         // then the parent is not necessarily determined by the parent cursor.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  283)         if ( getEntityDef().isRecursiveParent() && viewCursor.getRecursiveDiff() > 0 )
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  284)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  285)             // The current EntityDef is the parent of a recursive relationship and recursiveDiff
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  286)             // indicates we have a recursive subobject.  Check to see if there is a recursive root.
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  287)             if ( getViewCursor().getRecursiveRoot() == null )
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  288)             {
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  289)                 // The recursive root is null.  This means that when setSubobject was called
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  290)                 // the subobject child was null and is now the parent.  Return the EI that
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  291)                 // is the parent of the null EI.
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  292)                 return getViewCursor().getRecursiveRootParent();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  293)             }
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  294)             else
4bc47511 (DeegC          2015-04-02 00:11:14 -0400  295)                 return getViewCursor().getRecursiveRoot().getParent();
4bc47511 (DeegC          2015-04-02 00:11:14 -0400  296) //                assert getViewCursor().getRecursiveRoot().getParent() == parentCursor.getExistingInstance();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  297)         }
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  298) 
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  299)         EntityInstanceImpl parent = parentCursor.getExistingInstance();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  300)         return parent;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  301)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  302) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  303)     @Override
971f8b0c (DeegC          2014-05-01 00:55:30 -0400  304)     public EntityInstance copySubobject( EntityInstance source, CursorPosition position )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  305)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  306)         if ( ! getEntityDef().isCreate() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  307)             throw new ZeidonException( "Entity is not flagged for create." )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  308)                             .prependEntityDef( getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  309) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  310)         if ( getEntityDef() != source.getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  311)             throw new ZeidonException( "Source and target entity definitions must be the same." )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  312)                             .prependEntityDef( getEntityDef() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  313)                             .prependMessage( "Source Entity = ", source.getEntityDef().getName() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  314) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  315)         EntityInstanceImpl sourceInstance = (EntityInstanceImpl) source.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  316)         createEntity( position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  317)         setMatchingAttributesByName( sourceInstance );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  318) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  319)         // Now copy children.  We can't use the usual iterator because we need to skip over
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  320)         // children if we include a child entity.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  321)         for ( EntityInstanceImpl child = sourceInstance.getNextHier();
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  322)               child != null && child.getDepth() > sourceInstance.getDepth();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  323)               child = child.getNextHier() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  324)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  325)             if ( child.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  326)             {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  327)                 // Skip hidden children.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  328)                 child = child.getLastChildHier();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  329)                 continue;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  330)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  331) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  332)             EntityDef childEntityDef = child.getEntityDef();
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  333)             EntityCursorImpl childCursor = getView().cursor( childEntityDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  334) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  335)             if ( childEntityDef.isCreate() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  336)             {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  337)                 childCursor.createEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  338)                 childCursor.setMatchingAttributesByName( child );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  339)                 continue;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  340)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  341) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  342)             if ( childEntityDef.isInclude() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  343)             {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  344)                 childCursor.includeSubobject( child );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  345)                 child = child.getLastChildHier();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  346)                 continue;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  347)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  348) 
971f8b0c (DeegC          2014-05-01 00:55:30 -0400  349)             throw new ZeidonException( "Copied child entity is neither creatable or includable." )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  350)                             .prependEntityDef( childEntityDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  351)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  352) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  353)         resetChildCursors( getExistingInstance() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  354) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  355)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  356)         return getExistingInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  357)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  358) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  359)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  360)     public EntityInstanceImpl createEntity()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  361)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  362)         return createEntity(CursorPosition.NEXT, CreateEntityFlags.DEFAULT );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  363)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  364) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  365)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  366)     public EntityInstanceImpl createEntity( CursorPosition position,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  367)                                             EnumSet<CreateEntityFlags> flags )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  368)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  369)         if ( ! flags.contains( CreateEntityFlags.fIGNORE_PERMISSIONS ) && ! getEntityDef().isCreate() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  370)             throw new ZeidonException( "Entity is not flagged for create." )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  371)                             .prependEntityDef( getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  372) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  373)         EntityInstanceImpl parent = getParent();  // Throws NullCursor if cursor is null.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  374) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  375)         if ( ! flags.contains( CreateEntityFlags.fIGNORE_MAX_CARDINALITY ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  376)             validateMaxCardinality();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  377) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  378)         // If the entity is a derived entity or a work entity (both marked as derived) then
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  379)         // we don't need to check if the entity is read only.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  380)         if ( !getEntityDef().isDerived() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  381)            validateOiUpdate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  382) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  383)         EntityInstanceImpl ei = getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  384) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  385)         EntityDef newInstanceEntityDef = getEntityDef();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  386) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  387)         // Check for an edge case.  See if the EntityDef of the parent is the same as the
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  388)         // one we're about to create.  If it is then we are creating the child of a recursive
65d77e0a (DeegC          2014-09-10 22:43:28 -0400  389)         // relationship.  If the EntityDef is the recursive parent then the LodDef of
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  390)         // the new instance should be the recursive child.
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  391)         if ( parent != null &&
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  392)             newInstanceEntityDef == parent.getEntityDef() && // Recursive relationship?
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  393)             newInstanceEntityDef.isRecursiveParent() )        // EntityDef is recursive parent?
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  394)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  395)             // Change the EntityDef of the instance we're about to create to be the child
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  396)             // of the recursive relationship.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  397)             newInstanceEntityDef = newInstanceEntityDef.getRecursiveChild();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  398)         }
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  399) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  400)         // Create a new instance and initialize the attributes.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  401)         EntityInstanceImpl newInstance =
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  402)                 EntityInstanceImpl.createEntity( getObjectInstance(),
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  403)                                                  parent,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  404)                                                  ei,
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  405)                                                  newInstanceEntityDef,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  406)                                                  position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  407) 
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  408)         // If recursiveDiff is > 0 then we are in a recursive subobject.  If recursiveRoot is
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  409)         // null then we just created the root of the recursive subobject so set it.
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  410)         if ( getViewCursor().getRecursiveDiff() > 0 && getViewCursor().getRecursiveRoot() == null )
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  411)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  412)             getViewCursor().setRecursiveParent( newInstance, newInstanceEntityDef, null );
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  413)         }
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400  414) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  415)         if ( ! flags.contains( CreateEntityFlags.fDONT_INITIALIZE_ATTRIBUTES ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  416)             newInstance.initializeDefaultAttributes();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  417) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  418)         if ( ! flags.contains( CreateEntityFlags.fDONT_UPDATE_OI ) && ! newInstance.isVersioned() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  419)             getObjectInstance().setUpdated( true );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  420) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  421)         if ( ! flags.contains( CreateEntityFlags.fNO_SPAWNING ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  422)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  423)             EntitySpawner spawner = new EntitySpawner( newInstance );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  424)             spawner.spawnCreate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  425)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  426) 
4718a94e (dgc            2014-09-26 15:58:57 -0400  427)         if ( flags.contains( CreateEntityFlags.fDBHANDLER ) )
4718a94e (dgc            2014-09-26 15:58:57 -0400  428)             newInstance.dbhLoaded = true;
4718a94e (dgc            2014-09-26 15:58:57 -0400  429) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  430)         resetChildCursors( newInstance );
4718a94e (dgc            2014-09-26 15:58:57 -0400  431) 
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  432)         // Check to see if we need to execute the create constraint.  We'll assume we don't
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  433)         // execute it if the initialize flag is set because we don't want to execute the
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  434)         // constraint when loading from DB/file.
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  435)         if ( getEntityDef().hasCreateConstraint() &&
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  436)              ! flags.contains( CreateEntityFlags.fDONT_INITIALIZE_ATTRIBUTES ) )
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  437)         {
1496146d (DeegC          2014-11-08 13:38:32 -0500  438)             entityDef.executeEntityConstraint( getView(), EntityConstraintType.CREATE );
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  439)         }
3e9ad90b (DeegC          2014-11-05 22:57:54 -0500  440) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  441)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  442)         return newInstance;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  443)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  444) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  445)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  446)     public EntityInstanceImpl createEntity( CursorPosition position )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  447)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  448)         return createEntity( position, CreateEntityFlags.DEFAULT );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  449)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  450) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  451)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  452)     public EntityInstanceImpl createEntity( EnumSet<CreateEntityFlags> flags )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  453)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  454)         return createEntity( CursorPosition.NEXT, flags );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  455)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  456) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  457)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  458)     public EntityInstanceImpl createEntity( CreateEntityFlags... flags )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  459)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  460)         EnumSet<CreateEntityFlags> set = EnumSet.copyOf( Arrays.asList( flags ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  461)         return createEntity( CursorPosition.NEXT, set );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  462)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  463) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  464)     EntityInstanceImpl createEntity( CursorPosition position, CreateEntityFlags... flags )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  465)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  466)         EnumSet<CreateEntityFlags> set = EnumSet.copyOf( Arrays.asList( flags ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  467)         return createEntity( position, set );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  468)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  469) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  470)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  471)      * @see com.quinsoft.zeidon.EntityCursor#createTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  472)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  473)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  474)     public EntityInstance createTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  475)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  476)         return createTemporalEntity( CursorPosition.NEXT );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  477)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  478) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  479)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  480)      * @see com.quinsoft.zeidon.EntityCursor#createTemporalEntity(com.quinsoft.zeidon.CursorPosition)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  481)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  482)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  483)     public EntityInstance createTemporalEntity(CursorPosition position)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  484)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  485)         validateMaxCardinality();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  486)         validateOiUpdate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  487)         EntityInstanceImpl ei = createEntity( position,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  488)                                               CreateEntityFlags.fNO_SPAWNING,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  489)                                               CreateEntityFlags.fDONT_UPDATE_OI );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  490)         ei.setVersionedEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  491)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  492)         return ei;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  493)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  494) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400  495)     protected LodDef getLodDef()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  496)     {
65d77e0a (DeegC          2014-09-10 22:43:28 -0400  497)         return viewCursor.getLodDef();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  498)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  499) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  500)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  501)      * Reset the currently cursor to point to resetInstance and set all child cursors
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  502)      * to be unset.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  503)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  504)      * @param resetInstance
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  505)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  506)     void resetChildCursors(EntityInstanceImpl resetInstance)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  507)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  508)         EntityInstanceImpl ei = resetInstance;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  509)         if ( ei != null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  510)             ei = resetInstance.getLatestVersion();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  511) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  512)         setEntityInstance( ei );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  513)         for ( EntityCursorImpl resetCsr = this.getNextHierCursor();
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  514)               resetCsr != null && resetCsr.getEntityDef().getDepth() > this.getEntityDef().getDepth();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  515)               resetCsr = resetCsr.getNextHierCursor() )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  516)         {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  517)             resetCsr.setEntityInstance( null );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  518)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  519)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  520) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  521)     /**
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  522)      * Validate that ei's EntityDef match that of the cursor.  Throws an exception if not.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  523)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  524)      * @return true if ei is a recursive child of this cursor, return false if not recursive.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  525)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  526)     private boolean validateEntityForCursor( EntityInstanceImpl ei )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  527)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  528)         // If they are the same entity then we're good.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  529)         EntityDef sourceEntityDef = ei.getEntityDef();
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  530)         if ( sourceEntityDef == getEntityDef() )
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  531)         {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  532)             if ( sourceEntityDef.isRecursive() )
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  533)                 return true;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  534)             else
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  535)                 return false;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  536)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  537) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  538)         // Check to see if ei is a recursive child of this cursor.
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  539)         if ( sourceEntityDef.isRecursive() && sourceEntityDef.getRecursiveParent() == getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  540)             return true;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  541) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  542)         // If we get here then Houston we have a problem.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  543)         throw new ZeidonException( "Entity Instance %s is not a valid entity for this cursor.", sourceEntityDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  544)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  545) 
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  546)     private EntityInstanceImpl findMatchingLinkedInstance( EntityInstanceImpl targetInstance )
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  547)     {
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  548)         // The targetInstance belongs to a different OI.  Let's see if we can find a linked
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  549)         // instance that belongs to the current OI.
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  550)         for ( EntityInstanceImpl ei : targetInstance.getLinkedInstances() )
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  551)         {
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  552)             if ( ei.getObjectInstance() == getObjectInstance() && ei.getEntityDef() == targetInstance.getEntityDef() )
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  553)                 return ei;
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  554)         }
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  555) 
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  556)         // If we get here we didn't find one.
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  557)         throw new ZeidonException( "Attempting to set a cursor to an Entity Instance that is from a different OI" );
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  558)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  559) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  560)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  561)      * Set the cursor to point to targetInstance and set all child cursors to point to
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  562)      * UNSET_CSR.  This will also check to see if the parent cursors need to be
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  563)      * set.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  564)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  565)      * @param newInstance
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  566)      * @return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  567)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  568)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  569)     public CursorResult setCursor( EntityInstance targetInstance )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  570)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  571)         if ( targetInstance == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  572)             throw new ZeidonException("Cannot set a cursor to null.");
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  573) 
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  574)         // Convert the targetInstance to an EntityInstanceImpl
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  575)         EntityInstanceImpl newInstance = (EntityInstanceImpl) targetInstance.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  576) 
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  577)         if ( newInstance.getObjectInstance() != getObjectInstance() )
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  578)             newInstance = findMatchingLinkedInstance( newInstance );
d139f0d1 (DeegC          2015-04-17 00:34:12 -0400  579) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  580)         boolean recursive = validateEntityForCursor( newInstance );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  581) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  582)         // Default return code to setting the cursor.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  583)         CursorResult cursorResult = CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  584) 
3d07c972 (dgc            2015-04-17 16:58:29 -0400  585)         if ( recursive || getEntityDef().isRecursivePath() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  586)         {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  587)             // If we get here then we're setting a subobject cursor.  We have a couple of situations to handle.
3d07c972 (dgc            2015-04-17 16:58:29 -0400  588)             // To illustrate, assume the following recursive subobject where A is the recursive parent of A'.
3d07c972 (dgc            2015-04-17 16:58:29 -0400  589)             //     A
f02add8a (DeegC          2015-05-09 01:15:19 -0400  590)             //     |
3d07c972 (dgc            2015-04-17 16:58:29 -0400  591)             //     B
3d07c972 (dgc            2015-04-17 16:58:29 -0400  592)             //    / \
3d07c972 (dgc            2015-04-17 16:58:29 -0400  593)             //   A'  C
3d07c972 (dgc            2015-04-17 16:58:29 -0400  594)             //   |
3d07c972 (dgc            2015-04-17 16:58:29 -0400  595)             //   D
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  596) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  597)             EntityDef targetEntityDef = newInstance.getEntityDef();
3d07c972 (dgc            2015-04-17 16:58:29 -0400  598)             EntityDef recursiveParent;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  599) 
3d07c972 (dgc            2015-04-17 16:58:29 -0400  600)             if ( ! recursive )
3d07c972 (dgc            2015-04-17 16:58:29 -0400  601)             {
3d07c972 (dgc            2015-04-17 16:58:29 -0400  602)                 // If we get here then we're not setting A or A' but one of the other
3d07c972 (dgc            2015-04-17 16:58:29 -0400  603)                 // cursors (B, C or D above).
f02add8a (DeegC          2015-05-09 01:15:19 -0400  604) 
3d07c972 (dgc            2015-04-17 16:58:29 -0400  605)                 // Find the recursive parent (A).
3d07c972 (dgc            2015-04-17 16:58:29 -0400  606)                 recursiveParent = getEntityDef();
3d07c972 (dgc            2015-04-17 16:58:29 -0400  607)                 while ( recursiveParent.getRecursiveChild() == null )
3d07c972 (dgc            2015-04-17 16:58:29 -0400  608)                     recursiveParent = recursiveParent.getParent();
3d07c972 (dgc            2015-04-17 16:58:29 -0400  609)             }
3d07c972 (dgc            2015-04-17 16:58:29 -0400  610)             else
3d07c972 (dgc            2015-04-17 16:58:29 -0400  611)                 recursiveParent = targetEntityDef.getRecursiveParent();
3d07c972 (dgc            2015-04-17 16:58:29 -0400  612) 
3d07c972 (dgc            2015-04-17 16:58:29 -0400  613)             // We're setting the parent cursor (A) to a subobject child (A').
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  614)             if ( getEntityDef() == recursiveParent )
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  615)             {
3d07c972 (dgc            2015-04-17 16:58:29 -0400  616)                 // Set the recursive structure.  We'll set the cursors later on.
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  617)                 viewCursor.setRecursiveParent( newInstance, targetEntityDef, null );
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  618)             }
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  619)             else
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  620)             {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  621)                 assert getEntityDef() == targetEntityDef;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  622) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  623)                 EntityInstanceImpl parentInstance = newInstance.findMatchingParent( recursiveParent );
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  624)                 if ( parentInstance.getEntityDef() == recursiveParent )
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  625)                 {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  626)                     // If we get here then the parent of targetInstance is the root of the
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  627)                     // subobject so we're just resetting it.
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  628)                     viewCursor.resetSubobjectTop();
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  629)                 }
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  630)                 else
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  631)                 {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  632)                     viewCursor.setRecursiveParent( parentInstance, recursiveParent, null );
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  633)                 }
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  634)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  635)         }
42b05dfd (dgc            2015-04-09 20:15:05 -0400  636)         else
42b05dfd (dgc            2015-04-09 20:15:05 -0400  637)             viewCursor.resetRecursiveParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  638) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  639)         // Check to see if we need to set the parent cursors. Find the highest root cursor that
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  640)         // needs to be reset.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  641)         EntityCursorImpl searchCursor = this;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  642)         EntityInstanceImpl topEi = newInstance;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  643)         for ( topEi = newInstance; topEi.getParent() != null; topEi = topEi.getParent() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  644)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  645)             EntityCursorImpl searchParentCursor = searchCursor.getParentCursor();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  646)             if ( searchParentCursor == null )
42b05dfd (dgc            2015-04-09 20:15:05 -0400  647)             {
29323f9d (DeegC          2015-09-06 13:57:14 -0400  648)                 while ( topEi.getEntityDef().getErEntityToken() != searchCursor.getEntityDef().getErEntityToken() )
42b05dfd (dgc            2015-04-09 20:15:05 -0400  649)                     topEi = topEi.getParent();
fb923da0 (DeegC          2015-04-09 21:39:49 -0400  650) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  651)                 break;
42b05dfd (dgc            2015-04-09 20:15:05 -0400  652)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  653) 
9101bf25 (dgc            2015-04-27 12:39:20 -0400  654)             // If the cursor isn't in scope then we won't bother setting it.
9101bf25 (dgc            2015-04-27 12:39:20 -0400  655)             if ( ! viewCursor.isCursorInScope( searchParentCursor ) )
9101bf25 (dgc            2015-04-27 12:39:20 -0400  656)                 break;
f02add8a (DeegC          2015-05-09 01:15:19 -0400  657) 
f02add8a (DeegC          2015-05-09 01:15:19 -0400  658)             // Don't use getEntityInstance() because it will potentially try to set
f02add8a (DeegC          2015-05-09 01:15:19 -0400  659)             // the parent cursors if entityInstance is null.
f02add8a (DeegC          2015-05-09 01:15:19 -0400  660)             if ( searchParentCursor.entityInstance == topEi.getParent() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  661)                 break;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  662) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  663)             searchCursor = searchCursor.getParentCursor();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  664)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  665) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  666)         searchCursor.resetChildCursors( topEi );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  667) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  668)         // If topEi is different from newInstance that means we've just reset a parent
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  669)         // cursor.  Now loop through again and set all cursors between searchCursor and 'this'.
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  670)         if ( topEi != newInstance )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  671)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  672)             cursorResult = CursorResult.SET_NEWPARENT;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  673)             EntityCursorImpl tc = this;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  674)             EntityInstanceImpl ei = newInstance;
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  675)             while ( tc != searchCursor )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  676)             {
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  677)                 if ( tc.getEntityDef() != ei.getEntityDef() && tc.getEntityDef() != ei.getEntityDef().getRecursiveParent() )
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  678)                     ei = ei.findMatchingParent( tc.getEntityDef() );
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  679) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  680)                 tc.setEntityInstance( ei );
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  681)                 tc = tc.getParentCursor();
17b8b918 (DeegC          2015-04-09 10:48:18 -0400  682)                 ei = ei.getParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  683)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  684)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  685) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  686)         return cursorResult;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  687)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  688) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  689)     EntityCursorImpl getPrevHier()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  690)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  691)         return prevHier;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  692)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  693) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  694)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  695)      * Sets the prev *cursor*.  Used when building a new ViewCursor.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  696)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  697)      * @param prevHier
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  698)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  699)     void setPrevHier(EntityCursorImpl prevHier)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  700)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  701)         this.prevHier = prevHier;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  702)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  703) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  704)     EntityCursorImpl getNextHierCursor()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  705)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  706)         return nextHier;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  707)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  708) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  709)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  710)      * Sets the next *cursor*.  Used when building a new ViewCursor.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  711)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  712)      * @param prevHier
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  713)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  714)     void setNextHierCursor(EntityCursorImpl nextHier)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  715)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  716)         this.nextHier = nextHier;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  717)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  718) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  719)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  720)     public EntityDef getEntityDef()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  721)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  722)         return entityDef;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  723)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  724) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  725)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  726)     public CursorResult deleteEntity() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  727)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  728)         return deleteEntity(CursorPosition.NONE);
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  729)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  730) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  731)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  732)     public CursorResult excludeEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  733)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  734)         return excludeEntity( CursorPosition.NONE );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  735)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  736) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  737)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  738)      * Re-positions the cursor after a delete or exclude.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  739)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  740)      * @param cursorPosition
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  741)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  742)     private CursorResult repositionCursor( CursorPosition cursorPosition )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  743)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  744)         if ( cursorPosition == CursorPosition.NONE )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  745)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  746) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  747)         // Save the current iterator.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  748)         EntityIterator<EntityInstanceImpl> iterator = currentIterator;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  749) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  750)         try
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  751)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  752)             switch ( cursorPosition )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  753)             {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  754)                 case FIRST:
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  755)                     return setFirst();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  756) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  757)                 case NEXT:
22f936b2 (DeegC          2014-06-05 01:12:26 -0400  758)                     CursorResult rc = setNext();
22f936b2 (DeegC          2014-06-05 01:12:26 -0400  759)                     if ( rc == CursorResult.SET )
22f936b2 (DeegC          2014-06-05 01:12:26 -0400  760)                         return rc;
22f936b2 (DeegC          2014-06-05 01:12:26 -0400  761)                     else
22f936b2 (DeegC          2014-06-05 01:12:26 -0400  762)                         return setLast();
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400  763) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  764)                 case LAST:
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  765)                     return setLast();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  766) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  767)                 case PREV:
32eb1c68 (kellysautter   2014-06-24 11:11:25 -0400  768)                     CursorResult rc2 = setPrev();
32eb1c68 (kellysautter   2014-06-24 11:11:25 -0400  769)                     if ( rc2 == CursorResult.SET )
32eb1c68 (kellysautter   2014-06-24 11:11:25 -0400  770)                         return rc2;
32eb1c68 (kellysautter   2014-06-24 11:11:25 -0400  771)                     else
32eb1c68 (kellysautter   2014-06-24 11:11:25 -0400  772)                         return setFirst();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  773) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  774)                 default:
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  775)                     throw new RuntimeException( "Uknown CursorPosition " + cursorPosition );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  776)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  777)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  778)         finally
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  779)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  780)             currentIterator = iterator;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  781)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  782)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  783) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  784)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  785)     public CursorResult excludeEntity(CursorPosition position)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  786)     {
5cc5364a (DeegC          2014-11-14 23:53:41 -0500  787)         getExistingInstance().excludeEntity( getView() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  788)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  789)         return repositionCursor( position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  790)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  791) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  792)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  793)     public CursorResult deleteEntity(CursorPosition position) throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  794)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  795)         getExistingInstance().deleteEntity( getView() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  796)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  797)         return repositionCursor( position );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  798)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  799) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  800)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  801)     public CursorResult deleteAll()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  802)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  803)         CursorResult result = CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  804) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  805)         if ( getEntityInstance() == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  806)             return result;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  807) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  808)         for ( EntityInstanceImpl ei = getExistingInstance().getFirstTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  809)               ei != null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  810)               ei = ei.getNextTwin() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  811)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  812)             if ( ei.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  813)                 continue;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  814) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  815)             ei.deleteEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  816)             result = CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  817)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  818) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  819)         return result;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  820)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  821) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  822)     private void validateMaxCardinality()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  823)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  824)         EntityInstanceImpl ei = getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  825)         if ( ei != null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  826)             ei.validateMaxCardinality();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  827)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  828) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  829)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  830)      * Validates that this OI may be updated.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  831)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  832)     private void validateOiUpdate()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  833)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  834)         // If the entity is a derived entity or a work entity (both marked as derived) then
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  835)         // we don't need to check if the entity is read only.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  836)         if ( getEntityDef().isDerived() || getEntityDef().isDerivedPath() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  837)         	return;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  838) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  839)         if ( getObjectInstance().isReadOnly() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  840)             throw new ZeidonException( "Object Instance is read-only" )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  841)                                 .prependEntityDef( getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  842)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  843) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  844)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  845)     public void includeSubobject(EntityInstance sourceEi) throws NullCursorException
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  846)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  847)         includeSubobject( sourceEi, CursorPosition.NEXT );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  848)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  849) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  850)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  851)     public void includeSubobject(EntityInstance sourceEi, CursorPosition position) throws NullCursorException
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  852)     {
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  853)         includeSubobject( sourceEi, position, IncludeFlags.EMPTY );
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  854)     }
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  855) 
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  856)     @Override
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  857)     public void includeSubobject(EntityInstance sourceEi, CursorPosition position, EnumSet<IncludeFlags> options ) throws NullCursorException
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  858)     {
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  859)         if ( ! options.contains( IncludeFlags.FROM_ACTIVATE ) )
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  860)         {
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  861)             // Include constraints take some work.  Since nobody appears to use them let's not
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  862)             // worry about implementing them for now.
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  863)             if ( entityDef.hasIncludeConstraint() )
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  864)                 throw new UnsupportedOperationException( "Include constraints not supported yet." );
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  865) 
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  866)             validateMaxCardinality();
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  867)             validateOiUpdate();
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  868)         }
5cc5364a (DeegC          2014-11-14 23:53:41 -0500  869) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  870)         EntityInstanceImpl source = (EntityInstanceImpl) sourceEi.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  871)         EntityInstanceImpl parent = getParent();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  872)         ObjectInstance oi = getObjectInstance();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  873) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  874)         // Create a new instance and initialize the attributes.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  875)         EntityInstanceImpl rootInstance =
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  876)                 EntityInstanceIncluder.includeSubobject( getEntityInstance(), getEntityDef(), parent,
6db096c5 (DeegC          2015-05-31 16:21:32 -0400  877)                                                          oi, source, position, true, options );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  878) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  879)         if ( getEntityDef().getHashKeyAttributes() != null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  880)             rootInstance.addAllHashKeyAttributes();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  881) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  882)         resetChildCursors( rootInstance );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  883)         assert validateChains() : "Something is wrong with the chain pointers";
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  884)         // TODO: Add INCLUDE_WITH_COPY flag?
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  885)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  886) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  887)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  888)     public EntityInstance createTemporalSubobjectVersion() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  889)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  890)         validateOiUpdate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  891)         EntityInstanceImpl ei = getExistingInstance().createTemporalSubobjectVersion();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  892)         assert validateChains() : "Something is wrong with the chain pointers";
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  893)         return ei;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  894)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  895) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  896)     @Override
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  897)     public int getDepth() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  898)     {
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500  899)         return getExistingInstance().getDepth();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  900)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  901) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  902)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  903)      * Returns the last child under the current entity instance.  If there is no child
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  904)      * under 'this', then returns 'this'.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  905)      * @return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  906)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  907)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  908)     public EntityInstanceImpl getLastChildHier()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  909)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  910)         return getExistingInstance().getLastChildHier();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  911)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  912) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  913)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  914)     public boolean isCreated() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  915)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  916)         return getExistingInstance().isCreated();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  917)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  918) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  919)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  920)     public boolean isDeleted() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  921)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  922)         // Use getEntityInstance instead of getExistingInstance because getExisting
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  923)         // will throw an exception for hidden instances.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  924)         return getEntityInstance().isDeleted();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  925)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  926) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  927)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  928)     public boolean isExcluded() throws NullCursorException
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  929)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  930)         // Use getEntityInstance instead of getExistingInstance because getExisting
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  931)         // will throw an exception for hidden instances.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  932)         return getEntityInstance().isExcluded();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  933)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  934) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  935)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  936)     public boolean isHidden() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  937)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  938)         // Use getEntityInstance instead of getExistingInstance because getExisting
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  939)         // will throw an exception for hidden instances.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  940)         return getEntityInstance().isHidden();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  941)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  942) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  943)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  944)     public boolean isIncluded()  throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  945)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  946)         return getExistingInstance().isIncluded();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  947)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  948) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  949)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  950)     public boolean isUpdated() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  951)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  952)         return getExistingInstance().isUpdated();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  953)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  954) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  955)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  956)     public boolean isVersioned()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  957)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  958)         return getExistingInstance().isVersioned();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  959)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  960) 
c002a606 (DeegC          2014-09-10 21:47:14 -0400  961)     Iterable<AttributeDef> getNonNullAttributeList() throws NullCursorException
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  962)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  963)         return getExistingInstance().getNonNullAttributeList();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  964)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  965) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  966)      /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  967)      * Gets the entity instance for the current cursor value matching scopingEntity.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  968)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  969)      * @param scopingEntity
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  970)      * @return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  971)      */
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  972)     private EntityInstanceImpl getScopingEntityInstance( EntityDef scopingEntity )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  973)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  974)         // If the entity for this cursor has no parent then scoping isn't required.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  975)         if ( getEntityDef().getParent() == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  976)             return null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  977) 
f11a42ee (DeegC          2014-10-29 17:04:24 -0400  978)         if ( scopingEntity == null )
f11a42ee (DeegC          2014-10-29 17:04:24 -0400  979)             scopingEntity = getEntityDef().getParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  980) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  981)         // If the scoping entity isn't the parent then we need to reset ancestor
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  982)         // cursors for everything under the scoping entity child.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  983)         EntityDef searchEntity = getEntityDef().getParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  984)         while ( searchEntity != null && searchEntity != scopingEntity )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  985)             searchEntity = searchEntity.getParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  986) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  987)         if ( searchEntity == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  988)             throw new ZeidonException( "Invalid scoping entity: Entity %s is not an ancestor of %s",
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400  989)                                         scopingEntity.getName(), this.getEntityDef().getName() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  990) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  991)         // Find the root EI for the scoping entity.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  992)         EntityCursorImpl cursor = viewCursor.getEntityCursor( searchEntity );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  993)         EntityInstanceImpl rootEi = cursor.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  994)         return rootEi;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  995)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  996) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  997)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400  998)     public CursorResult setFirst()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500  999)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1000)         // For performance reasons we won't create an iterator;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1001)         // we'll just manipulate the cursor directly.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1002)         currentIterator = null;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1003)         forwardDirection = true;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1004) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1005)         EntityInstanceImpl ei = getEntityInstance();
baa79786 (dgc            2015-09-21 11:09:00 -0400 1006)         if ( ei != null && ei.isDropped() )
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1007)         {
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1008)             this.resetChildCursors( null );
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1009)             ei = getEntityInstance();
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1010)             // KJS 10/07/15 - When I delete the last entity with cursorposition.PREV, we get here
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1011)             // and ei is null. We will return then, otherwise getLastTwin gives null exception.
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1012)             if ( ei == null )
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1013)             	return CursorResult.NULL;
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1014)         }
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1015) 
baa79786 (dgc            2015-09-21 11:09:00 -0400 1016)         if ( ei == null )
baa79786 (dgc            2015-09-21 11:09:00 -0400 1017)             return CursorResult.NULL;
baa79786 (dgc            2015-09-21 11:09:00 -0400 1018) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1019)         // Find the first twin.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1020)         ei = ei.getFirstTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1021)         while ( ei != null && ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1022)             ei = ei.getNextTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1023) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1024)         if ( ei == null || ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1025)             return CursorResult.NULL;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1026) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1027)         setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1028)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1029)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1030) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1031)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1032)     public CursorResult setFirst(String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1033)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1034)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1035)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1036)             return setFirst();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1037) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1038)         return setFirst( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1039)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1040) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1041)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1042)     public CursorResult setFirst(EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1043)     {
f11a42ee (DeegC          2014-10-29 17:04:24 -0400 1044)         if ( scopingEntity == null )
f11a42ee (DeegC          2014-10-29 17:04:24 -0400 1045)             return setFirst();
f11a42ee (DeegC          2014-10-29 17:04:24 -0400 1046) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1047)         if ( scopingEntity == getEntityDef().getParent() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1048)             return setFirst();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1049) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1050)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1051)                                     .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1052)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1053)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1054)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1055)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1056)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1057) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1058)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1059)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1060)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1061) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1062)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1063)     public CursorResult setFirst(String attributeName, Object value)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1064)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1065)         return setFirst( getEntityDef().getAttribute( attributeName ), value );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1066)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1067) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1068)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1069)     public CursorResult setFirst(AttributeDef attribute, Object value)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1070)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1071)         currentIterator = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1072)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1073)                                     .forTwinsOf( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1074)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1075)                                     .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1076)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1077) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1078)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1079)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1080) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1081)         //TODO: It would be nice to get rid of this next call.  Reason: for situations
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1082)         // where we are only calling setFirst with no following setNext, this call
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1083)         // loops through to find the next EI that matches.  If the list of sibling
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1084)         // entities is long we're doing a lot of unnecessary work.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1085)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1086)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1087)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1088) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1089)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1090)     public CursorResult setFirst(String attributeName, Object value, String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1091)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1092)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1093)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1094)             return setFirst( attributeName, value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1095) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1096)         EntityDef scopingEntity = getLodDef().getEntityDef( scopingEntityName );
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1097)         return setFirst( getEntityDef().getAttribute( attributeName ), value, scopingEntity );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1098)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1099) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1100)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1101)     public CursorResult setFirst(AttributeDef attribute, Object value, EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1102)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1103)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1104)                                     .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1105)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1106)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1107)                                     .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1108)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1109) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1110)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1111)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1112) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1113)         //TODO: It would be nice to get rid of this next call.  Reason: for situations
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1114)         // where we are only calling setFirst with no following setNext, this call
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1115)         // loops through to find the next EI that matches.  If the list of sibling
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1116)         // entities is long we're doing a lot of unnecessary work.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1117)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1118)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1119)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1120) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1121)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1122)     public CursorResult setNextContinue()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1123)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1124)     	if ( currentIterator == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1125)     	{
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1126)     	    if ( forwardDirection)
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1127)     	        return setNext();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1128)     	    else
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1129)     	        return setPrev();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1130)     	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1131) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1132)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1133)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1134) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1135)         currentIterator.next();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1136)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1137)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1138) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1139)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1140)     public CursorResult setNext()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1141)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1142)         // For performance reasons we won't create an iterator;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1143)         // we'll just manipulate the cursor directly.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1144)         currentIterator = null;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1145) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1146)         EntityInstanceImpl ei = getEntityInstance();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1147)         if ( ei == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1148)             return CursorResult.NULL;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1149) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1150)         ei = ei.getNextTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1151)         while ( ei != null && ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1152)             ei = ei.getNextTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1153) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1154)         if ( ei == null || ei.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1155)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1156) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1157)         setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1158)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1159)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1160) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1161)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1162)     public CursorResult setNext(String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1163)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1164)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1165)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1166)             return setNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1167) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1168)         return setNext( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1169)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1170) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1171)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1172)     public CursorResult setNext(EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1173)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1174)         if ( scopingEntity == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1175)             return setNext();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1176) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1177)         if ( scopingEntity == getEntityDef().getParent() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1178)             return setNext();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1179) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1180)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1181)                                     .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1182)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1183)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1184)                                     .currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1185)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1186)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1187)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1188) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1189)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1190)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1191)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1192) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1193)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1194)     public CursorResult setNext(String attributeName, Object value)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1195)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1196)         return setNext( getEntityDef().getAttribute( attributeName ), value );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1197)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1198) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1199)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1200)     public CursorResult setNext(AttributeDef attribute, Object value)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1201)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1202)         currentIterator = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1203)         						.forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1204)         						.setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1205)         						.currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1206)                                 .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1207)                                 .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1208) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1209)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1210)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1211) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1212)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1213)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1214)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1215) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1216)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1217)     public CursorResult setNext(String attributeName, Object value, String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1218)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1219)         if ( StringUtils.isBlank( scopingEntityName ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1220)             return setNext(getEntityDef().getAttribute( attributeName ), value);
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1221) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1222)         return setNext( getEntityDef().getAttribute( attributeName ), value, getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1223)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1224) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1225)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1226)     public CursorResult setNext( AttributeDef attribute, Object value, EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1227)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1228)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1229) 					        .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1230) 					        .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1231) 					        .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1232) 					        .currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1233)                             .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1234) 					        .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1235) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1236) 		if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1237) 		return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1238) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1239) 		currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1240) 		return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1241) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1242)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1243) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1244)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1245)     public CursorResult setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1246)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1247)         // For performance reasons we won't create an iterator;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1248)         // we'll just manipulate the cursor directly.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1249)         currentIterator = null;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1250)         forwardDirection = false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1251) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1252)         EntityInstanceImpl ei = getEntityInstance();
baa79786 (dgc            2015-09-21 11:09:00 -0400 1253)         if ( ei != null && ei.isDropped() )
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1254)         {
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1255)             this.resetChildCursors( null );
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1256)             ei = getEntityInstance();
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1257)             // KJS 10/07/15 - When I delete the last entity with cursorposition.NEXT, we get here
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1258)             // and ei is null. We will return then, otherwise getLastTwin gives null exception.
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1259)             if ( ei == null )
07b0b5ca (kellysautter   2015-10-15 12:16:53 -0400 1260)             	return CursorResult.NULL;
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1261)         }
075e0831 (DeegC          2015-09-17 18:43:28 -0400 1262) 
baa79786 (dgc            2015-09-21 11:09:00 -0400 1263)         if ( ei == null )
baa79786 (dgc            2015-09-21 11:09:00 -0400 1264)             return CursorResult.NULL;
baa79786 (dgc            2015-09-21 11:09:00 -0400 1265) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1266)         ei = ei.getLastTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1267)         while ( ei != null && ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1268)             ei = ei.getPrevTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1269) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1270)         if ( ei == null || ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1271)             return CursorResult.NULL;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1272) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1273)         setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1274)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1275)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1276) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1277)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1278)     public CursorResult setPrevContinue()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1279)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1280)         if ( currentIterator == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1281)         {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1282)             if ( forwardDirection)
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1283)                 return setNext();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1284)             else
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1285)                 return setPrev();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 1286)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1287) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1288)         if ( ! currentIterator.hasPrev() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1289)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1290) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1291)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1292)         return CursorResult.SET;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1293)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1294) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1295)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1296)     public CursorResult setByEntityKey(long entityKey)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1297)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1298)         // TODO: This should be cleaned up.  We probably don't need to build
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1299)         // an iterator and we probably shouldn't be setting currentIterator because
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1300)         // there is no valid 'next' value.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1301)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1302)                                                 .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1303)                                                 .forTwinsOf( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1304)                                                 .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1305) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1306)         for ( EntityInstance ei : iter )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1307)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1308)             if ( ei.getEntityKey() == entityKey )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1309)             {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1310)                 currentIterator = iter;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1311)                 return setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1312)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1313)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1314) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1315)         return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1316)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1317) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1318)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1319)     public CursorResult setPosition(int position)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1320)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1321)         if ( position < 0 )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1322)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1323) 
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1324)         EntityInstanceImpl ei = getEntityInstance();
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1325)         if ( ei == null )
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1326)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1327) 
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1328)         ei = ei.getFirstTwin();
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1329)         while ( true )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1330)         {
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1331)             while ( ei != null && ei.isHidden() )
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1332)                 ei = ei.getNextTwin();
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1333) 
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1334)             if ( ei == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1335)                 return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1336) 
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1337)             if ( position == 0 )
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1338)             {
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1339)                 setCursor( ei );
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1340)                 return CursorResult.SET;
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1341)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1342) 
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1343)             ei = ei.getNextTwin();
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1344)             position--;
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 1345)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1346)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1347) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1348)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1349)     public CursorResult setPosition(int position, String scopingEntityName )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1350)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1351)         if ( position < 0 )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1352)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1353) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1354)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1355)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1356)             return setPosition( position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1357) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1358)         EntityDef scopingEntity = getLodDef().getEntityDef( scopingEntityName );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1359)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1360)                                             .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1361)                                             .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1362)                                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1363) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1364)         EntityInstanceImpl ei = null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1365)         for ( int i = 0; i <= position; i++ )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1366)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1367)             if ( ! iter.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1368)                 return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1369) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1370)             ei = iter.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1371)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1372) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1373)         setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1374)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1375)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1376) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1377)     Iterable<EntityCursorImpl> getChildCursors()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1378)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1379)         return new ChildIterable( this );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1380)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1381) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1382)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1383)     public EntityInstance acceptSubobject()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1384)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1385)         try
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1386)         {
accdcd54 (DeegC          2015-08-30 23:20:43 -0400 1387)             EntityInstanceImpl ei = getExistingInstance().acceptSubobject( getView() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1388)             setEntityInstance( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1389) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1390)             // The child cursors still point to the old version.  Reset them all to point
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1391)             // to the new version so that the GC doesn't hold onto the old ones.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1392)             for ( EntityCursorImpl child : getChildCursors() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1393)                 child.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1394) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1395)             assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1396)             return ei;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1397)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1398)         catch ( Throwable e )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1399)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1400)             throw ZeidonException.wrapException( e ).prependEntityDef( getEntityDef() );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1401)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1402)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1403) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1404)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1405)     public EntityInstance cancelSubobject()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1406)     {
5cc5364a (DeegC          2014-11-14 23:53:41 -0500 1407)         EntityInstanceImpl ei = getExistingInstance().cancelSubobject( getView() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1408)         setEntityInstance( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1409) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1410)         // The child cursors may still point to the new version.  Reset them all to point
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1411)         // to the old version so that the GC doesn't hold onto the new ones.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1412)         for ( EntityCursorImpl child : getChildCursors() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1413)             child.getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1414) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1415)         assert validateChains() : "Something is wrong with the chain pointers";
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1416)         return ei;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1417)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1418) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1419)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1420)      * @see com.quinsoft.zeidon.EntityInstance#acceptTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1421)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1422)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1423)     public void acceptTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1424)     {
accdcd54 (DeegC          2015-08-30 23:20:43 -0400 1425)         getExistingInstance().acceptTemporalEntity( getView() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1426)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1427)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1428) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1429)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1430)      * @see com.quinsoft.zeidon.EntityCursor#cancelTemporalEntity(com.quinsoft.zeidon.CursorPosition)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1431)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1432)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1433)     public CursorResult cancelTemporalEntity(CursorPosition position)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1434)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1435)         getExistingInstance().cancelTemporalEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1436)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1437)         return repositionCursor( position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1438)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1439) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1440)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1441)      * @see com.quinsoft.zeidon.EntityInstance#cancelTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1442)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1443)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1444)     public CursorResult cancelTemporalEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1445)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1446)         return cancelTemporalEntity( CursorPosition.NONE );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1447)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1448) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1449)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1450)     public CursorResult dropEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1451)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1452)         return dropEntity( CursorPosition.NONE );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1453)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1454) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1455)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1456)      * @see com.quinsoft.zeidon.EntityCursor#dropEntity(com.quinsoft.zeidon.CursorPosition)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1457)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1458)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1459)     public CursorResult dropEntity(CursorPosition position)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1460)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1461)         getExistingInstance().dropEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1462)         assert validateChains() : "Something is wrong with the chain pointers";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1463)         return repositionCursor( position );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1464)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1465) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1466)     void setCreated(boolean isCreated)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1467)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1468)         getExistingInstance().setCreated( isCreated );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1469)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1470) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1471)     void setUpdated(boolean isUpdated)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1472)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1473)         getExistingInstance().setUpdated( isUpdated );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1474)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1475) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1476)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1477)     public boolean isNull()
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1478)     {
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1479)         if ( ! viewCursor.isCursorInScope( this ) )
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1480)             throw new OutOfScopeException( this );
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1481) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1482)         EntityInstanceImpl ei = getEntityInstance();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1483)         return ei == null || ei.isHidden();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1484)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1485) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1486)     private static final class ChildIterable implements Iterable<EntityCursorImpl>
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1487)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1488)         private final EntityCursorImpl cursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1489) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1490)         /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1491)          * @param start
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1492)          */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1493)         private ChildIterable(EntityCursorImpl start)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1494)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1495)             this.cursor = start;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1496)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1497) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1498)         @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1499)         public Iterator<EntityCursorImpl> iterator()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1500)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1501)             return new Iterator<EntityCursorImpl>() {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1502)                 private EntityCursorImpl current = cursor;
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500 1503)                 private final int startLevel = cursor.getEntityDef().getDepth();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1504) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1505)                 @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1506)                 public boolean hasNext()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1507)                 {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1508)                     EntityCursorImpl next = current.getNextHierCursor();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1509)                     if ( next == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1510)                         return false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1511) 
ff8a2f64 (DeegC          2015-01-29 01:14:33 -0500 1512)                     if ( next.getEntityDef().getDepth() <= startLevel )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1513)                         return false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1514) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1515)                     return true;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1516)                 }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1517) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1518)                 @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1519)                 public EntityCursorImpl next()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1520)                 {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1521)                     current = current.getNextHierCursor();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1522)                     return current;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1523)                 }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1524) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1525)                 @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1526)                 public void remove()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1527)                 {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1528)                     throw new UnsupportedOperationException( "remove() not supported");
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1529)                 }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1530)             };
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1531)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1532)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1533) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1534)     private static class SortKey
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1535)     {
da4feb52 (dgc            2015-02-05 18:20:07 -0500 1536)         AttributeDef attributeDef;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1537)         boolean       ascending;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1538)         String        context;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1539) 
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1540)         SortKey(AttributeDef AttributeDef, boolean ascending, String context)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1541)         {
da4feb52 (dgc            2015-02-05 18:20:07 -0500 1542)             this.attributeDef = AttributeDef;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1543)             this.ascending = ascending;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1544)             this.context = context;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1545)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1546)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1547) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1548)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1549)      * Class used as a comparator when ordering entities.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1550)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1551)      * @author DG
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1552)      *
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1553)      */
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1554)     private static class EntitySorter implements Comparator<EntityInstanceImpl>, Serializable
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1555)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1556)         private static final long serialVersionUID = 1L;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1557) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1558)         private final List<SortKey> sortAttribs;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1559) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1560)         EntitySorter(List<SortKey> sortAttribs)
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1561)         {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1562)             super();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1563)             this.sortAttribs = sortAttribs;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1564)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1565) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1566)         private EntityInstanceImpl findMatchingChild( EntityInstanceImpl parent, EntityDef sortEntity )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1567)         {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1568)             // We need to find the child entity that matches sortEntity.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1569)             for ( EntityInstanceImpl child : parent.getChildrenHier() )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1570)             {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1571)                 if ( child.getEntityDef() == sortEntity )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1572)                     return child;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1573)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1574) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1575)             return null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1576)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1577) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1578)         @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1579)         public int compare(EntityInstanceImpl ei1, EntityInstanceImpl ei2 )
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1580)         {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1581)             assert ei1.getEntityDef() == ei2.getEntityDef();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1582) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1583)             for ( SortKey key : sortAttribs )
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1584)             {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1585)                 // Since we might be performing the compare on a child entity instance,
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1586)                 // create "compare" EIs.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1587)                 EntityInstanceImpl cei1 = ei1;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1588)                 EntityInstanceImpl cei2 = ei2;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1589) 
da4feb52 (dgc            2015-02-05 18:20:07 -0500 1590)                 EntityDef sortEntity = key.attributeDef.getEntityDef();
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1591)                 if ( cei1.getEntityDef() != sortEntity )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1592)                 {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1593)                     cei1 = findMatchingChild( cei1, sortEntity );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1594)                     cei2 = findMatchingChild( cei2, sortEntity );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1595) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1596)                     // Check for null entities.  If one is null then we can compare without
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1597)                     // checking the attributes.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1598)                     if ( cei1 == null || cei2 == null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1599)                     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1600)                         if ( cei1 != null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1601)                             return 1;  // cei2 is null, cei1 is not.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1602) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1603)                         if ( cei2 != null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1604)                             return -1; // cei1 is null, cei2 is not.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1605) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1606)                         return 0;  // Both are null.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1607)                     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1608)                 }
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1609) 
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1610)                 int cmp = 0;
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1611)                 if (key.context != null)
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1612)                 {
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1613)                 	// Use context for comparing.
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1614)                 	if ( cei1.getAttribute(key.attributeDef ).isNull() || cei2.getAttribute(key.attributeDef ).isNull() )
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1615)                 	{
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1616)                 		if ( !cei1.getAttribute(key.attributeDef ).isNull() )
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1617)                 			return 1;
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1618)                 		if ( !cei2.getAttribute(key.attributeDef ).isNull() )
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1619)                 			return -1;
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1620)                 		return 0; // Both are null.
a23b99fd (kellysautter   2015-09-18 12:12:23 -0400 1621)                 	}
da4feb52 (dgc            2015-02-05 18:20:07 -0500 1622)                 	String value1 = cei1.getAttribute(key.attributeDef ).getString( key.context );
da4feb52 (dgc            2015-02-05 18:20:07 -0500 1623)                 	String value2 = cei2.getAttribute(key.attributeDef ).getString( key.context );
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 1624) 
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1625)                 	cmp = value1.compareTo(value2);
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1626)                 }
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1627)                 else
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1628)                 {
bb7e787b (DeegC          2015-07-16 14:31:34 -0400 1629)                 	cmp = cei1.getAttribute( key.attributeDef ).compare( cei2.getAttribute( key.attributeDef ).getValue() );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1630)                 }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1631)                 if ( ! key.ascending )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1632)                     cmp = -cmp;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1633) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1634)                 if ( cmp != 0 )
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1635)                     return cmp;
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 1636) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1637)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1638) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1639)             return 0;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1640)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1641)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1642) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1643)     private List<SortKey> parseOrderKeys( String orderKeys )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1644)     {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1645)         // The old OE allowed the user to request using a bubble sort.  The bubble sort
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1646)         // kept already-sorted members in order.  The Java merge sort does the same
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1647)         // thing so there's no longer any need to support the bubble sort but we need
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1648)         // to ignore it if it's in the string.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1649)         if ( orderKeys.startsWith( ".bubblesort " ) )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1650)             orderKeys = orderKeys.substring( 12 ); // Ignore the bubble sort text.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1651) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1652)         // Replace all separating commas with emptystring.  Otherwise our ascending/descending values might be
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1653)         // "A," or "D,".
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1654)         orderKeys = orderKeys.replaceAll(",", "").replaceAll( "  ", " " );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1655) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1656)         List<SortKey> sortAttribs = new ArrayList<SortKey>();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1657)         String[] strings = orderKeys.split( " "  );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1658)         for ( int i = 0; i < strings.length; i++ )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1659)         {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1660)             String name = strings[i];
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1661)             EntityDef sortEntity = getEntityDef();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1662)             if ( name.contains( "." ) )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1663)             {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1664)                 String[] s = name.split( "\\." );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1665)                 if ( s.length != 2 )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1666)                     throw new ZeidonException( "Ill-formed order keys.  Entity.attrib name expected.  Got '%s'", name );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1667) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1668)                 sortEntity = getLodDef().getEntityDef( s[0] );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1669)                 name = s[1];
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1670)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1671) 
c002a606 (DeegC          2014-09-10 21:47:14 -0400 1672)             AttributeDef sortAttrib = sortEntity.getAttribute( name );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1673) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1674)             // Look for A or D.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1675)             boolean ascending = true;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1676)             if ( i + 1 < strings.length )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1677)             {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1678)                 if ( strings[ i + 1 ].equals( "A" ) )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1679)                 {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1680)                     ascending = true;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1681)                     i++; // Skip over the 'A'
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1682)                 }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1683)                 else
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1684)                 if ( strings[ i + 1 ].equals( "D" ) )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1685)                 {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1686)                     ascending = false;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1687)                     i++; // Skip over the 'D'
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1688)                 }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1689)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1690) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1691)             // Look for the context name.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1692)             String context = null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1693)             if ( i + 1 < strings.length )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1694)             {
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1695)             	// KJS 05/07/14 - Add context.
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1696)                 if ( strings[ i + 1 ].startsWith( "[" ) )
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1697)                 {
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1698)                 	context = strings[ i + 1 ].substring(1, strings[ i + 1 ].lastIndexOf("]"));
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1699)                 	i++;
3d9c8bb6 (kellysautter   2014-05-07 17:18:34 -0400 1700)                 }
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 1701) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1702)             }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1703) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1704)             sortAttribs.add( new SortKey( sortAttrib, ascending, context ) );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1705)         }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1706) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1707)         return sortAttribs;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1708)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1709) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1710)     /**
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1711)      * Sorts the entities according to the value of orderKeys.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1712)      *      orderKeys = String of paired 'words', consisting of "AttributeName x",
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1713)      *      where x is A for ascending, or D for descending. i.e.,
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1714)      *          "LastName A FirstName A".
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1715)      *
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1716)      *      A context may be specified for the sorting attribute by putting the
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1717)      *      context name in square brackets ("[" and "]" after the sort order:
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1718)      *          "LastName A State A [Abbrev]"
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1719)      *
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1720)      * @param orderKeys
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1721)      */
1532516e (dgc            2015-01-22 14:16:17 -0500 1722) 
1532516e (dgc            2015-01-22 14:16:17 -0500 1723)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1724)     public void orderEntities(String orderKeys)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1725)     {
1532516e (dgc            2015-01-22 14:16:17 -0500 1726)         List<SortKey> sortAttribs = parseOrderKeys( orderKeys );
1532516e (dgc            2015-01-22 14:16:17 -0500 1727)         EntitySorter comparator = new EntitySorter( sortAttribs );
1532516e (dgc            2015-01-22 14:16:17 -0500 1728)         orderEntities( comparator );
1532516e (dgc            2015-01-22 14:16:17 -0500 1729)     }
1532516e (dgc            2015-01-22 14:16:17 -0500 1730) 
1532516e (dgc            2015-01-22 14:16:17 -0500 1731)     @SuppressWarnings("unchecked") // For Collections.sort(...)
1532516e (dgc            2015-01-22 14:16:17 -0500 1732)     @Override
1532516e (dgc            2015-01-22 14:16:17 -0500 1733)     public void orderEntities( Comparator<? extends EntityInstance> comparator )
1532516e (dgc            2015-01-22 14:16:17 -0500 1734)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1735)          // If there is an autoseq attribute then ordering for this entity matters, so
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1736)          // validate that it can be updated.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1737)          boolean isAutoseq = getEntityDef().getAutoSeq() != null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1738)          if ( isAutoseq )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1739)              validateOiUpdate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1740) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1741)          // Get the first twin.  We do this first so that if the cursor is null
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1742)          // this throws the exception right away.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1743)     	 if ( getEntityInstance() == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1744)     		 return;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1745) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1746)     	 // Set cursor to first instance.  This will reposition the cursor to the first
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1747)     	 // non-hidden entity.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1748)     	 setFirst();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1749) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1750)          EntityInstanceImpl firstInstance = getExistingInstance().getFirstTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1751)          EntityInstanceImpl lastInstance = firstInstance.getLastTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1752)          EntityInstanceImpl prevHier = firstInstance.getPrevHier();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1753)          if ( firstInstance == lastInstance )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1754)              return; // There's only one instance so there's no need to re-order.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1755) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1756)          EntityInstanceImpl lastHier = lastInstance.getLastChildHier().getNextHier();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1757) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1758)          // Copy the entities into a list.  We null out the next/prev twin pointers so
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1759)          // we can re-insert them later.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1760)          List<EntityInstanceImpl> entities = new ArrayList<EntityInstanceImpl>();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1761)          EntityInstanceImpl nextInstance = null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1762)          for ( EntityInstanceImpl ei = firstInstance; ei != null; ei = nextInstance )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1763)          {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1764)              entities.add( ei );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1765)              nextInstance = ei.getNextTwin();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1766) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1767)              ei.setNextTwin( null );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1768)              ei.setPrevTwin( null );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1769)              ei.setPrevHier( null );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1770)              ei.getLastChildHier().setNextHier( null );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1771)          }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1772) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1773)          // Temporarily remove the instances from the chain.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1774)          EntityInstanceImpl parent = firstInstance.getParent();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1775)          if ( prevHier != null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1776)          {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1777)              prevHier.setNextHier( lastHier );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1778)              if ( lastHier != null )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1779)                  lastHier.setPrevHier( prevHier );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1780)          }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1781)          else
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1782)              getObjectInstance().setRootEntityInstance( null );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1783) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1784)          // Sort the entities.
1532516e (dgc            2015-01-22 14:16:17 -0500 1785)          Collections.sort( entities, (Comparator<? super EntityInstance>) comparator );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1786) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1787)          // Re-insert them into the chain.  We re-insert them starting with the last
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1788)          // twin because it's a bit faster.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1789)          ObjectInstance oi = getObjectInstance();
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1790)          EntityInstanceImpl previouslyInserted = null;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1791)          for ( int i = entities.size() - 1; i >= 0; i-- )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1792)          {
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1793)              EntityInstanceImpl ei = entities.get( i );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1794)              ei.insertInstance( oi, parent, previouslyInserted, CursorPosition.PREV, null );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1795)              if ( isAutoseq )
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1796)                  ei.setUpdated( true );  // This will set the OI updated flag as well.
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1797)              previouslyInserted = ei;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1798)          }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1799) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1800)          assert validateChains() : "Something is wrong with the chain pointers";
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1801)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1802) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1803)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1804)     public CursorResult checkExistenceOfEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1805)     {
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1806)         if ( ! viewCursor.isCursorInScope( this ) )
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1807)             return CursorResult.UNDEFINED;
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1808) 
0d7aa811 (DeegC          2015-01-10 14:37:50 -0500 1809)         // Check to see if the entity is null.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1810)         if ( ! isNull() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1811)             return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1812) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1813)         // If we get here then the entity is null or it points to a hidden instance.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1814)         // If it's a hidden instance then try to find a non-hidden instance.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1815)         EntityInstanceImpl ei = getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1816)         if ( ei == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1817)             return CursorResult.NULL;  // There are no twins so return NULL.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1818) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1819)         // Try to find a non-hidden twin.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1820)         EntityInstanceImpl search = ei.getNextTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1821)         while ( search != null && search.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1822)             search = search.getNextTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1823) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1824)         // If search is still null then we'll search for entities before ei.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1825)         if ( search == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1826)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1827)             search = ei.getPrevTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1828)             while ( search != null && search.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1829)                 search = search.getPrevTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1830)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1831) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1832)         // If search is *still* null then there are no non-hidden twins.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1833)         // Return null.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1834)         if ( search == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1835)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1836) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1837)         // Search points to a non-hidden entity.  Reset the cursor to the new entity
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1838)         // and return SET.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1839) //        setEntityInstance( search );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1840)         return CursorResult.UNDEFINED;
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1841)     }
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1842) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1843)     @Override
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1844)     public String toString()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1845)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1846)         StringBuilder builder = new StringBuilder();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1847) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1848)         // Don't use getEntityInstance() or getNull() because that will attempt to
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1849)         // establish the cursor.  We don't want toString() changing anything.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1850)         if ( entityInstance == null )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1851)             builder.append( getEntityDef() ).append( ": NULL" );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1852)         else
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1853)             builder.append( entityInstance.toString() );
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1854) 
1de11e4e (kellysautter   2014-05-07 20:21:30 -0400 1855)         return builder.toString();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1856)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1857) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1858)     @Override
7d81e1b9 (DeegC          2015-01-28 22:07:23 -0500 1859)     public void setToSubobject()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1860)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1861)         if ( entityDef.getParent() == null )
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1862)             throw new ZeidonException("Entity %s is the root of the LodDef", getEntityDef() );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1863) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1864)         if ( ! entityDef.isRecursive() )
ded12c70 (dgc            2015-03-30 12:35:42 -0400 1865)             throw new ZeidonException("Entity %s is not recursive", entityDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1866) 
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400 1867)         EntityInstanceImpl ei = getEntityInstance();
b8d9ef01 (DeegC          2014-07-06 11:32:18 -0400 1868)         EntityInstanceImpl parentOfSubobject = getParentCursor().getExistingInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1869) 
17b8b918 (DeegC          2015-04-09 10:48:18 -0400 1870)         EntityDef recursiveParentEntityDef = getEntityDef().getRecursiveParent();
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1871)         viewCursor.setRecursiveParent( ei, getEntityDef(), parentOfSubobject );
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1872)         viewCursor.getEntityCursor( recursiveParentEntityDef ).resetChildCursors( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1873)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1874) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1875)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1876)     public boolean resetSubobjectToParent()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1877)     {
7d81e1b9 (DeegC          2015-01-28 22:07:23 -0500 1878)         return viewCursor.resetSubobjectToParent();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1879)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1880) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1881)     EntityCursorImpl getParentCursor()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1882)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1883)         return parentCursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1884)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1885) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1886)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1887)     public int getEntityCount() throws NullCursorException
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1888)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1889)         EntityInstanceImpl ei = getEntityInstance(); // Establishes the cursor if necessary.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1890)         if ( ei == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1891)             return 0;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1892) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1893)         return ei.getTwinCount();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1894)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1895) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1896)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1897)     public EntityIterator<? extends EntityInstance> getChildren( EntityDef childEntityDef)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1898)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1899)         return getChildren( childEntityDef, false );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1900)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1901) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1902) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1903)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1904)     public EntityIterator<? extends EntityInstance> getChildren( EntityDef childEntityDef,
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1905)                                                                  boolean allowHidden )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1906)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1907)         return new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1908)                         .allowHidden( allowHidden )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1909)                         .withScoping( getExistingInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 1910)                         .forEntityDef( childEntityDef )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1911)                         .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1912)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1913) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1914)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1915)     public EntityIterator<? extends EntityInstance> getChildren(String childEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1916)     {
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 1917)         return getChildren( getLodDef().getEntityDef( childEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1918)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1919) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1920)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1921)      * Iterates through all the children of 'this' in heir order.  If includeParent
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1922)      * is true, then the iteration includes 'this' at the beginning.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1923)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1924)      * @param includeParent If true, include 'this'.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1925)      *
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1926)      * @return
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1927)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1928)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1929)     public EntityIterator<EntityInstanceImpl> getChildrenHier( boolean includeParent )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1930)     {
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1931)         return getChildrenHier( includeParent, true, true );
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1932)     }
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1933) 
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1934)     @Override
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1935)     public EntityIterator<EntityInstanceImpl> getChildrenHier( boolean includeParent,
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1936)                                                                boolean excludeHidden,
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1937)                                                                boolean forceLazyLoad )
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1938)     {
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1939)         // We don't call getExistingEntity().getChildrenHier(...) because we want to set the
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1940)         // view so that the iterator changes the cursor.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1941)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1942)                                                             .withScoping( getEntityInstance() )
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1943)                                                             .allowHidden( ! excludeHidden )
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1944)                                                             .setLazyLoad( forceLazyLoad )
61b07993 (DeegC          2015-03-07 13:46:30 -0500 1945)                                                             .setView( getView() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1946)                                                             .includeHierParent( includeParent )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1947)                                                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1948)         if ( ! includeParent && iter.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1949)             iter.next();  // Skip past the parent.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1950) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1951)         return iter;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1952)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1953) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1954)     @Override
011422c7 (DeegC          2015-04-08 21:18:40 -0400 1955)     public CopyAttributesBuilder copyAttributes()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1956)     {
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 1957)         return getExistingInstance().copyAttributes();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1958)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1959) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1960)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1961)     public boolean isDbhCreated()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1962)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1963)         return getExistingInstance().isDbhCreated();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1964)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1965) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1966)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1967)     public boolean isDbhDeleted()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1968)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1969)         return getExistingInstance().isDbhDeleted();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1970)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1971) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1972)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1973)     public boolean isDbhExcluded()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1974)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1975)         return getExistingInstance().isDbhExcluded();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1976)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1977) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1978)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1979)     public boolean isDbhUpdated()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1980)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1981)         return getExistingInstance().isDbhUpdated();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1982)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1983) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1984)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1985)     public boolean isDbhIncluded()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1986)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1987)         return getExistingInstance().isDbhIncluded();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1988)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1989) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1990)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1991)     public boolean isDbhNeedsInclude()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1992)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1993)         return getExistingInstance().isDbhNeedsInclude();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1994)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1995) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1996)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1997)     public boolean isDbhSeqUpdated()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1998)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 1999)         return getExistingInstance().isDbhSeqUpdated();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2000)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2001) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2002)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2003)     public boolean isDbhGenKeyNeeded()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2004)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2005)         return getExistingInstance().isDbhGenKeyNeeded();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2006)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2007) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2008)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2009)     public boolean isDbhNoGenKey()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2010)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2011)         return getExistingInstance().isDbhNoGenKey();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2012)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2013) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2014)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2015)     public boolean isDbhForeignKey()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2016)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2017)         return getExistingInstance().isDbhForeignKey();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2018)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2019) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2020)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2021)     public long getEntityKey()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2022)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2023)         return getExistingInstance().getEntityKey();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2024)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2025) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2026)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2027)      * @see com.quinsoft.zeidon.EntityInstance#getObjectInstanceId()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2028)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2029)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2030)     public long getObjectInstanceId()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2031)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2032)         return getExistingInstance().getObjectInstanceId();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2033)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2034) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2035)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2036)     public UUID getEntityUuid()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2037)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2038)         return getExistingInstance().getEntityUuid();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2039)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2040) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2041)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2042)      * @see com.quinsoft.zeidon.EntityInstance#getObjectInstanceId()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2043)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2044)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2045)     public UUID getObjectInstanceUuid()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2046)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2047)         return getExistingInstance().getObjectInstanceUuid();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2048)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2049) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2050)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2051)     public ViewImpl getView()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2052)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2053)         return viewCursor.getView();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2054)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2055) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2056)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2057)     public EntityIterator<EntityInstanceImpl> eachEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2058)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2059)         return new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2060)                         .setCursor(EntityCursorImpl.this)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2061)                         .forTwinsOf( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2062)                         .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2063)                         .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2064)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2065) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2066)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2067)     public EntityIterator<? extends EntityInstance> eachEntity( String scopingEntityName )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2068)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2069)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2070)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2071)             return eachEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2072) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2073)         return eachEntity( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2074)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2075) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2076)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2077)     public EntityIterator<? extends EntityInstance> eachEntity( EntityDef scopingEntity )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2078)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2079)         EntityInstanceImpl scopingEi = getScopingEntityInstance( scopingEntity );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2080)         return new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2081)                         .withScoping( scopingEi )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2082)                         .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2083)                         .setCursor(EntityCursorImpl.this)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2084)                         .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2085)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2086) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2087) 	@Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2088) 	public CursorResult setLast(String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2089) 	{
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2090)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2091)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2092)             return setLast();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2093) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2094)         return setLast( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2095) 	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2096) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2097) 	@Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2098) 	public CursorResult setLast(EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2099) 	{
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2100)         if ( scopingEntity == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2101)             return setLast();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2102) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2103)         if ( scopingEntity == getEntityDef().getParent() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2104)             return setLast();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2105) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2106)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2107)                                     .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2108)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2109)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2110)                                     .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2111)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2112)         if ( ! currentIterator.hasPrev() ) // Is there a last entity?
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2113)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2114) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2115)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2116)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2117) 	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2118) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2119) 	@Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2120) 	public CursorResult setLast(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2121) 	{
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2122) 	    return setLast( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2123) 	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2124) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2125) 	@Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2126) 	public CursorResult setLast(String attributeName, Object value, String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2127) 	{
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2128)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2129)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2130)             return setLast( attributeName, value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2131) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2132)         return setLast( getEntityDef().getAttribute( attributeName ), value, getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2133) 	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2134) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2135) 	@Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2136) 	public CursorResult setLast(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2137) 	{
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2138)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2139)                                     .forTwinsOf( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2140)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2141)                                     .setCursor( this )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2142)                                     .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2143)                                     .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2144)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2145)         if ( ! currentIterator.hasPrev() ) // Is there a last entity?
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2146)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2147) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2148)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2149)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2150) 	}
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2151) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2152) 	@Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2153)     public CursorResult setLast( AttributeDef attribute, Object value, EntityDef scopingEntity )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2154)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2155)         // TODO Auto-generated method stub
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2156)         throw new UnsupportedOperationException( "Not written yet" );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2157)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2158) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2159) 	@Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2160)     public CursorResult setPrev()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2161)     {
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2162)         // For performance reasons we won't create an iterator;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2163)         // we'll just manipulate the cursor directly.
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2164)         currentIterator = null;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2165) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2166)         EntityInstanceImpl ei = getEntityInstance();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2167)         if ( ei == null )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2168)             return CursorResult.NULL;
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2169) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2170)         ei = ei.getPrevTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2171)         while ( ei != null && ei.isHidden() )
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2172)             ei = ei.getPrevTwin();
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2173) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2174)         if ( ei == null || ei.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2175)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2176) 
bbea85d1 (DeegC          2015-05-23 22:59:03 -0400 2177)         setCursor( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2178)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2179)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2180) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2181) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2182)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2183)     public CursorResult setPrev(String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2184)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2185)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2186)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2187)             return setPrev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2188) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2189)         return setPrev( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2190)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2191) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2192)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2193)     public CursorResult setPrev(EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2194)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2195)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2196)                                     .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2197)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2198)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2199)                                     .currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2200)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2201)         if ( ! currentIterator.hasPrev() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2202)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2203) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2204)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2205)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2206)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2207) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2208)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2209)     public CursorResult setPrev(String attributeName, Object value, String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2210)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2211)         if ( StringUtils.isBlank( scopingEntityName ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2212)             return setPrev(getEntityDef().getAttribute( attributeName ), value);
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2213) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2214)         return setPrev( getEntityDef().getAttribute( attributeName ), value, getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2215)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2216) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2217)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2218)     public CursorResult setPrev( AttributeDef attribute, Object value, EntityDef scopingEntity)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2219)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2220)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2221) 					        .withScoping( getScopingEntityInstance( scopingEntity ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2222) 					        .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2223) 					        .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2224) 					        .currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2225)                             .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2226) 					        .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2227) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2228) 		if ( ! currentIterator.hasPrev() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2229) 		return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2230) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2231) 		currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2232) 		return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2233) 
971f8b0c (DeegC          2014-05-01 00:55:30 -0400 2234)     }
971f8b0c (DeegC          2014-05-01 00:55:30 -0400 2235) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2236)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2237)     public CursorResult setPrev( String attributeName, Object value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2238)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2239)         return setPrev( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2240)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2241) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2242)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2243)     public CursorResult setPrev( AttributeDef attribute, Object value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2244)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2245)         currentIterator = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2246)                                 .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2247)                                 .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2248)                                 .currentInstance( getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2249)                                 .withAttributeValue( attribute, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2250)                                 .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2251)                                 .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2252) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2253)         if ( ! currentIterator.hasPrev() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2254)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2255) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2256)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2257)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2258)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2259) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2260)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2261)      * @see com.quinsoft.zeidon.EntityInstance#display()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2262)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2263)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2264)     public void logEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2265)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2266)         logEntity( true, 0 );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2267)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2268) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2269)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2270)      * @see com.quinsoft.zeidon.EntityInstance#display(boolean)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2271)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2272)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2273)     public void logEntity(boolean displayChildren)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2274)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2275)         logEntity( displayChildren, 0 );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2276)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2277) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2278)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2279)      * @see com.quinsoft.zeidon.EntityInstance#display(boolean, int)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2280)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2281)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2282)     public void logEntity(boolean displayChildren, int indent)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2283)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2284)         getExistingInstance().logEntity( displayChildren, indent );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2285)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2286) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2287)     private CursorResult moveTwin(EntityInstanceImpl target, CursorPosition position, EntityInstanceImpl source)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2288)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2289)         validateOiUpdate();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2290)         EntityInstanceImpl lastHierChild = source.removeEntityFromChains();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2291)         source.insertInstance( getObjectInstance(), target.getParent(), target, position, lastHierChild );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2292) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2293)         // Set OI incremental flags if the entities are sequenced.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2294)         if ( getEntityDef().getAutoSeq() != null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2295)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2296)             target.setUpdated( true, false, true );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2297)             source.setUpdated( true, false, true );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2298)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2299) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2300)         assert validateChains() : "Something is wrong with the chain pointers";
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2301)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2302)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2303) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2304)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2305)      * @deprecated Use logEntity instead.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2306)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2307)     @Deprecated
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2308)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2309)     public void displayEntity()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2310)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2311)         logEntity( true, 0 );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2312)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2313) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2314)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2315)      * @deprecated Use logEntity instead.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2316)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2317)     @Deprecated
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2318)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2319)     public void displayEntity(boolean logChildren)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2320)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2321)         logEntity( logChildren, 0 );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2322)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2323) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2324)     /**
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2325)      * @deprecated Use logEntity instead.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2326)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2327)     @Deprecated
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2328)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2329)     public void displayEntity(boolean logChildren, int indentN)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2330)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2331)         logEntity( logChildren, indentN );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2332)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2333) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2334)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2335)      * @see com.quinsoft.zeidon.EntityCursor#moveSubobject(int, com.quinsoft.zeidon.EntityCursor, int)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2336)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2337)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2338)     public CursorResult moveSubobject(CursorPosition position, EntityCursor source, CursorPosition sourceReposition)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2339)     {
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2340)         return moveSubobject(position, (EntityInstance) source, sourceReposition );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2341)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2342) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2343)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2344)      * @see com.quinsoft.zeidon.EntityCursor#moveSubobject(int, com.quinsoft.zeidon.EntityInstance)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2345)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2346)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2347)     public CursorResult moveSubobject(CursorPosition position, EntityInstance source)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2348)     {
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2349)         return moveSubobject(position, source, CursorPosition.NEXT );
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2350)     }
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2351) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2352)     private void verifySubobjectMove( EntityInstance source )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2353)     {
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2354)         // Make sure source is not a parent of target.  If it is we're attempting to
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2355)         // move a parent under it's child.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2356)         EntityInstanceImpl target = getEntityInstance();
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2357)         if ( target == null )
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2358)             target = getParentCursor().getEntityInstance();
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2359) 
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2360)         if ( source.getEntityInstance() == null )
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2361)             throw new ZeidonException( "Source EntityCursor is null" );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2362) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2363)         if ( target.isChildOf( source ) )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2364)             throw new ZeidonException( "Attempting to move an entity instance under one of its children" )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2365)                             .appendMessage( "Target Entity = %s", getEntityDef().getName() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2366)                             .appendMessage( "Child entity = %s", source.getEntityDef().getName() );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2367) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2368)         if ( ! getEntityDef().isInclude() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2369)             throw new ZeidonException( "Target of moveSubobject be be includable" )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2370)                             .appendMessage( "Target = %s", getEntityDef().getName() );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2371) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2372)         if ( ! source.getEntityDef().isExclude() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2373)             throw new ZeidonException( "Source of moveSubobject be be excludable" )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2374)                             .appendMessage( "Source = %s", source.getEntityDef().getName() );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2375) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2376)         // Verify that the EntityDefs are the same for source and target -or- one is a recursive
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2377)         // child of the other.
bf6af920 (DeegC          2015-05-25 14:42:32 -0400 2378)         // The COE requires them to be the same EntityDef but is that really necessary?
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2379)         if ( getEntityDef() == source.getEntityDef() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2380)             return;
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2381) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2382)         if ( source.getEntityDef().getLodDef() != getEntityDef().getLodDef() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2383)             throw new ZeidonException( "When moving subobjects, source and target OIs must be using the same LOD" );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2384) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2385)         if ( getEntityDef().isRecursiveParent() && source.getEntityDef().isRecursive() &&
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2386)              getEntityDef().isAncestorOf( source.getEntityDef() ) )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2387)         {
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2388)             return;
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2389)         }
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2390) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2391)         if ( source.getEntityDef().isRecursiveParent() && getEntityDef().isRecursive() &&
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2392)              source.getEntityDef().isAncestorOf( getEntityDef() ) )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2393)         {
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2394)             return;
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2395)         }
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2396) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2397)         // If we get here then user has specified incorrect EntityDefs.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2398)         throw new ZeidonException( "When moving subobjects, source and target must be the same entity type " +
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2399)                                    "or one must be a recursive parent of the other" );
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2400)     }
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2401) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2402)     private CursorResult moveSubobject(CursorPosition position, EntityInstance source, CursorPosition sourceReposition)
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2403)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2404)         validateOiUpdate();
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2405) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2406)         EntityInstanceImpl target = getEntityInstance();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2407) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2408)         // If source and target are the same then there's nothing to do.  Call getEntityInstance() on
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2409)         // source because it may be a EntityCursor.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2410)         if ( target == source.getEntityInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2411)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2412) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2413)         // If they have the same parent then we're moving twins.  Call a different method.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2414)         // If this changes then we need to verify max cardinality.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2415)         if ( target != null && target.getParent() == source.getParent() )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2416)             return moveTwin( target, position, (EntityInstanceImpl) source.getEntityInstance() );
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2417) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2418)         // Verify that the subobject can be moved between different parents.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2419)         verifySubobjectMove( source );
853f32d4 (DeegC          2015-03-31 23:16:49 -0400 2420) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2421)         // If we get here then everything should be good.
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2422)         includeSubobject( source, position );
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2423)         if ( source instanceof EntityCursor )
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2424)             return ((EntityCursor) source).excludeEntity( sourceReposition );
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2425) 
93eefdc1 (dgc            2015-03-30 16:54:56 -0400 2426)         source.excludeEntity();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2427)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2428)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2429) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2430)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2431)      * @see com.quinsoft.zeidon.EntityInstance#getHierPosition()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2432)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2433)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2434)     public long getHierPosition()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2435)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2436)         return getExistingInstance().getHierPosition();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2437)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2438) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2439)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2440)     public long getPosition()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2441)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2442)         return getExistingInstance().getPosition();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2443)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2444) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2445)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2446)      * @see com.quinsoft.zeidon.EntityCursor#setFirstWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2447)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2448)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2449)     public CursorResult setFirstWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2450)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2451)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2452)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2453)                                     .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2454)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2455)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2456)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2457)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2458) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2459)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2460)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2461)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2462) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2463)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2464)      * @see com.quinsoft.zeidon.EntityCursor#setNextWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2465)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2466)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2467)     public CursorResult setNextWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2468)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2469)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2470)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2471)                                     .withOiScoping( getObjectInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2472)                                     .currentInstance( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2473)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2474)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2475)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2476)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2477) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2478)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2479)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2480)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2481) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2482)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2483)      * @see com.quinsoft.zeidon.EntityCursor#hasNext()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2484)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2485)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2486)     public boolean hasNext()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2487)     {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2488)         if ( ! viewCursor.isCursorInScope( this ) )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2489)             throw new OutOfScopeException( this );
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2490) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2491)         EntityInstanceImpl ei = getEntityInstance();
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2492)         if ( ei == null )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2493)             return false;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2494) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2495)         // See if there is a next, nonhidden twin.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2496)         for ( EntityInstanceImpl search = ei.getNextTwin(); search != null; search = search.getNextTwin() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2497)         {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2498)             if ( !search.isHidden() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2499)                 return true;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2500)         }
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2501) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2502)         // If we get here then we didn't find any non-hidden EIs.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2503)         return false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2504)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2505) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2506)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2507)      * @see com.quinsoft.zeidon.EntityCursor#hasNext()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2508)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2509)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2510)     public boolean hasPrev()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2511)     {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2512)         if ( ! viewCursor.isCursorInScope( this ) )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2513)             throw new OutOfScopeException( this );
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2514) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2515)         EntityInstanceImpl ei = getEntityInstance();
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2516)         if ( ei == null )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2517)             return false;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2518) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2519)         // Look for a prev non-hidden twin.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2520)         for ( EntityInstanceImpl search = ei.getPrevTwin(); search != null; search = search.getPrevTwin() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2521)         {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2522)             if ( ! search.isHidden() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2523)                 return true;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2524)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2525) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2526)         // If we get here then we didn't find any non-hidden EIs.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2527)         return false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2528)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2529) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2530)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2531)      * @see com.quinsoft.zeidon.EntityCursor#hasAny()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2532)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2533)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2534)     public boolean hasAny()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2535)     {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2536)         if ( ! viewCursor.isCursorInScope( this ) )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2537)             throw new OutOfScopeException( this );
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2538) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2539)         EntityInstanceImpl ei = getEntityInstance();
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2540)         if ( ei == null )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2541)             return false;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2542) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2543)         if ( ! ei.isHidden() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2544)             return true;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2545) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2546)         // If we get here then ei is hidden. See if there are any non-hidden EIs
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2547)         // either before or after this ei.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2548)         for ( EntityInstanceImpl search = ei.getPrevTwin(); search != null; search = search.getPrevTwin() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2549)         {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2550)             if ( ! search.isHidden() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2551)                 return true;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2552)         }
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2553) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2554)         for ( EntityInstanceImpl search = ei.getNextTwin(); search != null; search = search.getNextTwin() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2555)         {
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2556)             if ( !search.isHidden() )
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2557)                 return true;
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2558)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2559) 
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2560)         // If we get here then we didn't find any non-hidden EIs.
9f83cacb (dgc            2015-02-12 17:43:37 -0500 2561)         return false;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2562)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2563) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2564)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2565)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(java.lang.String)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2566)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2567)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2568)     public boolean hasAny(String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2569)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2570)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2571)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2572)             return hasAny();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2573) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2574)         return hasAny( getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2575)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2576) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2577)     /* (non-Javadoc)
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2578)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(com.quinsoft.zeidon.objectdefinition.EntityDef)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2579)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2580)     @Override
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2581)     public boolean hasAny(EntityDef scopingEntityDef)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2582)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2583)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2584)                                             .withScoping( getScopingEntityInstance( scopingEntityDef ) )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2585)                                             .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2586)                                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2587)         return iter.hasNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2588)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2589) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2590)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2591)      * @see com.quinsoft.zeidon.EntityCursor#hasAnyWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2592)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2593)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2594)     public boolean hasAnyWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2595)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2596)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2597)                                             .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2598)                                             .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2599)                                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2600)         return iter.hasNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2601)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2602) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2603)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2604)      * @see com.quinsoft.zeidon.EntityCursor#setFirstWithinOi(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2605)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2606)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2607)     public CursorResult setFirstWithinOi( AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2608)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2609)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2610)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2611)                                     .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2612)                                     .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2613)                                     .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2614)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2615)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2616)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2617) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2618)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2619)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2620)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2621) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2622)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2623)      * @see com.quinsoft.zeidon.EntityCursor#setNextWithinOi(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2624)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2625)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2626)     public CursorResult setNextWithinOi(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2627)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2628)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2629)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2630)                                     .withOiScoping( getObjectInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2631)                                     .currentInstance( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2632)                                     .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2633)                                     .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2634)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2635) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2636)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2637)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2638) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2639)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2640)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2641)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2642) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2643)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2644)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2645)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2646)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2647)     public boolean hasAny(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2648)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2649)         return hasAny( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2650)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2651) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2652)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2653)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(java.lang.String, java.lang.Object, java.lang.String)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2654)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2655)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2656)     public boolean hasAny(String attributeName, Object value, String scopingEntityName)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2657)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2658)         // We'll assume that a blank/null scoping entity means no scoping.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2659)         if ( StringUtils.isBlank( scopingEntityName ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2660)             return hasAny( attributeName, value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2661) 
65d77e0a (DeegC          2014-09-10 22:43:28 -0400 2662)         return hasAny( getEntityDef().getAttribute( attributeName ), value, getLodDef().getEntityDef( scopingEntityName ) );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2663)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2664) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2665)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2666)      * @see com.quinsoft.zeidon.EntityCursor#hasAnyWithinOi(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2667)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2668)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2669)     public boolean hasAnyWithinOi(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2670)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2671)         return hasAnyWithinOi( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2672)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2673) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2674)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2675)      * @see com.quinsoft.zeidon.EntityCursor#setLastWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2676)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2677)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2678)     public CursorResult setLastWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2679)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2680)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2681)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2682)                                     .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2683)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2684)                                     .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2685)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2686)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2687)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2688) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2689)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2690)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2691)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2692) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2693)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2694)      * @see com.quinsoft.zeidon.EntityCursor#setLastWithinOi(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2695)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2696)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2697)     public CursorResult setLastWithinOi(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2698)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2699)         return setLastWithinOi( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2700)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2701) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2702)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2703)      * @see com.quinsoft.zeidon.EntityCursor#setPrevWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2704)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2705)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2706)     public CursorResult setPrevWithinOi()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2707)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2708)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2709)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2710)                                     .withOiScoping( getObjectInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2711)                                     .currentInstance( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2712)                                     .forEntityDef( getEntityDef() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2713)                                     .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2714)                                     .build();
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2715) 
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2716)         if ( ! currentIterator.hasPrev() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2717)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2718) 
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2719)         currentIterator.prev();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2720)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2721)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2722) 
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2723)     private boolean assertParentCursors()
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2724)     {
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2725)         if ( getParentCursor() == null )
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2726)             return true;
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2727) 
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2728)         // Break this out with a 'if' statement to make it easier to set a breakpoint.
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2729)         if ( getParentCursor().getEntityInstance() == getEntityInstance().getParent() )
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2730)             return true;
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2731)         else
157c6024 (DeegC          2015-04-10 01:26:08 -0400 2732)             return false;
1acbbfd9 (DeegC          2015-01-24 17:51:15 -0500 2733)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2734)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2735)      * @see com.quinsoft.zeidon.EntityCursor#setPrevWithinOi(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2736)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2737)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2738)     public CursorResult setPrevWithinOi(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2739)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2740)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2741)                                     .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2742)                                     .withOiScoping( getObjectInstance() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2743)                                     .currentInstance( getEntityInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2744)                                     .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2745)                                     .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2746)                                     .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2747)                                     .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2748)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2749)             return CursorResult.UNCHANGED;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2750) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2751)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2752)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2753)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2754) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2755)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2756)      * @see com.quinsoft.zeidon.EntityCursor#setFirstWithinOi(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2757)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2758)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2759)     public CursorResult setFirstWithinOi(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2760)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2761)         return setFirstWithinOi( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2762)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2763) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2764)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2765)      * @see com.quinsoft.zeidon.EntityCursor#setNextWithinOi(java.lang.String, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2766)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2767)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2768)     public CursorResult setNextWithinOi(String attributeName, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2769)     {
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2770)         return setNextWithinOi( getEntityDef().getAttribute( attributeName ), value );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2771)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2772) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2773)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2774)      * @see com.quinsoft.zeidon.EntityCursor#setLastWithinOi(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2775)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2776)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2777)     public CursorResult setLastWithinOi(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2778)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2779)         currentIterator = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2780)                                 .setCursor( this )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2781)                                 .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2782)                                 .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2783)                                 .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2784)                                 .setLast()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2785)                                 .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2786)         if ( ! currentIterator.hasNext() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2787)             return CursorResult.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2788) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2789)         currentIterator.next();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2790)         return CursorResult.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2791)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2792) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2793)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2794)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2795)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2796)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2797)     public boolean hasAny(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2798)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2799)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2800)                             .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2801)                             .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2802)                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2803)         return iter.hasNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2804)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2805) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2806)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2807)      * @see com.quinsoft.zeidon.EntityCursor#hasAny(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object, com.quinsoft.zeidon.objectdefinition.EntityDef)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2808)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2809)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2810)     public boolean hasAny(AttributeDef attributeDef, Object value, EntityDef scopingEntityDef)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2811)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2812)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2813)                             .forEntityDef( getEntityDef() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2814)                             .withScoping( getScopingEntityInstance( scopingEntityDef ) )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2815)                             .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2816)                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2817)         return iter.hasNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2818)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2819) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2820)     /* (non-Javadoc)
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2821)      * @see com.quinsoft.zeidon.EntityCursor#hasAnyWithinOi(com.quinsoft.zeidon.objectdefinition.AttributeDef, java.lang.Object)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2822)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2823)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2824)     public boolean hasAnyWithinOi(AttributeDef attributeDef, Object value)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2825)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2826)         EntityIterator<EntityInstanceImpl> iter = new IteratorBuilder(getObjectInstance())
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2827)                             .withOiScoping( getObjectInstance() )
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2828)                             .forEntityDef( getEntityDef() )
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2829)                             .withAttributeValue( attributeDef, value )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2830)                             .build();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2831)         return iter.hasNext();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2832)    }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2833) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2834)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2835)      * @see com.quinsoft.zeidon.EntityInstance#isLinked(com.quinsoft.zeidon.EntityInstance)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2836)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2837)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2838)     public boolean isLinked( EntityInstance ei )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2839)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2840)         return getExistingInstance().isLinked( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2841)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2842) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2843)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2844)      * @see com.quinsoft.zeidon.EntityInstance#getPrevTwin()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2845)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2846)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2847)     public EntityInstance getPrevTwin()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2848)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2849)         return getExistingInstance().getPrevTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2850)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2851) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2852)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2853)      * @see com.quinsoft.zeidon.EntityInstance#getNextTwin()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2854)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2855)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2856)     public EntityInstance getNextTwin()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2857)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2858)         return getExistingInstance().getNextTwin();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2859)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2860) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2861)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2862)      * @see com.quinsoft.zeidon.EntityInstance#linkInstances(com.quinsoft.zeidon.EntityInstance)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2863)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2864)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2865)     public boolean linkInstances( EntityInstance ei )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2866)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2867)         return getExistingInstance().linkInstances( ei );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2868)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2869) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2870)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2871)      * @see com.quinsoft.zeidon.EntityInstance#getLinkedInstances()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2872)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2873)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2874)     public Collection<? extends EntityInstance> getLinkedInstances()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2875)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2876)         return getExistingInstance().getLinkedInstances();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2877)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2878) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2879)     boolean validateChains()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2880)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2881)         return getObjectInstance().validateChains();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2882)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2883) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2884)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2885)      * @see com.quinsoft.zeidon.EntityInstance#setMatchingAttributesByName(com.quinsoft.zeidon.EntityInstance, long)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2886)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2887)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2888)     public int setMatchingAttributesByName( EntityInstance sourceInstance, EnumSet<SetMatchingFlags> control )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2889)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2890)         return getExistingInstance().setMatchingAttributesByName( sourceInstance, control );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2891)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2892) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2893)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2894)      * @see com.quinsoft.zeidon.EntityInstance#setMatchingAttributesByName(com.quinsoft.zeidon.EntityInstance)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2895)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2896)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2897)     public int setMatchingAttributesByName( EntityInstance sourceInstance )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2898)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2899)         return getExistingInstance().setMatchingAttributesByName( sourceInstance );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2900)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2901) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2902)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2903)      * @see com.quinsoft.zeidon.EntityCursor#getStatus()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2904)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2905)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2906)     public CursorStatus getStatus()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2907)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2908)         if ( ! viewCursor.isCursorInScope( this ) )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2909)             return CursorStatus.OUT_OF_SCOPE;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2910) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2911)         EntityInstanceImpl ei = getEntityInstance( false );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2912)         if ( ei == null )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2913)         {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2914)             // The cursor is null.  It's possible that we haven't loaded a lazy load
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2915)             // entity.  Check for that by looking at each of the conditions required
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2916)             // for lazy load.  If none of them are true then return NULL.
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2917) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2918)             // Do we allow lazy loading for this entity?  If not, must be null.
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2919)             LazyLoadConfig config = getEntityDef().getLazyLoadConfig();
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2920)             if ( config.isLazyLoad() )
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2921)             {
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2922)                 assert parentCursor != null : "Root cannot be lazy load candidate";
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2923) 
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2924)                 EntityInstanceImpl parent = parentCursor.getEntityInstance( false );
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2925)                 if ( parent == null )
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2926)                     // TODO: What if there are multiple levels of LazyLoad?  It's possible that
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2927)                     // the parent entity wasn't loaded because it is lazyload.
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2928)                     return CursorStatus.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2929) 
e28c4d1e (DeegC          2014-09-10 21:12:23 -0400 2930)                 if ( parent.hasChildBeenLazyLoaded( getEntityDef() ) )
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2931)                     return CursorStatus.NULL;
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2932) 
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2933)                 return CursorStatus.NOT_LOADED;
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2934)             }
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2935)             else
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2936)             if ( config.hasLazyLoadParent() )
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2937)             {
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2938)                 assert parentCursor != null : "Root cannot be lazy load candidate";
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2939) 
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2940)                 // Get the status of the parent.  If the status isn't normal (i.e. set to an EI)
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2941)                 // then the child must have the same status.
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2942)                 EntityCursorImpl pcursor = getViewCursor().getEntityCursor( config.getLazyLoadParent() );
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2943)                 CursorStatus parentStatus = pcursor.getStatus();
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2944)                 if ( parentStatus != CursorStatus.SET )
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2945)                     return parentStatus;
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2946)             }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2947) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2948)             // The lazy-load parent has been loaded.  That means we must be null.
8fc583c9 (DeegC          2014-07-04 14:40:24 -0400 2949)             return CursorStatus.NULL;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2950)         }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2951) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2952)         if ( ei.isHidden() )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2953)             return CursorStatus.HIDDEN;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2954) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2955)         return CursorStatus.SET;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2956)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2957) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2958)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2959)      * @see com.quinsoft.zeidon.EntityInstance#getKeyString()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2960)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2961)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2962)     public String getKeyString()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2963)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2964)         return getExistingInstance().getKeyString();
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2965)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2966) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2967)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2968)      * @see com.quinsoft.zeidon.EntityInstance#setIncrementalFlags(java.util.EnumSet)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2969)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2970)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2971)     public EntityInstanceImpl setIncrementalFlags( EnumSet<IncrementalEntityFlags> flags )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2972)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2973)         return getExistingInstance( true ).setIncrementalFlags( flags );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2974)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2975) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2976)     /* (non-Javadoc)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2977)      * @see com.quinsoft.zeidon.EntityInstance#setIncrementalFlags(com.quinsoft.zeidon.standardoe.IncrementalEntityFlags)
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2978)      */
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2979)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2980)     public EntityInstance setIncrementalFlags( IncrementalEntityFlags flag )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2981)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2982)         return getExistingInstance( true ).setIncrementalFlags( flag );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2983)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2984) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2985)     private ViewCursor getViewCursor()
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2986)     {
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2987)         return viewCursor;
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2988)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2989) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2990)     @Override
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2991)     public AttributeInstance getAttribute( String attributeName )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2992)     {
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2993)         AttributeDef attributeDef = getEntityDef().getAttribute( attributeName );
1e2935d5 (dgc            2015-08-28 14:41:25 -0400 2994)         if ( attributeDef.isHidden() )
1e2935d5 (dgc            2015-08-28 14:41:25 -0400 2995)             throw new HiddenAttributeException( attributeDef );
1e2935d5 (dgc            2015-08-28 14:41:25 -0400 2996) 
c002a606 (DeegC          2014-09-10 21:47:14 -0400 2997)         return getAttribute( attributeDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2998)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 2999) 
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 3000)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 3001)     public AttributeInstance getAttribute( AttributeDef attributeDef )
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 3002)     {
6fcb8fd6 (DeegC          2015-02-12 14:22:14 -0500 3003)         return getExistingInstance().getAttribute( getView(), attributeDef );
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 3004)     }
4813f989 (DeegC          2014-08-02 15:44:23 -0400 3005) 
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3006)     @Override
c002a606 (DeegC          2014-09-10 21:47:14 -0400 3007)     public AttributeInstance createDynamicAttributeDef( DynamicAttributeDefConfiguration config )
4813f989 (DeegC          2014-08-02 15:44:23 -0400 3008)     {
c002a606 (DeegC          2014-09-10 21:47:14 -0400 3009)         return getExistingInstance().createDynamicAttributeDef( config );
4813f989 (DeegC          2014-08-02 15:44:23 -0400 3010)     }
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3011) 
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3012)     @Override
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3013)     public EntityIterator<? extends EntityInstance> getDirectChildren()
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3014)     {
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3015)         return getExistingInstance().getDirectChildren();
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3016)     }
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3017) 
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3018)     @Override
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3019)     public EntityIterator<? extends EntityInstance> getDirectChildren( boolean allowHidden )
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3020)     {
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3021)         return getExistingInstance().getDirectChildren( allowHidden );
c0acd58d (DeegC          2014-08-13 00:34:31 -0400 3022)     }
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3023) 
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3024)     @Override
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3025)     public EntityIterator<? extends EntityInstance> getDirectChildren( boolean allowHidden, boolean allowLazyLoad )
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3026)     {
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3027)         return getExistingInstance().getDirectChildren( allowHidden, allowLazyLoad );
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3028)     }
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3029) 
fd4a32c5 (dgc            2014-09-15 11:59:24 -0400 3030)     @Override
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3031)     public boolean hasNextTwin()
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3032)     {
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3033)         return getExistingInstance().hasNextTwin();
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3034)     }
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3035) 
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3036)     @Override
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3037)     public boolean hasPrevTwin()
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3038)     {
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3039)         return getExistingInstance().hasPrevTwin();
0cd50558 (dgc            2014-08-14 18:12:11 -0400 3040)     }
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3041) 
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3042)     @Override
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3043)     public EntityIterator<? extends EntityInstance> allEntities()
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3044)     {
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3045)         return new IteratorBuilder( getObjectInstance() )
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3046)                                     .setCursor( this )
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3047)                                     .withOiScoping( getObjectInstance() )
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3048)                                     .forEntityDef( getEntityDef() )
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3049)                                     .build();
798e14a4 (dgc            2015-02-11 15:36:32 -0500 3050)     }
eefc890b (dgc            2015-02-23 12:35:43 -0500 3051) 
eefc890b (dgc            2015-02-23 12:35:43 -0500 3052)     @Override
eefc890b (dgc            2015-02-23 12:35:43 -0500 3053)     public List<AttributeInstance> getAttributes()
eefc890b (dgc            2015-02-23 12:35:43 -0500 3054)     {
eefc890b (dgc            2015-02-23 12:35:43 -0500 3055)         return getExistingInstance( true ).getAttributes();
eefc890b (dgc            2015-02-23 12:35:43 -0500 3056)     }
eefc890b (dgc            2015-02-23 12:35:43 -0500 3057) 
eefc890b (dgc            2015-02-23 12:35:43 -0500 3058)     @Override
eefc890b (dgc            2015-02-23 12:35:43 -0500 3059)     public List<AttributeInstance> getAttributes( boolean includeNullValues )
eefc890b (dgc            2015-02-23 12:35:43 -0500 3060)     {
eefc890b (dgc            2015-02-23 12:35:43 -0500 3061)         return getExistingInstance( true ).getAttributes( includeNullValues );
eefc890b (dgc            2015-02-23 12:35:43 -0500 3062)     }
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 3063) 
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 3064)     @Override
011422c7 (DeegC          2015-04-08 21:18:40 -0400 3065)     public void copyAttributes( CopyAttributesBuilder flags )
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 3066)     {
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 3067)         getExistingInstance( true ).copyAttributes( flags );
f52b9ff8 (dgc            2015-04-08 20:59:57 -0400 3068)     }
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3069) 
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3070)     @Override
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3071)     public boolean isIncomplete()
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3072)     {
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3073)         return getExistingInstance().isIncomplete();
6db096c5 (DeegC          2015-05-31 16:21:32 -0400 3074)     }
39061526 (DeegC          2015-07-10 23:48:48 -0400 3075) 
39061526 (DeegC          2015-07-10 23:48:48 -0400 3076)     @Override
39061526 (DeegC          2015-07-10 23:48:48 -0400 3077)     public boolean compareEntity( EntityInstance sourceInstance )
39061526 (DeegC          2015-07-10 23:48:48 -0400 3078)     {
39061526 (DeegC          2015-07-10 23:48:48 -0400 3079)         return compareEntity( sourceInstance, CompareEntityOptions.DEFAULT_OPTIONS );
39061526 (DeegC          2015-07-10 23:48:48 -0400 3080)     }
39061526 (DeegC          2015-07-10 23:48:48 -0400 3081) 
39061526 (DeegC          2015-07-10 23:48:48 -0400 3082)     @Override
39061526 (DeegC          2015-07-10 23:48:48 -0400 3083)     public boolean compareEntity( EntityInstance sourceInstance, CompareEntityOptions options )
39061526 (DeegC          2015-07-10 23:48:48 -0400 3084)     {
39061526 (DeegC          2015-07-10 23:48:48 -0400 3085)         return getExistingInstance().compareEntity( sourceInstance, options );
39061526 (DeegC          2015-07-10 23:48:48 -0400 3086)     }
^6061eba (DG Christensen 2014-02-19 20:48:31 -0500 3087) }
