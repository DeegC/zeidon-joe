/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright © 2007 - 2012 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    wSPLD         - Subregistrant Physical Label Definition operations
// FILE:         wSPLD.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitListSubregProducts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitListSubregProducts( VIEW ViewToWindow )

// VIEW lPrimReg REGISTERED AS lPrimReg
// VIEW mSubreg  BASED ON LOD  mSubreg
//
// GET VIEW mSubreg NAMED "mSubreg"
// IF mSubreg != 0
//    DropObjectInstance( mSubreg )
// END
//
// ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lPrimReg.PrimaryRegistrant.ID
// NAME VIEW mSubreg "mSubreg"

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewSubregProduct( VIEW ViewToWindow )

   // nothing to do here

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateSubregProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg

   wWebXfer.Root.AttemptProductName = ""
   wWebXfer.Root.AttemptProductNumber = ""

   // We need to create a new SubregProduct entity.
   CreateTemporalEntity( mSubreg, "SubregProduct", zPOS_LAST )

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg

   wWebXfer.Root.AttemptProductName = mSubreg.SubregProduct.Name
   wWebXfer.Root.AttemptProductNumber = mSubreg.SubregProduct.Number

   CreateTemporalSubobjectVersion( mSubreg, "SubregProduct" )
   wWebXfer.Root.CurrentContentType = ""
   OrderEntityForView( mSubreg, "SubregLabelContent", "CreatedDateTime D" )

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg

   // Preliminary check is performed by the JSP to ensure that exactly one Master Product is selected.
   IF mSubreg.PrimaryRegistrant EXISTS

      SET CURSOR FIRST mSubreg.ListMasterProduct WHERE mSubreg.ListMasterProduct.wkSelected = "Y"
      IF RESULT = 0
         IncludeSubobjectFromSubobject( mSubreg, "MasterProduct",
                                        mSubreg, "ListMasterProduct", zPOS_BEFORE )
         AcceptSubobject( mSubreg, "SubregProduct" )
         Commit mSubreg
         RETURN 0
      END
   END

   MessageSend( ViewToWindow, "", "New Subregistrant Product",
                "One Master Product must be selected.",
                zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   RETURN 2

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateSubregProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lControl
   SHORT   nRC

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1
      MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                   "The Subregistrant Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      IF szProductName != mSubreg.SubregProduct.Name
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSubreg, "SubregProduct", "Name", lControl,
                             szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                         "The Subregistrant Product Name must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            TraceLineS( "Original Product Name: ", mSubreg.SubregProduct.Name )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END
      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1
      MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                   "The Subregistrant Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      IF szProductNumber != mSubreg.SubregProduct.Number
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSubreg, "SubregProduct", "Number", lControl,
                             szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                         "The Subregistrant Product Number must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END
      END
   END

   mSubreg.SubregProduct.Name = szProductName
   mSubreg.SubregProduct.Number = szProductNumber
   AcceptSubobject( mSubreg, "SubregProduct" )
   COMMIT mSubreg
// DropObjectInstance( mSubreg )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg

   CancelSubobject( mSubreg, "SubregProduct" )
   SET CURSOR FIRST mSubreg.SubregProduct

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg  REGISTERED AS mSubreg

// CancelSubobject( mSubreg, "SubregLabelContent" )
   CancelSubobject( mSubreg, "SubregProduct" )
   SET CURSOR FIRST mSubreg.SubregProduct
// DropObjectInstance( mSubreg )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeletePhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeletePhysicalLabelDef( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   INTEGER lID
   SHORT   nRC

 IssueError( ViewToWindow, 0, 0, "Didn't expect to be here ... DeletePhysicalLabelDef" )
   GET VIEW mSubreg NAMED "mSubreg"
   lID = mSubreg.SubregProduct.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow )
   IF nRC = 0
      InitListSubregProducts( ViewToWindow )
      GET VIEW mSubreg NAMED "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct
          WHERE mSubreg.SubregProduct.ID = lID

      ACTIVATE mSPLDef WHERE mSPLDef.SubregProduct.ID = lID
      NAME VIEW mSPLDef "mSPLDef"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewPhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewPhysicalLabelDef( VIEW ViewToWindow )

   // nothing to be done as far as I can tell at this point
 IssueError( ViewToWindow, 0, 0, "Didn't expect to be here ... NewPhysicalLabelDef" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditPhysicalLabelVersionData
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditPhysicalLabelVersionData( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   INTEGER lContentID
   INTEGER lID
   SHORT   nRC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditPhysicalLabelVersionData: " )

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF mSPLDef != 0
      lID = mSPLDef.SubregLabelContent.ID
      DropObjectInstance( mSPLDef )
   END

   GET VIEW mSubreg NAMED "mSubreg"

   IF mSubreg.SubregLabelContent DOES NOT EXIST  // should never happen!!!
      MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                   "The Product Label Content does not exist.  Please initialize it.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   lID = mSubreg.SubregProduct.ID
   lContentID = mSubreg.SubregLabelContent.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow )
   IF nRC = 0

      InitListSubregProducts( ViewToWindow )
      GET VIEW mSubreg NAMED "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct
          WHERE mSubreg.SubregProduct.ID = lID

      GET VIEW mSubProd NAMED "mSubProd"
      IF mSubProd != 0
         DropObjectInstance( mSubProd )
      END

      ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
      NAME VIEW mSubProd "mSubProd"
      SET CURSOR FIRST mSubProd.SubregLabelContent
          WHERE mSubProd.SubregLabelContent.ID = lContentID

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPhysicalLabelDefForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPhysicalLabelDefForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  BASED ON LOD  mSPLDef

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF mSPLDef != 0
      DropObjectInstance( mSPLDef )
   END

   CreateSPLD( ViewToWindow )
   COMMIT mSPLDef

   GET VIEW mSPLDef NAMED "mSPLDef"
   mSPLDef.SubregPhysicalLabelDef.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
   wWebXfer.Root.CurrentContentType = ""

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPhysicalLabelDefForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPhysicalLabelDefForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   VIEW mSubLC   BASED ON LOD  mSubLC

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC = 0
      MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                   "The Product Label Content view does not exist.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   IF mSubLC.SubregProduct DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                   "The Subregistrant Product Label Content view does not exist.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF mSPLDef != 0
      AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AcceptNewPhysicalLabelDef" )
      DropObjectInstance( mSPLDef )
   END

   IF mSubLC.SubregPhysicalLabelDef DOES NOT EXIST

      CreateSPLD( ViewToWindow )

      COMMIT mSPLDef
      COMMIT mSubLC

   ELSE

      ACTIVATE mSPLDef WHERE mSPLDef.SubregPhysicalLabelDef.ID = mSubLC.SubregPhysicalLabelDef.ID
      NAME VIEW mSPLDef "mSPLDef"

   END

   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SubregPhysicalLabelDef", "InitPhysicalLabelDefForUpdate: " )
   IF mSPLDef.SubregPhysicalLabelDef.CreatedDateTime = ""
      mSPLDef.SubregPhysicalLabelDef.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
   END

   wWebXfer.Root.AttemptProductName = mSPLDef.SubregPhysicalLabelDef.Name
   wWebXfer.Root.CurrentContentType = ""

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewPhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewPhysicalLabelDef( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mSubreg  REGISTERED AS mSubreg
   STRING (  50  ) szProductName
   INTEGER lProductNameLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Content Name: ", szProductName )
   TraceLineI( "Product Content Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "New Physical Label Definition",
                   "The Physical Label Definition Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSPLDef, "SubregPhysicalLabelDef", "Name", lControl,
                          szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Physical Label Definition",
                      "The Physical Label Definition Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END

   mSPLDef.SubregPhysicalLabelDef.Name = szProductName

   IncludeSubobjectFromSubobject( mSubreg, "SubregLabelContent",
                                  mSPLDef, "SubregLabelContent", zPOS_BEFORE )
   COMMIT mSubreg
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AcceptNewPhysicalLabelDef" )

   DropObjectInstance( mSubreg )
   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = mSPLDef.PrimaryRegistrant.ID
   NAME VIEW mSubreg "mSubreg"
   SET CURSOR FIRST mSubreg.SubregLabelContent
       WHERE mSubreg.SubregLabelContent.ID = mSPLDef.SubregLabelContent.ID
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdatePhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdatePhysicalLabelDef( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mSubreg  BASED ON LOD  mSubreg
   STRING (  50  ) szProductName
   INTEGER lProductNameLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Content Version: ", szProductName )
   TraceLineI( "Product Version Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                   "The Physical Label Definition Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF mSPLDef.SubregPhysicalLabelDef.Name != szProductName
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSPLDef, "SubregPhysicalLabelDef", "Name", lControl,
                             szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                         "The Physical Label Definition Name must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END

         mSPLDef.SubregPhysicalLabelDef.Name = szProductName
      END

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptUpdatePhysicalLabelDef: " )
// AcceptSubobject( mSPLDef, "SubregLabelContent" )
   COMMIT mSPLDef
   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = mSPLDef.PrimaryRegistrant.ID
   NAME VIEW mSubreg "mSubreg"
   SET CURSOR FIRST mSubreg.SubregLabelContent
       WHERE mSubreg.SubregLabelContent.ID = mSPLDef.SubregLabelContent.ID
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewPhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewPhysicalLabelDef( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg
   VIEW mSPLDef REGISTERED AS mSPLDef

   CancelSubobject( mSubreg, "SubregLabelContent" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewPhysicalLabelDef: " )
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdatePhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdatePhysicalLabelDef( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg
   VIEW mSPLDef REGISTERED AS mSPLDef

   CancelSubobject( mSubreg, "SubregLabelContent" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewPhysicalLabelDef: " )
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DesignSubregLabel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DesignSubregLabel( VIEW ViewToWindow )

   // Don't need to do anything except have this operation to cause
   // positioning code to be done in the JSP.

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSPLD_Up
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSPLD_Up( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempProd.SubregPhysicalLabelDef
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregPhysicalLabelDef",
                  mSubProd, "SubregPhysicalLabelDef",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempProd )

   // We now accept the SPLD to maintain order!
   COMMIT mSubProd

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSPLD_Down
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSPLD_Down( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempProd.SubregPhysicalLabelDef
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregPhysicalLabelDef",
                  mSubProd, "SubregPhysicalLabelDef",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempProd )

   // We now accept the SPLD to maintain order!
   COMMIT mSubProd

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSubregProductUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSubregProductUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mTempReg BASED ON LOD  mSubreg
   INTEGER lMove

   CreateViewFromView( mTempReg, mSubreg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempReg.SubregProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "SubregProduct",
                  mSubreg, "SubregProduct",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempReg )

   // We now accept the Master Label to maintain order!
   COMMIT mSubreg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSubregProductDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSubregProductDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mTempReg BASED ON LOD  mSubreg
   INTEGER lMove

   CreateViewFromView( mTempReg, mSubreg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempReg.SubregProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "SubregProduct",
                  mSubreg, "SubregProduct",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempReg )

   COMMIT mSubreg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSubregProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd

   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mSubreg.SubregProduct.ID
   NAME VIEW mSubProd "mSubProd"
// TraceLineS( "", "" )
// TraceLineS( "InitSubregProductForDelete", "" )
// DisplayObjectInstance( mSubreg, "", "" )

   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteSubregProduct( VIEW ViewToWindow )

   VIEW mSubProd REGISTERED AS mSubProd

   DropObjectInstance( mSubProd )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   INTEGER lID
   SHORT   nRC

   GET VIEW mSubreg NAMED "mSubreg"
   lID = mSubreg.Subregistrant.ID

   DELETE ENTITY mSubProd.SubregProduct
   COMMIT mSubProd

   DropObjectInstance( mSubProd )
   DropObjectInstance( mSubreg )

   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lID
   NAME VIEW mSubreg "mSubreg"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupDirectionsWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupDirectionsWorkEntities( VIEW mSPLDef )

   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempPL NAMED "mTempPL"
   IF mTempPL != 0
      DropView( mTempPL )
   END
   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"

   // We need to traverse SPLD_DirectionsOrdering entities and delete the work sub-entities.
   FOR EACH mTempPL.SPLD_DirectionsOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempPL.SPLD_DirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mTempPL.SPLD_DirectionsUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempPL, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempPL, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsSurface" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsAppType" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempPL )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadDirectionsUsageList
//
// We traverse the Ordering entities since the Usage entities are one-to-one
// under the Ordering entities.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadDirectionsUsageList( VIEW ViewToWindow,
                         VIEW mSPLDefIn BASED ON LOD mSPLDef )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   VIEW mPosPL   BASED ON LOD  mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupDirectionsWorkEntities( mSPLDefIn )

   CreateViewFromView( mPosPL, mSPLDefIn )
   NAME VIEW mPosPL "mPosPL"
   CreateViewFromView( mTempPL, mSPLDefIn )
   NAME VIEW mTempPL "mTempPL"
   CreateViewFromView( mSPLDef, mSPLDefIn )
   NAME VIEW mSPLDef "mSPLDef1"

   // Get position on included SPLD_DirectionsUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosPL, "SPLD_DirectionsOrdering", "" )

   // Mark included SPLD_DirectionsUsage entities as "selected" and include SPLD_OriginalDirectionsUsage not
   // already included into the SPLD_DirectionsUsage entity and mark as "not selected".
   FOR EACH mSPLDef.SPLD_OriginalDirectionsOrdering

      lID = mSPLDef.SPLD_OriginalDirectionsUsage.ID
      SET CURSOR FIRST mTempPL.SPLD_DirectionsUsage WITHIN mTempPL.SPLD_DirectionsForUseSection
                                                    WHERE mTempPL.SPLD_DirectionsUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosPL.SPLD_DirectionsUsage WITHIN mPosPL.SPLD_DirectionsForUseSection
                                                      WHERE mPosPL.SPLD_DirectionsUsage.ID = lID
         mPosPL.SPLD_DirectionsUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosPL, "SPLD_DirectionsOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosPL, "SPLD_DirectionsUsage",
                                        mSPLDef, "SPLD_OriginalDirectionsUsage", zPOS_NEXT )
         mPosPL.SPLD_DirectionsUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mPosPL.SPLD_OriginalDirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mPosPL.SPLD_OriginalDirectionsUsage.ClaimsClassification
         CreateEntity( mPosPL, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosPL, "DirectionsSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosPL, "DirectionsAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosPL, "DirectionsAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid DirectionsUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosPL )
   DropView( mTempPL )
   DropView( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditDirectionsUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditDirectionsUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseSect: " )

   IF mSPLDef.SPLD_DirectionsForUseSection EXISTS
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_DirectionsForUseSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseSection", "InitDirectionsUseSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSPLDef, "SPLD_DirectionsForUseSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_DirectionsForUseSection", "InitDirectionsUseSect2: " )
      mSPLDef.SPLD_DirectionsForUseSection.BoldItalic = "R"
   END

   LoadDirectionsUsageList( ViewToWindow, mSPLDef )
   wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_DirectionsForUseSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_DirectionsForUseSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_DirectionsForUseSection", "InitDirectionsUseSectForInsert: " )
   mSPLDef.SPLD_DirectionsForUseSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_DirectionsForUseSection.Title

   // We need to update the existing SPLD_DirectionsForUseSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_DirectionsForUseSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseSection", "InitDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   STRING (  50  ) szSectionTitle
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   INTEGER lSectionTitleLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section title is not blank.
   szSectionTitle = mSPLDef.SPLD_GeneralSection.Title
   lSectionTitleLth = zGetStringLen( szSectionTitle )
   TraceLineS( "Product Section Title: ", szSectionTitle )
   TraceLineI( "Product Section Title Length: ", lSectionTitleLth )
   IF lSectionTitleLth < 1

      MessageSend( ViewToWindow, "", "Directions for Use Section",
                   "The Directions for Use Section Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   GET VIEW mTempPL NAMED "mTempPL"
   IF mTempPL != 0
      DropView( mTempPL )
   END
   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"

   // We need to exclude SPLD_DirectionsUsage entities that are not selected, but
   // the new structure, we need to traverse SPLD_DirectionsOrdering entities.
   FOR EACH mTempPL.SPLD_DirectionsOrdering

      szUsageType = mTempPL.SPLD_DirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mTempPL.SPLD_DirectionsUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempPL, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempPL, szClaimsClassification, zREPOS_NONE )
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsClaim.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsSurface" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsSurface
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsSurface.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsAppType" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsAppType
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsAppType.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempPL, "DirectionsAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempPL.DirectionsAreasOfUse
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsAreasOfUse.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
         DisplayEntityInstance( mTempPL, "DirectionsAreasOfUse" )
         MessageSend( ViewToWindow, "", "Unexpected Type",
                      szUsageType,
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropView( mTempPL )
         RETURN 2
      END
      END
      END
      END

      IF mTempPL.SPLD_DirectionsUsage.wkSelected != "Y"
      // ExcludeEntity( mTempPL, "SPLD_DirectionsUsage", zREPOS_NONE )
         DeleteEntity( mTempPL, "SPLD_DirectionsOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempPL )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseSect: " )
   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NextDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextDirectionsUseSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_NEXT + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSPLDef, "SPLD_DirectionsForUseSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Next DirectionsUse Section",
                   "There is not a next marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSPLDef.SPLD_DirectionsForUseSection.ID
      nRC = AcceptDirectionsUseSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSPLDef.SPLD_DirectionsForUseSection
          WHERE mSPLDef.SPLD_DirectionsForUseSection.ID = lID
      SET CURSOR NEXT mSPLDef.SPLD_DirectionsForUseSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseSection", "NextDirectionsUseSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Next DirectionsUse Section",
   //              "Error saving Directions for Use section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: PreviousDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousDirectionsUseSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_PREV + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSPLDef, "SPLD_DirectionsForUseSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Previous DirectionsUse Section",
                   "There is not a previous Directions for Use section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSPLDef.SPLD_DirectionsForUseSection.ID
      nRC = AcceptDirectionsUseSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSPLDef.SPLD_DirectionsForUseSection
          WHERE mSPLDef.SPLD_DirectionsForUseSection.ID = lID
      SET CURSOR PREVIOUS mSPLDef.SPLD_DirectionsForUseSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseSection", "PreviousDirectionsUseSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Previous DirectionsUse Section",
   //              "Error saving Directions for Use section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0
      InitDirectionsUseSectForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New DirectionsUse Section",
                   "Error saving DirectionsUse section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveShowNextDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveShowNextDirectionsUseSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = NextDirectionsUseSect( ViewToWindow )
   RETURN nRC

// VIEW mSPLDef  REGISTERED AS mSPLDef
// SHORT nRC
//
// nRC = AcceptDirectionsUseSect( ViewToWindow )
// IF nRC = 0
//    SET CURSOR NEXT mSPLDef.SPLD_DirectionsForUseStatement
//    IF RESULT = 0
//       InitDirectionsUseSectForInsert( ViewToWindow )
//    ELSE
//       MessageSend( ViewToWindow, "", "Save And Show Next DirectionsForUse Section",
//                    "There is no next Directions For Use section.",
//                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//       SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//       RETURN 2
//    END
// ELSE
//    MessageSend( ViewToWindow, "", "Save And Show Next DirectionsForUse Section",
//                 "Error saving DirectionsUse section.",
//                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//    RETURN 2
// END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveShowPrevDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveShowPrevDirectionsUseSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = NextDirectionsUseSect( ViewToWindow )
   RETURN nRC

// VIEW mSPLDef  REGISTERED AS mSPLDef
// SHORT nRC
//
// nRC = AcceptDirectionsUseSect( ViewToWindow )
// IF nRC = 0
//    SET CURSOR PREVIOUS mSPLDef.SPLD_DirectionsForUseStatement
//    IF RESULT = 0
//       InitDirectionsUseSectForInsert( ViewToWindow )
//    ELSE
//       MessageSend( ViewToWindow, "", "Save And Show Previous DirectionsForUse Section",
//                    "There is no previous DirectionsForUse section.",
//                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//       SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//       RETURN 2
//    END
// ELSE
//    MessageSend( ViewToWindow, "", "Save And Show Previous DirectionsForUse Section",
//                 "Error saving DirectionsForUse section.",
//                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//    RETURN 2
// END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionUseSect: " )
   DELETE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_DirectionsForUseSection",
                  mSPLDef, "SPLD_DirectionsForUseSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_DirectionsForUseSection",
                  mSPLDef, "SPLD_DirectionsForUseSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectDirectionsUseStmtForUpdate: " )

   // We need to update the existing SPLD_DirectionsForUseStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_DirectionsForUseStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseStatement", "SelectDirectionsUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseStmtForInsert: " )

   // We need to create a new SPLD_DirectionsForUseStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_DirectionsForUseStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_DirectionsForUseStatement", "InitDirectionsUseStmtForInsert: " )
   mSPLDef.SPLD_DirectionsForUseStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseStmtForUpdate: " )

   // We need to update an SPLD_DirectionsForUseStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_DirectionsForUseStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_DirectionsForUseStatement", "InitDirectionsUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseStmt( ViewToWindow )
   IF nRC = 0
      InitDirectionsUseStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Directions for Use Statement",
                   "Error saving Directions for Use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionsUseStmt: " )
   DELETE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_DirectionsForUseStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_DirectionsForUseStatement",
                  mSPLDef, "SPLD_DirectionsForUseStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_DirectionsForUseStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_DirectionsForUseStatement",
                  mSPLDef, "SPLD_DirectionsForUseStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditPrecautionarySect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditPrecautionarySect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionarySect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_PrecautionarySection
   LOOP WHILE RESULT = 0
      ExcludeEntity( mSPLDef, "SPLDI_PrecautionarySection", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_PrecautionarySection
   END

   FOR EACH mSPLDef.SPLD_GeneralSection
      IF mSPLDef.SPLD_GeneralSection.SectionType = "P" // Precautionary
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_PrecautionarySection",
                                        mSPLDef, "SPLD_GeneralSection", zPOS_LAST )

         // We need to create a temporal Precautionary Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_PrecautionarySection", "InitPrecautionarySect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_PrecautionarySection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralSection", "InitPrecautionarySectForInsert: " )
   mSPLDef.SPLD_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_GeneralSection.Title

   // We need to update the existing SPLD_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralSection", "InitPrecautionarySectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionarySect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionarySect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   STRING (  50  ) szSectionTitle
   INTEGER lSectionTitleLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section title is not blank.
   szSectionTitle = mSPLDef.SPLD_GeneralSection.Title
   lSectionTitleLth = zGetStringLen( szSectionTitle )
   TraceLineS( "Product Section Title: ", szSectionTitle )
   TraceLineI( "Product Section Title Length: ", lSectionTitleLth )
   IF lSectionTitleLth < 1

      MessageSend( ViewToWindow, "", "Accept Precautionary Section",
                   "The Precautionary Section Title cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionarySect: " )

   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_PrecautionarySection entity.  We have
   // position on the SPLD_PrecautionaryStatement, but need to get position on
   // the SPLD_GeneralStatement that corresponds to the SPLD_PrecautionaryStatement.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_PrecautionaryStatement", "" )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "SelectPrecautionaryStmtForUpdate: " )
   COMMIT mSPLDef

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "SelectPrecautionaryStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForInsert: " )

   // We need to create a new SPLD_GeneralStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralStatement", "InitPrecautionaryStmtForInsert: " )
   mSPLDef.SPLD_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = "P" // "Precautionary"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update Precautionary Statement",
                   "The Precautionary Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForUpdate: " )

   // We need to update an SPLD_GeneralStatement entity.
   TraceLineS( "InitPrecautionaryStmtForUpdate: ", "SPLD_GeneralStatement" )
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "InitPrecautionaryStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionaryStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionaryStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForDelete( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_PrecautionaryStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeletePrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeletePrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeletePrecautionaryStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeletePrecautionaryStmt: " )
   DELETE ENTITY mSPLDef.SPLD_GeneralStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_PrecautionaryStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_PrecautionaryStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_PrecautionaryStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_PrecautionaryStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_PrecautionaryStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_PrecautionaryStatement",
                  mSPLDef, "SPLD_PrecautionaryStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_PrecautionaryStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_PrecautionaryStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_PrecautionaryStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_PrecautionaryStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_PrecautionaryStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_PrecautionaryStatement",
                  mSPLDef, "SPLD_PrecautionaryStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardContent( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardContent: " )

   SET CURSOR FIRST mSPLDef.SPLDI_HazardSection
   LOOP WHILE RESULT = 0
      ExcludeEntity( mSPLDef, "SPLDI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_HazardSection
   END

   FOR EACH mSPLDef.SPLD_GeneralSection
      IF mSPLDef.SPLD_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_HazardSection",
                                        mSPLDef, "SPLD_GeneralSection", zPOS_LAST )

         // We need to create a temporal Environmental/Physical Hazard Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_HazardSection", "InitHazardContent1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardContent( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardContent: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardContent( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSect( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardSectForUpdate( VIEW ViewToWindow )

   // just here for positioning ...
   VIEW mSPLDef  REGISTERED AS mSPLDef

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralSection", mSPLDef, "SPLDI_HazardSection", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_GeneralSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralSection", "InitHazardSectForInsert: " )
   mSPLDef.SPLD_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_GeneralSection.Title

   // We need to update the existing SPLD_GeneralSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralSection", "InitHazardSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardSect: " )

   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_HazardSection entity. We have
   // position on the SPLD_HazardStatement, but need to get position on
   // the SPLD_GeneralStatement that corresponds to the SPLD_HazardStatement.
// SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement",  // fix this to set cursor properly before deployment DKS???
//                                  mSPLDef, "SPLD_HazardStatement", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardStmtForUpdate: " )

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "SelectHazardStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForInsert: " )

   // We need to create a new SPLD_GeneralStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralStatement", "InitHazardStmtForInsert: " )
   mSPLDef.SPLD_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = "E" // "Environmental/Physical Hazard"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update Environmental/Physical Hazard Statement",
                   "The Environmental/Physical Hazard Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForUpdate: " )

   // We need to create a new SPLD_GeneralStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "InitHazardStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForDelete( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_HazardStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteEnvironStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteEnvironStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteEnvironStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteEnvironStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteEnvironStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteEnvironStmt: " )
   DELETE ENTITY mSPLDef.SPLD_GeneralStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_HumanHazardSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_HumanHazardSection",
                  mSPLDef, "SPLD_HumanHazardSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_HumanHazardSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_HumanHazardSection",
                  mSPLDef, "SPLD_HumanHazardSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_HazardStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_HazardStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_HazardStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_HazardStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_HazardStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_HazardStatement",
                  mSPLDef, "SPLD_HazardStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_HazardStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_HazardStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_HazardStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_HazardStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_HazardStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_HazardStatement",
                  mSPLDef, "SPLD_HazardStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditFirstAidSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditFirstAidSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidSect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_FirstAidSection
   LOOP WHILE RESULT = 0
      ExcludeEntity( mSPLDef, "SPLDI_FirstAidSection", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_FirstAidSection
   END

   FOR EACH mSPLDef.SPLD_GeneralSection
      IF mSPLDef.SPLD_GeneralSection.SectionType = "F" // FirstAid
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_FirstAidSection",
                                        mSPLDef, "SPLD_GeneralSection", zPOS_LAST )

         // We need to create a temporal FirstAid Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_FirstAidSection", "InitFirstAidSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_FirstAidSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralSection", "InitFirstAidSectForInsert: " )
   mSPLDef.SPLD_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_GeneralSection.Title

   // We need to update the existing SPLD_FirstAidSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralSection", "InitFirstAidSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidSect: " )

   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_FirstAidSection entity.  We have
   // position on the SPLD_FirstAidStatement, but need to get position on
   // the SPLD_GeneralStatement that corresponds to the SPLD_FirstAidStatement.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_FirstAidStatement", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectFirstAidStmtForUpdate: " )

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "SelectFirstAidStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidStmtForInsert: " )

   // We need to create a new SPLD_GeneralStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_GeneralStatement", "InitFirstAidStmtForInsert: " )
   mSPLDef.SPLD_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   SET CURSOR FIRST mSPLDef.SPLD_GeneralSection WHERE mSPLDef.SPLD_GeneralSection.SectionType = "F" // "FirstAid"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update FirstAid Statement",
                   "The FirstAid Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidStmtForUpdate: " )

   // We need to create a new SPLD_GeneralStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_GeneralStatement", "InitFirstAidStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"
// DisplayEntityInstance( wWebXfer, "Root" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForDelete( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_FirstAidStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteFirstAidStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteFirstAidStmt: " )
   DELETE ENTITY mSPLDef.SPLD_GeneralStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_FirstAidStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_FirstAidStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_FirstAidStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_FirstAidStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_FirstAidStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_FirstAidStatement",
                  mSPLDef, "SPLD_FirstAidStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_FirstAidStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_GeneralStatement", mSPLDef, "SPLD_FirstAidStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_GeneralStatement", mTempPL, "SPLD_FirstAidStatement", "" )

// SetCursorFirstEntityByAttr( mSPLDef, "SPLD_GeneralStatement", "ID",
//                             mSPLDef, "SPLD_FirstAidStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempPL, "SPLD_GeneralStatement", "ID",
//                             mTempPL, "SPLD_FirstAidStatement", "ID", "" )

   MoveSubobject( mTempPL, "SPLD_FirstAidStatement",
                  mSPLDef, "SPLD_FirstAidStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLD_GeneralStatement",
                  mSPLDef, "SPLD_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHumanHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHumanHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "H"  // "HumanHazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHumanHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHumanHazardSect: " )

   IF mSPLDef.SPLD_HumanHazardSection EXISTS
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_HumanHazardSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_HumanHazardSection", "InitHumanHazardSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSPLDef, "SPLD_HumanHazardSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_HumanHazardSection", "InitHumanHazardSect2: " )
      mSPLDef.SPLD_HumanHazardSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "H"  // Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHumanHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHumanHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHumanHazardSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHumanHazardSect: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditIngredientsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditIngredientsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsSect: " )

   IF mSPLDef.SPLD_IngredientsSection EXISTS
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_IngredientsSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_IngredientsSection", "InitIngredientsSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSPLDef, "SPLD_IngredientsSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_IngredientsSection", "InitIngredientsSect2: " )
      mSPLDef.SPLD_IngredientsSection.ActiveBoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_IngredientsSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_IngredientsSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_IngredientsSection", "InitIngredientsSectForInsert: " )
   mSPLDef.SPLD_IngredientsSection.ActiveBoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_IngredientsSection.ActiveTitle

   // We need to update the existing SPLD_IngredientsSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_IngredientsSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_IngredientsSection", "InitIngredientsSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsSect: " )

   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectIngredientsStmtForUpdate: " )

   // We need to update the existing SPLD_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_IngredientsStatement", "SelectIngredientsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "InitIngredientsStmtForInsert: " )

   // We need to create a new SPLD_IngredientsStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_IngredientsStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_IngredientsStatement", "InitIngredientsStmtForInsert: " )
   mSPLDef.SPLD_IngredientsStatement.Active = "A"
   mSPLDef.SPLD_IngredientsStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsStmtForUpdate: " )

   // We need to update an SPLD_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_IngredientsStatement", "InitIngredientsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewIngredient
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewIngredient( VIEW ViewToWindow )

   VIEW  mSPLDef REGISTERED AS mSPLDef
   STRING ( 256 ) szPrompt
   SHORT nRC

   nRC = AcceptIngredientsStmt( ViewToWindow )
   IF nRC = 0
      szPrompt = mSPLDef.SPLD_IngredientsStatement.Prompt
      InitIngredientsStmtForInsert( ViewToWindow )
      mSPLDef.SPLD_IngredientsStatement.Prompt = szPrompt
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Ingredients Statement",
                   "Error saving ingredient statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteIngredientStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteIngredientStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteIngredientStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteIngredientStmt: " )
   DELETE ENTITY mSPLDef.SPLD_IngredientsStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_IngredientsStatement",
                  mSPLDef, "SPLD_IngredientsStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_IngredientsStatement",
                  mSPLDef, "SPLD_IngredientsStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupMarketingWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupMarketingWorkEntities( VIEW mSPLDef )

   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempPL NAMED "mTempPL"
   IF mTempPL != 0
      DropView( mTempPL )
   END
   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"

   // We need to traverse SPLD_MarketingOrdering entities and delete the work sub-entities.
   FOR EACH mTempPL.SPLD_MarketingOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempPL.SPLD_MarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mTempPL.SPLD_MarketingUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempPL, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempPL, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingSurface" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingAppType" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempPL )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadMarketingUsageList
//
// We traverse the Ordering entities since the Usage entities are one-to-one
// under the Ordering entities.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadMarketingUsageList( VIEW ViewToWindow,
                        VIEW mSPLDefIn BASED ON LOD mSPLDef )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   VIEW mPosPL   BASED ON LOD  mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupMarketingWorkEntities( mSPLDefIn )

   CreateViewFromView( mPosPL, mSPLDefIn )
   NAME VIEW mPosPL "mPosPL"
   CreateViewFromView( mTempPL, mSPLDefIn )
   NAME VIEW mTempPL "mTempPL"
   CreateViewFromView( mSPLDef, mSPLDefIn )
   NAME VIEW mSPLDef "mSPLDef1"

   // Get position on included SPLD_MarketingUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosPL, "SPLD_MarketingOrdering", "" )

   // Mark included SPLD_MarketingUsage entities as "selected" and include SPLD_OriginalMarketingUsage not
   // already included into the SPLD_MarketingUsage entity and mark as "not selected".
   FOR EACH mSPLDef.SPLD_OriginalMarketingOrdering

      lID = mSPLDef.SPLD_OriginalMarketingUsage.ID
      SET CURSOR FIRST mTempPL.SPLD_MarketingUsage WITHIN mTempPL.SPLD_MarketingSection
                                                   WHERE mTempPL.SPLD_MarketingUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosPL.SPLD_MarketingUsage WITHIN mPosPL.SPLD_MarketingSection
                                                     WHERE mPosPL.SPLD_MarketingUsage.ID = lID
         mPosPL.SPLD_MarketingUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosPL, "SPLD_MarketingOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosPL, "SPLD_MarketingUsage",
                                        mSPLDef, "SPLD_OriginalMarketingUsage", zPOS_NEXT )
         mPosPL.SPLD_MarketingUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mPosPL.SPLD_OriginalMarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mPosPL.SPLD_OriginalMarketingUsage.ClaimsClassification
         CreateEntity( mPosPL, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosPL, "MarketingSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosPL, "MarketingAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosPL, "MarketingAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid MarketingUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosPL )
   DropView( mTempPL )
   DropView( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditMarketingSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditMarketingSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "M"  // "Marketing"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingSect: " )

   IF mSPLDef.SPLD_MarketingSection EXISTS
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_MarketingSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingSection", "InitMarketingSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSPLDef, "SPLD_MarketingSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_MarketingSection", "InitMarketingSect2: " )
      mSPLDef.SPLD_MarketingSection.BoldItalic = "R"
   END

   LoadMarketingUsageList( ViewToWindow, mSPLDef )
   wWebXfer.Root.CurrentContentType = "M"  // Marketing

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectMarketingSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_MarketingSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_MarketingSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_MarketingSection", "InitMarketingSectForInsert: " )
   mSPLDef.SPLD_MarketingSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_MarketingSection.Title

   // We need to update the existing SPLD_MarketingSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_MarketingSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingSection", "InitMarketingSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   STRING (  50  ) szSectionTitle
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   INTEGER lSectionTitleLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section title is not blank.
   szSectionTitle = mSPLDef.SPLD_GeneralSection.Title
   lSectionTitleLth = zGetStringLen( szSectionTitle )
   TraceLineS( "Product Section Title: ", szSectionTitle )
   TraceLineI( "Product Section Title Length: ", lSectionTitleLth )
   IF lSectionTitleLth < 1

      MessageSend( ViewToWindow, "", "Marketing Section",
                   "The Marketing Section Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   GET VIEW mTempPL NAMED "mTempPL"
   IF mTempPL != 0
      DropView( mTempPL )
   END
   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"

   // We need to exclude SPLD_MarketingUsage entities that are not selected, but
   // the new structure, we need to traverse SPLD_MarketingOrdering entities.
   FOR EACH mTempPL.SPLD_MarketingOrdering

      szUsageType = mTempPL.SPLD_MarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mTempPL.SPLD_MarketingUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempPL, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempPL, szClaimsClassification, zREPOS_NONE )
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingClaim.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingSurface" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingSurface
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingSurface.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingAppType" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingAppType
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingAppType.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempPL, "MarketingAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempPL.MarketingAreasOfUse
      /*
         ELSE
            DisplayEntityInstance( mTempPL, "SPLD_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingAreasOfUse.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempPL )
            RETURN 2
      */
         END
      ELSE
         DisplayEntityInstance( mTempPL, "MarketingAreasOfUse" )
         MessageSend( ViewToWindow, "", "Unexpected Type",
                      szUsageType,
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropView( mTempPL )
         RETURN 2
      END
      END
      END
      END

      IF mTempPL.SPLD_MarketingUsage.wkSelected != "Y"
      // ExcludeEntity( mTempPL, "SPLD_MarketingUsage", zREPOS_NONE )
         DeleteEntity( mTempPL, "SPLD_MarketingOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempPL )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptMarketingSect: " )
   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0
      InitMarketingSectForInsert( ViewToWindow )
   ELSE
   // MessageSend( ViewToWindow, "", "Save And Add New Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NextMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextMarketingSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_NEXT + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSPLDef, "SPLD_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Next Marketing Section",
                   "There is not a next Marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSPLDef.SPLD_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSPLDef.SPLD_MarketingSection
          WHERE mSPLDef.SPLD_MarketingSection.ID = lID
      SET CURSOR NEXT mSPLDef.SPLD_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingSection", "NextMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Next Marketing Section",
   //              "Error saving Marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: PreviousMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousMarketingSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_PREV + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSPLDef, "SPLD_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Previous Marketing Section",
                   "There is not a previous Marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSPLDef.SPLD_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSPLDef.SPLD_MarketingSection
          WHERE mSPLDef.SPLD_MarketingSection.ID = lID
      SET CURSOR PREVIOUS mSPLDef.SPLD_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingSection", "PreviousMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Previous Marketing Section",
   //              "Error saving Marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveShowNextMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveShowNextMarketingSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = NextMarketingSect( ViewToWindow )
   RETURN nRC

// VIEW mSPLDef  REGISTERED AS mSPLDef
// SHORT nRC
//
// nRC = AcceptMarketingSect( ViewToWindow )
// IF nRC = 0
//    SET CURSOR NEXT mSPLDef.SPLD_MarketingStatement
//    IF RESULT = 0
//       InitMarketingSectForInsert( ViewToWindow )
//    ELSE
//       MessageSend( ViewToWindow, "", "Save And Show Next Marketing Section",
//                    "There is no next Marketing section.",
//                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//       SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//       RETURN 2
//    END
// ELSE
//    MessageSend( ViewToWindow, "", "Save And Show Next Marketing Section",
//                 "Error saving Marketing section.",
//                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//    RETURN 2
// END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveShowPrevMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveShowPrevMarketingSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = PreviousMarketingSect( ViewToWindow )
   RETURN nRC

// VIEW mSPLDef  REGISTERED AS mSPLDef
// SHORT nRC
//
// nRC = AcceptMarketingSect( ViewToWindow )
// IF nRC = 0
//    SET CURSOR PREVIOUS mSPLDef.SPLD_MarketingStatement
//    IF RESULT = 0
//       InitMarketingSectForInsert( ViewToWindow )
//    ELSE
//       MessageSend( ViewToWindow, "", "Save And Show Previous Marketing Section",
//                    "There is no previous Marketing section.",
//                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//       SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//       RETURN 2
//    END
// ELSE
//    MessageSend( ViewToWindow, "", "Save And Show Previous Marketing Section",
//                 "Error saving Marketing section.",
//                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//    RETURN 2
// END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingSect: " )
   DELETE ENTITY mSPLDef.SPLD_MarketingSection
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_MarketingSection",
                  mSPLDef, "SPLD_MarketingSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_MarketingSection",
                  mSPLDef, "SPLD_MarketingSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectMarketingStmtForUpdate: " )

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_MarketingStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingStatement", "SelectMarketingStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // Marketing

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingStmtForInsert: " )

   // We need to create a new SPLD_MarketingStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_MarketingStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_MarketingStatement", "InitMarketingStmtForInsert: " )
   mSPLDef.SPLD_MarketingStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingStmtForUpdate: " )

   // We need to update an SPLD_MarketingStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_MarketingStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_MarketingStatement", "InitMarketingStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptMarketingStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingStmt( ViewToWindow )
   IF nRC = 0
      InitMarketingStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Marketing Statement",
                   "Error saving marketing statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingStmt: " )
   DELETE ENTITY mSPLDef.SPLD_MarketingStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_MarketingStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_MarketingStatement",
                  mSPLDef, "SPLD_MarketingStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_MarketingStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_MarketingStatement",
                  mSPLDef, "SPLD_MarketingStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectStorDispSectForUpdate: " )

   // We need to update the existing SPLD_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_StorageDisposalSection", "SelectStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditStorDispSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditStorDispSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispSect: " )

   wWebXfer.Root.Units = "Gallons"
   IF mSPLDef.SPLD_StorageDisposalSection EXISTS
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_StorageDisposalSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_StorageDisposalSection", "InitStorDispSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSPLDef, "SPLD_StorageDisposalSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_StorageDisposalSection", "InitStorDispSect2: " )
      mSPLDef.SPLD_StorageDisposalSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new SPLD_StorageDisposalSection entity.
// CreateTemporalEntity( mSPLDef, "SPLD_StorageDisposalSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_StorageDisposalSection", "InitStorDispSectForInsert: " )
   mSPLDef.SPLD_StorageDisposalSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   wWebXfer.Root.AttemptSectionName = mSPLDef.SPLD_StorageDisposalSection.Title

   // We need to update the existing SPLD_StorageDisposalSection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_StorageDisposalSection", "InitStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispSect: " )

   IF szEntityName = "SPLD_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSPLDef.SPLD_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSPLDef,
                               "SPLD_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SPLDI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSPLDef, szEntityName,
                                     mSPLDef, "SPLD_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSPLDef
   wWebXfer.Root.CurrentContentType = "D"  // "StorageDisposal"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispSect( ViewToWindow )
   IF nRC = 0
      InitStorDispSectForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal Section",
                   "Error saving Storage and Disposal section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForDelete( VIEW ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispSect: " )
   DELETE ENTITY mSPLDef.SPLD_StorageDisposalSection
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_StorageDisposalSection",
                  mSPLDef, "SPLD_StorageDisposalSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_StorageDisposalSection",
                  mSPLDef, "SPLD_StorageDisposalSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectStorDispStmtForUpdate: " )

   // We need to update the existing SPLD_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_StorageDisposalStatement", "SelectStorDispStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForInsert: " )

   // We need to create a new SPLD_StorageDisposalStatement entity.
// CreateTemporalEntity( mSPLDef, "SPLD_StorageDisposalStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_StorageDisposalStatement", "InitStorDispStmtForInsert: " )
   mSPLDef.SPLD_StorageDisposalStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForUpdate: " )

   // We need to update an SPLD_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_StorageDisposalStatement", "InitStorDispStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispStmt( ViewToWindow )
   IF nRC = 0
      InitStorDispStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal statement",
                   "Error saving Storage and Disposal statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispStmt: " )
   DELETE ENTITY mSPLDef.SPLD_StorageDisposalStatement
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLD_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_StorageDisposalStatement",
                  mSPLDef, "SPLD_StorageDisposalStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLD_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempPL, "SPLD_StorageDisposalStatement",
                  mSPLDef, "SPLD_StorageDisposalStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAreasOfUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAreasOfUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseSect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSPLDef, "SPLDI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   END

   // We need to create SPLDI_UsageList (AreasOfUse) entities.
   FOR EACH mSPLDef.SPLD_Usage
      IF mSPLDef.SPLD_Usage.UsageType = "U" // "AreasOfUse"
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_UsageList",
                                        mSPLDef, "SPLD_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_UsageList", "InitAreasOfUseSect1: " )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseSect: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseStmtForInsert: " )

   // We need to create a new SPLD_Usage entity.
// CreateTemporalEntity( mSPLDef, "SPLD_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_Usage", "InitAreasOfUseStmtForInsert: " )
   mSPLDef.SPLD_Usage.UsageType = "U" // "AreasOfUse"
   mSPLDef.SPLD_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseStmtForUpdate: " )

   // We need to update the existing SPLD_Usage (AreasOfUse) entity. We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (AreasOfUse) entity that corresponds to the SPLDI_FirstAidSection entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )

   // We need to update an SPLD_Usage entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_Usage", "InitAreasOfUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewAreasOfUse
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewAreasOfUse( VIEW ViewToWindow )

   VIEW  mSPLDef REGISTERED AS mSPLDef
   SHORT nRC

   nRC = AcceptAreasOfUseStmt( ViewToWindow )
   IF nRC = 0
      InitAreasOfUseStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Area of Use Statement",
                   "Error saving area of use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAreasOfUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAreasOfUseStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAreasOfUseStmtForDelete: " )

   // We need to update the existing SPLD_Usage (AreasOfUse) entity. We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (AreasOfUse) entity that corresponds to the SPLDI_FirstAidSection entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )

   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteAreasOfUseStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteAreasOfUseStmt: " )
   DELETE ENTITY mSPLDef.SPLD_Usage
   COMMIT mSPLDef

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   NAME VIEW mTempPL "mTempPL"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportAreasOfUseStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportAreasOfUseStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportAreasOfUseStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAreasOfUseStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAreasOfUseStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.epamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.epamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSPLDef, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAppTypesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAppTypesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesSect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSPLDef, "SPLDI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   END

   // We need to create SPLDI_UsageList (ApplicationType) entities.
   FOR EACH mSPLDef.SPLD_Usage
      IF mSPLDef.SPLD_Usage.UsageType = "T" // "ApplicationType"
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_UsageList",
                                        mSPLDef, "SPLD_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_UsageList", "InitAppTypesSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "T"  // "ApplicationType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesSect: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesStmtForInsert: " )

   // We need to create a new SPLD_Usage entity.
// CreateTemporalEntity( mSPLDef, "SPLD_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_Usage", "InitAppTypesStmtForInsert: " )
   mSPLDef.SPLD_Usage.UsageType = "T" // "ApplicationType"
   mSPLDef.SPLD_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "T"  // "ApplicationType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesStmtForUpdate: " )

   // We need to update the existing SPLD_Usage (AppTypes) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (AppTypes) entity that corresponds to the SPLDI_FirstAidSection entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )

   // We need to update an SPLD_Usage entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_Usage", "InitAppTypesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "T"  // "ApplicationType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewApplicationType
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewApplicationType( VIEW ViewToWindow )

   VIEW  mSPLDef REGISTERED AS mSPLDef
   SHORT nRC

   nRC = AcceptAppTypesStmt( ViewToWindow )
   IF nRC = 0
      InitAppTypesStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Application Type Statement",
                   "Error saving area of use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAppTypesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAppTypesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_Usage (AppTypes) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (AppTypes) entity that corresponds to the SPLDI_FirstAidSection entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAppTypesStmtForDelete: " )

   wWebXfer.Root.CurrentContentType = "T"  // "ApplicationType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteAppTypesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteAppTypesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteAppTypesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteAppTypesStmt: " )
   DELETE ENTITY mSPLDef.SPLD_Usage
   COMMIT mSPLDef

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "T"  // "ApplicationType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportAppTypesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportAppTypesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportAppTypesStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAppTypesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAppTypesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.epamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Application Types Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.epamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Application Types Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSPLDef, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Application Types Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditClaimsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditClaimsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "C"  // "Claims"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsSect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSPLDef, "SPLDI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   END

   // We need to create SPLDI_UsageList entities.
   FOR EACH mSPLDef.SPLD_Usage
      IF mSPLDef.SPLD_Usage.UsageType = "C" // "Claim"
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_UsageList",
                                        mSPLDef, "SPLD_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_UsageList", "InitClaimsSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsSect: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForUpdate( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsStmtForInsert: " )

   // We need to create a new SPLD_Usage entity.
// CreateTemporalEntity( mSPLDef, "SPLD_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_Usage", "InitClaimsStmtForInsert: " )
   mSPLDef.SPLD_Usage.UsageType = "C" // "Claim"
   mSPLDef.SPLD_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsStmtForUpdate: " )

   // We need to update the existing SPLD_Usage (Claims) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (Claims) entity that corresponds to the SPLDI_FirstAidSection entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )

   // We need to update an SPLD_Usage entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_Usage", "InitClaimsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewClaim
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewClaim( VIEW ViewToWindow )

   VIEW  mSPLDef REGISTERED AS mSPLDef
   SHORT nRC

   nRC = AcceptClaimsStmt( ViewToWindow )
   IF nRC = 0
      InitClaimsStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Claims Statement",
                   "Error saving Claims statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_Usage (Claims) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (Claims) entity that corresponds to the SPLDI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectClaimsStmtForDelete: " )

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteClaimsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteClaimsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteClaimsStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteClaimsStmt: " )
   DELETE ENTITY mSPLDef.SPLD_Usage
   COMMIT mSPLDef

   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportClaimsStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportClaimsStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportClaimsStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportClaimsStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportClaimsStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.epamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.epamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSPLDef, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditSurfacesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditSurfacesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "S"  // "Surfaces"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesSect: " )

   SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSPLDef, "SPLDI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSPLDef.SPLDI_UsageList
   END

   // We need to create SPLDI_UsageList entities.
   FOR EACH mSPLDef.SPLD_Usage
      IF mSPLDef.SPLD_Usage.UsageType = "S" // "Surface"
         IncludeSubobjectFromSubobject( mSPLDef, "SPLDI_UsageList",
                                        mSPLDef, "SPLD_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLDI_UsageList", "InitSurfacesSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesSect( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesSect: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForUpdate( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesStmtForInsert: " )

   // We need to create a new SPLD_Usage entity.
// CreateTemporalEntity( mSPLDef, "SPLD_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSPLDef", "SPLD_Usage", "InitSurfacesStmtForInsert: " )
   mSPLDef.SPLD_Usage.UsageType = "S" // "Surface"
   mSPLDef.SPLD_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesStmtForUpdate: " )

   // We need to update the existing SPLD_Usage (Surfaces) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (Surfaces) entity that corresponds to the SPLDI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )

   // We need to update an SPLD_Usage entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_Usage", "InitSurfacesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesStmt( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesStmt: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewSurface
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewSurface( VIEW ViewToWindow )

   VIEW  mSPLDef REGISTERED AS mSPLDef
   SHORT nRC

   nRC = AcceptSurfacesStmt( ViewToWindow )
   IF nRC = 0
      InitSurfacesStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Surfaces Statement",
                   "Error saving surfaces statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We need to update the existing SPLD_Usage (Surfaces) entity.  We have
   // position on the SPLDI_UsageList entity, but need to get position on
   // the SPLD_Usage (Surfaces) entity that corresponds to the SPLDI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectSurfacesStmtForDelete: " )

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteSurfacesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteSurfacesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteSurfacesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteSurfacesStmt: " )
   DELETE ENTITY mSPLDef.SPLD_Usage
   COMMIT mSPLDef

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtUp: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtDown: " )

   CreateViewFromView( mTempPL, mSPLDef )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempPL.SPLDI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSPLDef, "SPLD_Usage", mSPLDef, "SPLDI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempPL, "SPLD_Usage", mTempPL, "SPLDI_UsageList", "" )

   MoveSubobject( mTempPL, "SPLD_Usage",
                  mSPLDef, "SPLD_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempPL, "SPLDI_UsageList",
                  mSPLDef, "SPLDI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempPL )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportSurfacesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportSurfacesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportSurfacesStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportSurfacesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportSurfacesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.epamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.epamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSPLDef, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopyPhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopyPhysicalLabelDef( VIEW ViewToWindow )

 IssueError( ViewToWindow, 0, 0, "Didn't expect to be here ... CopyPhysicalLabelDef" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: FinalizePhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
FinalizePhysicalLabelDef( VIEW ViewToWindow )

 IssueError( ViewToWindow, 0, 0, "Didn't expect to be here ... FinalizePhysicalLabelDef" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SavePhysicalLabelDef
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SavePhysicalLabelDef( VIEW ViewToWindow )

 IssueError( ViewToWindow, 0, 0, "Didn't expect to be here ... SavePhysicalLabelDef" )

END

/*
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ReloadPhysicalLabelDef  DEPRECATED
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ReloadPhysicalLabelDef( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubLC   BASED ON LOD  mSubLC
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   SHORT   nRC

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF mSPLDef != 0
      DropObjectInstance( mSPLDef )
   END

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC.SubregPhysicalLabelDef EXISTS
      ACTIVATE mSPLDef WHERE mSPLDef.SubregPhysicalLabelDef.ID = mSubLC.SubregPhysicalLabelDef.ID
      ExcludeEntity( mSubLC, "SubregPhysicalLabelDef", zREPOS_NONE )
      IF mSPLDef.SubregPhysicalLabelDef EXISTS
         DELETE ENTITY mSPLDef.SubregPhysicalLabelDef
         COMMIT mSPLDef
         DropObjectInstance( mSPLDef )
      END
   END

   // It is now time to initialize a new Physical Label Definition.  That is a
   // bit of work, but here goes ...

   IF mSubLC.SubregProduct EXISTS

      // We need to create and initialize a new SubregPhysicalLabelDef entity.
      ACTIVATE mSPLDef EMPTY
      NAME VIEW mSPLDef "mSPLDef"
      CREATE ENTITY mSPLDef.SubregPhysicalLabelDef
      mSPLDef.SubregPhysicalLabelDef.Name = mSubLC.SubregProduct.Name
      IncludeSubobjectFromSubobject( mSubLC, "SubregPhysicalLabelDef",
                                     mSPLDef, "SubregPhysicalLabelDef", zPOS_BEFORE )

      // Now run through the Subreg Label Content entities and create the corresponding
      // Physical Label Definition entities.
      InitializeSPLD_FromSLC( mSubLC, mSPLDef )  DEPRECATED

   // IncludeSubobjectFromSubobject( mSPLDef, "SubregLabelContent",
   //                                mSubLC, "SubregLabelContent", zPOS_BEFORE )
      COMMIT mSPLDef
      COMMIT mSubLC

      IF mSPLDef.SubregLabelContent DOES NOT EXIST
         CreateEntity( mSPLDef, "SubregLabelContent", zPOS_FIRST )
      END

      IF mSPLDef.SubregProduct DOES NOT EXIST
         CreateEntity( mSPLDef, "SubregProduct", zPOS_FIRST )
      END

      IF mSPLDef.Subregistrant DOES NOT EXIST
         CreateEntity( mSPLDef, "Subregistrant", zPOS_FIRST )
      END

      IF mSPLDef.MasterProduct DOES NOT EXIST
         CreateEntity( mSPLDef, "MasterProduct", zPOS_FIRST )
      END

      IF mSPLDef.PrimaryRegistrant DOES NOT EXIST
         CreateEntity( mSPLDef, "PrimaryRegistrant", zPOS_FIRST )
      END

      IF mSPLDef.MasterLabelContent DOES NOT EXIST
         CreateEntity( mSPLDef, "MasterLabelContent", zPOS_FIRST )
      END

      SetMatchingAttributesByName( mSPLDef, "SubregLabelContent",
                                   mSubLC, "SubregLabelContent", zSET_ALL )
      SetMatchingAttributesByName( mSPLDef, "SubregProduct",
                                   mSubLC, "SubregProduct", zSET_ALL )
      SetMatchingAttributesByName( mSPLDef, "Subregistrant",
                                   mSubLC, "Subregistrant", zSET_ALL )
      SetMatchingAttributesByName( mSPLDef, "MasterProduct",
                                   mSubLC, "MasterProduct", zSET_ALL )
      SetMatchingAttributesByName( mSPLDef, "PrimaryRegistrant",
                                   mSubLC, "PrimaryRegistrant", zSET_ALL )
      SetMatchingAttributesByName( mSPLDef, "MasterLabelContent",
                                   mSubLC, "MasterLabelContent", zSET_ALL )

   END

END
*/

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 50 ) szSectionName
   STRING ( 50 ) szSectionNameNew

   AcceptSubobject( mSPLDef, "SPLD_PrecautionarySection" )
   COMMIT mSPLDef

//?szSectionName = mSPLDef.SPLD_PrecautionarySection.Title
   szSectionNameNew = szSectionName + "a"
   wWebXfer.Root.NameBefore = szSectionNameNew
   szSectionNameNew = szSectionName + "b"
   wWebXfer.Root.NameAfter = szSectionNameNew
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

   // We may update the existing SPLD_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_PrecautionarySection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_PrecautionarySection", "InitSplitMasterSect: " )
   wWebXfer.Root.CurrentContentType = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   STRING ( 50 ) szSectionName
   INTEGER lControl
   INTEGER lSectionNameLth
   INTEGER lID
   SHORT   nRC

   lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   IF wWebXfer.Root.SplitHTML_Before != ""
      szSectionName = wWebXfer.Root.NameBefore
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mSPLDef, "SPLD_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_After != ""
      szSectionName = wWebXfer.Root.NameAfter
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mSPLDef, "SPLD_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_Before != ""

      CreateViewFromView( mTempPL, mSPLDef )
      CreateEntity( mTempPL, "SPLD_PrecautionarySection", zPOS_BEFORE )
      SetMatchingAttributesByName( mTempPL, "SPLD_PrecautionarySection",
                                   mSPLDef, "SPLD_PrecautionarySection", zSET_NOTNULL )
//?   mTempPL.SPLD_PrecautionarySection.Title = wWebXfer.Root.NameBefore
      mTempPL.SPLD_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_Before
      DropView( mTempPL )

   END

   IF wWebXfer.Root.SplitHTML_After != ""

      CreateViewFromView( mTempPL, mSPLDef )
      CreateEntity( mTempPL, "SPLD_PrecautionarySection", zPOS_AFTER )
      SetMatchingAttributesByName( mTempPL, "SPLD_PrecautionarySection",
                                   mSPLDef, "SPLD_PrecautionarySection", zSET_NOTNULL )
//?   mTempPL.SPLD_PrecautionarySection.Title = wWebXfer.Root.NameAfter
      mTempPL.SPLD_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_After
      DropView( mTempPL )
   END

   AcceptSubobject( mSPLDef, "SPLD_PrecautionarySection" )
   COMMIT mSPLDef

   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSplitMasterSect: " )
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMasterSect( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSPLDef  REGISTERED AS mSPLDef
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSPLDef.SubregLabelContent.ID
   lContentID = mSPLDef.SubregLabelContent.ID
//?lSectionID = mSPLDef.SPLD_PrecautionarySection.ID

   // We have to make sure the Content is in good shape before we go on!
   nRC = AcceptUpdatePhysicalLabelDef( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSPLDef WHERE mSPLDef.SubregLabelContent.ID = lID
      NAME VIEW mSPLDef "mSPLDef"
      SET CURSOR FIRST mSPLDef.SubregLabelContent
          WHERE mSPLDef.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSPLDef.SPLD_PrecautionarySection
//?       WHERE mSPLDef.SPLD_PrecautionarySection.ID = lSectionID
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterSect( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

//?DELETE ENTITY mSPLDef.SPLD_PrecautionarySection
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterSect( VIEW ViewToWindow )

// VIEW mSPLDef REGISTERED AS mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectUp( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSPLDef.SubregLabelContent.ID
   lContentID = mSPLDef.SubregLabelContent.ID
//?lSectionID = mSPLDef.SPLD_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdatePhysicalLabelDef( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSPLDef WHERE mSPLDef.SubregLabelContent.ID = lID
      NAME VIEW mSPLDef "mSPLDef"
      SET CURSOR FIRST mSPLDef.SubregLabelContent
          WHERE mSPLDef.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSPLDef.SPLD_PrecautionarySection
//?       WHERE mSPLDef.SPLD_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempPL, mSPLDef )
      NAME VIEW mTempPL "mTempPL"
//?   SET CURSOR PREVIOUS mTempPL.SPLD_PrecautionarySection
      MoveSubobject( mTempPL, "SPLD_PrecautionarySection",
                     mSPLDef, "SPLD_PrecautionarySection",
                     zPOS_PREV, zREPOS_PREV )
      DropView( mTempPL )
      COMMIT mSPLDef
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectDown( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mTempPL  BASED ON LOD  mSPLDef
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSPLDef.SubregLabelContent.ID
   lContentID = mSPLDef.SubregLabelContent.ID
//?lSectionID = mSPLDef.SPLD_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdatePhysicalLabelDef( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSPLDef WHERE mSPLDef.SubregLabelContent.ID = lID
      NAME VIEW mSPLDef "mSPLDef"
      SET CURSOR FIRST mSPLDef.SubregLabelContent
          WHERE mSPLDef.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSPLDef.SPLD_PrecautionarySection
//?       WHERE mSPLDef.SPLD_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempPL, mSPLDef )
      NAME VIEW mTempPL "mTempPL"
//?   SET CURSOR NEXT mTempPL.SPLD_PrecautionarySection
      MoveSubobject( mTempPL, "SPLD_PrecautionarySection",
                     mSPLDef, "SPLD_PrecautionarySection",
                     zPOS_NEXT, zREPOS_NEXT )
      DropView( mTempPL )
      COMMIT mSPLDef
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CreateSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CreateSLC( VIEW ViewToWindow )

   VIEW mMasLC  BASED ON LOD mMasLC
   VIEW mSubLC  BASED ON LOD mSubLC
   VIEW mSubLC2 BASED ON LOD mSubLC
   VIEW mSPLDef BASED ON LOD mSPLDef

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = 2
   NAME VIEW mMasLC "mMasLC"

   ACTIVATE mSubLC EMPTY
   NAME VIEW mSubLC "mSubLC"

   CREATE ENTITY mSubLC.SubregLabelContent

   // General Section
   FOR EACH mMasLC.M_GeneralSection
      CREATE ENTITY mSubLC.S_GeneralSection
      SetMatchingAttributesByName( mSubLC, "S_GeneralSection", mMasLC, "M_GeneralSection", zSET_NULL )
      INCLUDE mSubLC.M_GeneralSection FROM mMasLC.M_GeneralSection
      FOR EACH mMasLC.M_GeneralStatement
         CREATE ENTITY mSubLC.S_GeneralStatement
         SetMatchingAttributesByName( mSubLC, "S_GeneralStatement", mMasLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE mSubLC.M_GeneralStatement FROM mMasLC.M_GeneralStatement
      END
   END

   // Ingredients Section
   FOR EACH mMasLC.M_IngredientsSection
      CREATE ENTITY mSubLC.S_IngredientsSection
      SetMatchingAttributesByName( mSubLC, "S_IngredientsSection", mMasLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE mSubLC.M_IngredientsSection FROM mMasLC.M_IngredientsSection
      FOR EACH mMasLC.M_IngredientsStatement
         CREATE ENTITY mSubLC.S_IngredientsStatement
         SetMatchingAttributesByName( mSubLC, "S_IngredientsStatement", mMasLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE mSubLC.M_IngredientsStatement FROM mMasLC.M_IngredientsStatement
      END
   END

   // StorageDisposal Section
   FOR EACH mMasLC.M_StorageDisposalSection
      CREATE ENTITY mSubLC.S_StorageDisposalSection
      SetMatchingAttributesByName( mSubLC, "S_StorageDisposalSection", mMasLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE mSubLC.M_StorageDisposalSection FROM mMasLC.M_StorageDisposalSection
      FOR EACH mMasLC.M_StorageDisposalStatement
         CREATE ENTITY mSubLC.S_StorageDisposalStatement
         SetMatchingAttributesByName( mSubLC, "S_StorageDisposalStatement", mMasLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE mSubLC.M_StorageDisposalStatement FROM mMasLC.M_StorageDisposalStatement
      END
   END

   // DirectionsForUse Section
   FOR EACH mMasLC.M_DirectionsForUseSection
      CREATE ENTITY mSubLC.S_DirectionsForUseSection
      SetMatchingAttributesByName( mSubLC, "S_DirectionsForUseSection", mMasLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE mSubLC.M_DirectionsForUseSection FROM mMasLC.M_DirectionsForUseSection
      FOR EACH mMasLC.M_DirectionsForUseStatement
         CREATE ENTITY mSubLC.S_DirectionsForUseStatement
         SetMatchingAttributesByName( mSubLC, "S_DirectionsForUseStatement", mMasLC, "M_DirectionsForUseStatement", zSET_NULL )
         INCLUDE mSubLC.M_DirectionsForUseStatement FROM mMasLC.M_DirectionsForUseStatement
      END
   END

   // Marketing Section
   FOR EACH mMasLC.M_MarketingSection
      CREATE ENTITY mSubLC.S_MarketingSection
      SetMatchingAttributesByName( mSubLC, "S_MarketingSection", mMasLC, "M_MarketingSection", zSET_NULL )
      INCLUDE mSubLC.M_MarketingSection FROM mMasLC.M_MarketingSection
      FOR EACH mMasLC.M_MarketingStatement
         CREATE ENTITY mSubLC.S_MarketingStatement
         SetMatchingAttributesByName( mSubLC, "S_MarketingStatement", mMasLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE mSubLC.M_MarketingStatement FROM mMasLC.M_MarketingStatement
      END
   END

   // HumanHazard Section
   FOR EACH mMasLC.M_HumanHazardSection
      CREATE ENTITY mSubLC.S_HumanHazardSection
      SetMatchingAttributesByName( mSubLC, "S_HumanHazardSection", mMasLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE mSubLC.M_HumanHazardSection FROM mMasLC.M_HumanHazardSection
   END

   // Usage Section
   FOR EACH mMasLC.M_Usage
      CREATE ENTITY mSubLC.S_Usage
      SetMatchingAttributesByName( mSubLC, "S_Usage", mMasLC, "M_Usage", zSET_NULL )
      INCLUDE mSubLC.M_Usage FROM mMasLC.M_Usage
   END

   // Eliminate any duplicate Usages.
   /*CreateViewFromView( mSubLC2, mSubLC )
   FOR EACH mSubLC.S_Usage
      SET CURSOR FIRST mSubLC2.S_Usage
                 WHERE mSubLC2.S_Usage.UsageType = mSubLC.S_Usage.UsageType
                   AND mSubLC2.S_Usage.Name = mSubLC.S_Usage.Name
                   AND mSubLC2.S_Usage.ID  != mSubLC.S_Usage.ID
      IF RESULT >= zCURSOR_SET
         IssueError( ViewToWindow, 0, 0, mSubLC.S_Usage.Name )
         DELETE ENTITY mSubLC2.S_Usage NONE
      END
   END
   DropView( mSubLC2 )*/

   // DirectionsForUse Usage
   FOR EACH mMasLC.M_DirectionsForUseSection
      SET CURSOR FIRST mSubLC.S_DirectionsForUseSection
                 WHERE mSubLC.S_DirectionsForUseSection.Title = mMasLC.M_DirectionsForUseSection.Title
      FOR EACH mMasLC.M_DirectionsUsage
         CreateViewFromView( mSubLC2, mSubLC )
         SET CURSOR FIRST mSubLC2.S_DirectionsUsage
                    WHERE mSubLC2.S_DirectionsUsage.UsageType = mMasLC.M_DirectionsUsage.UsageType
                      AND mSubLC2.S_DirectionsUsage.Name = mMasLC.M_DirectionsUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST mSubLC.S_Usage WHERE mSubLC.S_Usage.Name = mMasLC.M_DirectionsUsage.Name
                                              AND mSubLC.S_Usage.UsageType = mMasLC.M_DirectionsUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 1" )
            END
            INCLUDE mSubLC.S_DirectionsUsage FROM mSubLC.S_Usage
         END
         DropView( mSubLC2 )
      END
   END

   // Marketing Usage
   FOR EACH mMasLC.M_MarketingSection
      SET CURSOR FIRST mSubLC.S_MarketingSection
                 WHERE mSubLC.S_MarketingSection.Title = mMasLC.M_MarketingSection.Title
      FOR EACH mMasLC.M_MarketingUsage
         CreateViewFromView( mSubLC2, mSubLC )
         SET CURSOR FIRST mSubLC2.S_MarketingUsage
                    WHERE mSubLC2.S_MarketingUsage.UsageType = mMasLC.M_MarketingUsage.UsageType
                      AND mSubLC2.S_MarketingUsage.Name = mMasLC.M_MarketingUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST mSubLC.S_Usage WHERE mSubLC.S_Usage.Name = mMasLC.M_MarketingUsage.Name
                                                 AND mSubLC.S_Usage.UsageType = mMasLC.M_MarketingUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 1" )
            END
            INCLUDE mSubLC.S_MarketingUsage FROM mSubLC.S_Usage
         END
         DropView( mSubLC2 )
      END
   END

   IssueError( ViewToWindow, 0, 0, "Before Commit" )
   //COMMIT mSubLC
   IF RESULT < 0
      IssueError( ViewToWindow, 0, 0, "Database Write Error" )
   END

END

/*
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopyMLC      deprecated!!!
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopyMLC( VIEW ViewToWindow )

   VIEW mMasLC_From BASED ON LOD mMasLC
   VIEW mMasLC_To   BASED ON LOD mMasLC
   VIEW mMasLC_To2  BASED ON LOD mMasLC

   ACTIVATE mMasLC_From WHERE mMasLC_From.MasterLabelContent.ID = 1
   NAME VIEW mMasLC_From "mMasLC_From"

   ACTIVATE mMasLC_To WHERE mMasLC_To.MasterLabelContent.ID = 2
   NAME VIEW mMasLC_To "mMasLC_To"

   IssueError( ViewToWindow, 0, 0, "After activate" )

   // Delete the substructure of sections.
   FOR EACH mMasLC_To.M_GeneralSection
      DELETE ENTITY mMasLC_To.M_GeneralSection NONE
   END
   FOR EACH mMasLC_To.M_IngredientsSection
      DELETE ENTITY mMasLC_To.M_IngredientsSection NONE
   END
   FOR EACH mMasLC_To.M_StorageDisposalSection
      DELETE ENTITY mMasLC_To.M_StorageDisposalSection NONE
   END
   FOR EACH mMasLC_To.M_DirectionsForUseSection
      DELETE ENTITY mMasLC_To.M_DirectionsForUseSection NONE
   END
   FOR EACH mMasLC_To.M_MarketingSection
      DELETE ENTITY mMasLC_To.M_MarketingSection NONE
   END
   FOR EACH mMasLC_To.M_HumanHazardSection
      DELETE ENTITY mMasLC_To.M_HumanHazardSection NONE
   END

   // General Section
   FOR EACH mMasLC_From.M_GeneralSection
      CREATE ENTITY mMasLC_To.M_GeneralSection
      SetMatchingAttributesByName( mMasLC_To, "M_GeneralSection", mMasLC_From, "M_GeneralSection", zSET_NULL )
      FOR EACH mMasLC_From.M_GeneralStatement
         CREATE ENTITY mMasLC_To.M_GeneralStatement
         SetMatchingAttributesByName( mMasLC_To, "M_GeneralStatement", mMasLC_From, "M_GeneralStatement", zSET_NULL )
      END
   END

   // Ingredients Section
   FOR EACH mMasLC_From.M_IngredientsSection
      CREATE ENTITY mMasLC_To.M_IngredientsSection
      SetMatchingAttributesByName( mMasLC_To, "M_IngredientsSection", mMasLC_From, "M_IngredientsSection", zSET_NULL )
      FOR EACH mMasLC_From.M_IngredientsStatement
         CREATE ENTITY mMasLC_To.M_IngredientsStatement
         SetMatchingAttributesByName( mMasLC_To, "M_IngredientsStatement", mMasLC_From, "M_IngredientsStatement", zSET_NULL )
      END
   END

   // StorageDisposal Section
   FOR EACH mMasLC_From.M_StorageDisposalSection
      CREATE ENTITY mMasLC_To.M_StorageDisposalSection
      SetMatchingAttributesByName( mMasLC_To, "M_StorageDisposalSection", mMasLC_From, "M_StorageDisposalSection", zSET_NULL )
      FOR EACH mMasLC_From.M_StorageDisposalStatement
         CREATE ENTITY mMasLC_To.M_StorageDisposalStatement
         SetMatchingAttributesByName( mMasLC_To, "M_StorageDisposalStatement", mMasLC_From, "M_StorageDisposalStatement", zSET_NULL )
      END
   END

   // DirectionsForUse Section
   FOR EACH mMasLC_From.M_DirectionsForUseSection
      CREATE ENTITY mMasLC_To.M_DirectionsForUseSection
      SetMatchingAttributesByName( mMasLC_To, "M_DirectionsForUseSection", mMasLC_From, "M_DirectionsForUseSection", zSET_NULL )
      FOR EACH mMasLC_From.M_DirectionsForUseStatement
         CREATE ENTITY mMasLC_To.M_DirectionsForUseStatement
         SetMatchingAttributesByName( mMasLC_To, "M_DirectionsForUseStatement", mMasLC_From, "M_DirectionsForUseStatement", zSET_NULL )
      END
   END

   // Marketing Section
   FOR EACH mMasLC_From.M_MarketingSection
      CREATE ENTITY mMasLC_To.M_MarketingSection
      SetMatchingAttributesByName( mMasLC_To, "M_MarketingSection", mMasLC_From, "M_MarketingSection", zSET_NULL )
      FOR EACH mMasLC_From.M_MarketingStatement
         CREATE ENTITY mMasLC_To.M_MarketingStatement
         SetMatchingAttributesByName( mMasLC_To, "M_MarketingStatement", mMasLC_From, "M_MarketingStatement", zSET_NULL )
      END
   END

   // HumanHazard Section
   FOR EACH mMasLC_From.M_HumanHazardSection
      CREATE ENTITY mMasLC_To.M_HumanHazardSection
      SetMatchingAttributesByName( mMasLC_To, "M_HumanHazardSection", mMasLC_From, "M_HumanHazardSection", zSET_NULL )
   END

   // Usage Section
// FOR EACH mMasLC_From.M_Usage
//    CREATE ENTITY mMasLC_To.M_Usage
//    SetMatchingAttributesByName( mMasLC_To, "M_Usage", mMasLC_From, "M_Usage", zSET_NULL )
// END
//
// // Eliminate any duplicate Usages.
// CreateViewFromView( mMasLC_To2, mMasLC_To )
// FOR EACH mMasLC_To.M_Usage
//    SET CURSOR FIRST mMasLC_To2.M_Usage
//               WHERE mMasLC_To2.M_Usage.UsageType = mMasLC_To.M_Usage.UsageType
//                 AND mMasLC_To2.M_Usage.Name = mMasLC_To.M_Usage.Name
//                 AND mMasLC_To2.M_Usage.ID  != mMasLC_To.M_Usage.ID
//    IF RESULT >= zCURSOR_SET
//       IssueError( ViewToWindow, 0, 0, mMasLC_To.M_Usage.Name )
//       DELETE ENTITY mMasLC_To2.M_Usage NONE
//    END
// END
// DropView( mMasLC_To2 )

   // DirectionsForUse Usage
   FOR EACH mMasLC_From.M_DirectionsForUseSection
      SET CURSOR FIRST mMasLC_To.M_DirectionsForUseSection
                 WHERE mMasLC_To.M_DirectionsForUseSection.Title = mMasLC_From.M_DirectionsForUseSection.Title
      FOR EACH mMasLC_From.M_DirectionsUsage
         CreateViewFromView( mMasLC_To2, mMasLC_To )
         SET CURSOR FIRST mMasLC_To2.M_DirectionsUsage
                    WHERE mMasLC_To2.M_DirectionsUsage.UsageType = mMasLC_From.M_DirectionsUsage.UsageType
                      AND mMasLC_To2.M_DirectionsUsage.Name = mMasLC_From.M_DirectionsUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST mMasLC_To.M_Usage WHERE mMasLC_To.M_Usage.Name = mMasLC_From.M_DirectionsUsage.Name
                                                 AND mMasLC_To.M_Usage.UsageType = mMasLC_From.M_DirectionsUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 1" )
            END
            INCLUDE mMasLC_To.M_DirectionsUsage FROM mMasLC_To.M_Usage
         END
         DropView( mMasLC_To2 )
      END
   END

   // Marketing Usage
   FOR EACH mMasLC_From.M_MarketingSection
      SET CURSOR FIRST mMasLC_To.M_MarketingSection
                 WHERE mMasLC_To.M_MarketingSection.Title = mMasLC_From.M_MarketingSection.Title
      FOR EACH mMasLC_From.M_MarketingUsage
         CreateViewFromView( mMasLC_To2, mMasLC_To )
         SET CURSOR FIRST mMasLC_To2.M_MarketingUsage
                    WHERE mMasLC_To2.M_MarketingUsage.UsageType = mMasLC_From.M_MarketingUsage.UsageType
                      AND mMasLC_To2.M_MarketingUsage.Name = mMasLC_From.M_MarketingUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST mMasLC_To.M_Usage WHERE mMasLC_To.M_Usage.Name = mMasLC_From.M_MarketingUsage.Name
                                                 AND mMasLC_To.M_Usage.UsageType = mMasLC_From.M_MarketingUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 1" )
            END
            INCLUDE mMasLC_To.M_MarketingUsage FROM mMasLC_To.M_Usage
         END
         DropView( mMasLC_To2 )
      END
   END

   IssueError( ViewToWindow, 0, 0, "Before Commit" )
   COMMIT mMasLC_To
   IF RESULT < 0
      IssueError( ViewToWindow, 0, 0, "Database Write Error" )
   END

   DropObjectInstance( mMasLC_To )
   ACTIVATE mMasLC_To WHERE mMasLC_To.MasterLabelContent.ID = 2
   NAME VIEW mMasLC_To "mMasLC_To"

END
*/

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSPLD_List
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSPLD_List( VIEW ViewToWindow )

   // not much to do here ... the list of SPLDs is in the mSubLC OI.
   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: UpdateTemplateSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTemplateSPLD( VIEW ViewToWindow )

   // Nothing to do ... just position

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewSPLD( VIEW ViewToWindow )

   VIEW mSPLDef   BASED ON LOD mSPLDef
   VIEW lTemplLST BASED ON LOD lTempl

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF RESULT >= 0
      DropObjectInstance( mSPLDef )
   END

   // Initialize a new SPLD.
   ACTIVATE mSPLDef EMPTY
   NAME VIEW mSPLDef "mSPLDef"
   CREATE ENTITY mSPLDef.SubregPhysicalLabelDef

   // Make sure select lists of SLC and Template entries exist.
   GET VIEW lTemplLST NAMED "lTemplLST"
   IF RESULT < 0
      ACTIVATE lTemplLST RootOnlyMultiple
      NAME VIEW lTemplLST "lTemplLST"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CreateSPLD
//
// Creates an SPLD from a Template and SLC and also changes an existing SPLD
// to use a new Template.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CreateSPLD( VIEW ViewToWindow )

   VIEW mSPLDef   REGISTERED AS mSPLDef
   VIEW mSubLC    BASED ON LOD  mSubLC
   VIEW lTemplLST BASED ON LOD  lTempl

   // Make sure select lists of Template entries exist.
   GET VIEW lTemplLST NAMED "lTemplLST"
   IF lTemplLST != 0
      DropObjectInstance( lTemplLST )
   END

   // Use the selected Template and SLC to build a new SPLD.
   GET VIEW mSubLC NAMED "mSubLC"

   // Build the main part of the SPLD from the selected SLC.
   BuildSPLD_FromSLC( mSPLDef, mSubLC )

   // Add the Template subobject to the SPLD from the selected Template
   BuildSPLD_Template( mSPLDef, mSPLDef.SelectedTemplate.ID )

   COMMIT mSPLDef

   // Build Display Structure.
   BuildDisplayStructure( mSPLDef )

   // Reset cursor to beginning for all entities.
   SET CURSOR FIRST mSPLDef.SubregPhysicalLabelDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewSPLD( VIEW ViewToWindow )

   VIEW lTemplLST BASED ON LOD  lTempl

   // Make sure select lists of Template entries exist.
   GET VIEW lTemplLST NAMED "lTemplLST"
   IF lTemplLST != 0
      DropObjectInstance( lTemplLST )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSPLD( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mSPLDef  BASED ON LOD  mSPLDef
   INTEGER lID
   SHORT   nRC

// This prompt must occur from the JavaScript.
// nRC = MessagePrompt( ViewToWindow, "", "Delete", "OK to delete SPLD?", 0, zBUTTONS_YESNO, zRESPONSE_YES, 0 )
// IF nRC = zRESPONSE_NO
//    RETURN -1
// END

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF RESULT >= 0
      DropObjectInstance( mSPLDef )
   END

   // Initialize a new SPLD.
   ACTIVATE mSPLDef WHERE mSPLDef.SubregPhysicalLabelDef.ID = mSubLC.SubregPhysicalLabelDef.ID
   NAME VIEW mSPLDef "mSPLDef"
   DELETE ENTITY mSPLDef.SubregPhysicalLabelDef
   COMMIT mSPLDef
   DropObjectInstance( mSPLDef )

   lID = mSubLC.SubregLabelContent.ID
   DropObjectInstance( mSubLC )
   ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lID
   NAME VIEW mSubLC "mSubLC"

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: UpdateSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateSPLD( VIEW ViewToWindow )

   // Nothing to do ... just position

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSPLD_ForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSPLD_ForUpdate( VIEW ViewToWindow )

// VIEW mSPLDef  REGISTERED AS mSPLDef	  retrieved old code (next six lines) 2012.05.14
   VIEW mSubProd REGISTERED AS mSubProd
   VIEW mSPLDef  BASED ON LOD  mSPLDef

   GET VIEW mSPLDef NAMED "mSPLDef"
   IF RESULT >= 0
      DropObjectInstance( mSPLDef )
   END

   ACTIVATE mSPLDef WHERE mSPLDef.SubregPhysicalLabelDef.ID = mSubProd.SubregPhysicalLabelDef.ID
   NAME VIEW mSPLDef "mSPLDef"

   // Build Display Structure.
   IF mSPLDef.SPLD_Template EXISTS
      BuildDisplayStructure( mSPLDef )
   END

   SET CURSOR FIRST mSPLDef.SubregPhysicalLabelDef
   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

   GeneratePDF( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ShowDirectionsUsages
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ShowDirectionsUsages( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 20 ) szUsageType

   // Build the display entities for Directions of Use and related Usages.
   // First delete existing entries.
   FOR EACH mSPLDef.DirectionsUsage
      DELETE ENTITY mSPLDef.DirectionsUsage NONE
   END

   FOR EACH mSPLDef.SPLD_DirectionsForUseSection
      CREATE ENTITY mSPLDef.DirectionsUsage
      mSPLDef.DirectionsUsage.DirectionsSectionID = mSPLDef.SPLD_DirectionsForUseSection.ID
      mSPLDef.DirectionsUsage.DisplayEntry        = mSPLDef.SPLD_DirectionsForUseSection.Title
      FOR EACH mSPLDef.SPLD_DirectionsUsage
         CREATE ENTITY mSPLDef.DirectionsUsage
         mSPLDef.DirectionsUsage.DirectionsSectionID = mSPLDef.SPLD_DirectionsForUseSection.ID
         mSPLDef.DirectionsUsage.UsageID             = mSPLDef.SPLD_DirectionsUsage.ID
         GetStringFromAttributeByContext( szUsageType, mSPLDef, "SPLD_DirectionsUsage", "UsageType", "", 20 )
         mSPLDef.DirectionsUsage.DisplayEntry        = "......" + szUsageType + ": " + mSPLDef.SPLD_DirectionsUsage.Name
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitReselectTemplate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitReselectTemplate( VIEW ViewToWindow )

   VIEW lTemplLST BASED ON LOD lTempl

   // Make sure that Template list exists.
   GET VIEW lTemplLST NAMED "lTemplLST"
   IF RESULT < 0
      ACTIVATE lTemplLST RootOnlyMultiple
      NAME VIEW lTemplLST "lTemplLST"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ReselectTemplate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ReselectTemplate( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef
   VIEW lTemplLST REGISTERED AS lTemplLST

   IF lTemplLST != 0
      DropObjectInstance( lTemplLST )
   END

   // Use the selected Template to rebuild that part of the SPLD.
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "ReselectTemplate: " )
   BuildSPLD_Template( mSPLDef, mSPLDef.SelectedTemplate.ID )
   COMMIT mSPLDef

   // Build Display Structure.
   BuildDisplayStructure( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelReselectTemplate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelReselectTemplate( VIEW ViewToWindow )

   VIEW lTemplLST REGISTERED AS lTemplLST

   IF lTemplLST != 0
      DropObjectInstance( lTemplLST )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ShowMarketingUsages
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ShowMarketingUsages( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 20 ) szUsageType

   // Build the display entities for Marketing and related Usages.
   // First delete existing entries.
   FOR EACH mSPLDef.MarketingUsage
      DELETE ENTITY mSPLDef.MarketingUsage NONE
   END

   FOR EACH mSPLDef.SPLD_MarketingSection
      CREATE ENTITY mSPLDef.MarketingUsage
      mSPLDef.MarketingUsage.MarketingSectionID = mSPLDef.SPLD_MarketingSection.ID
      mSPLDef.MarketingUsage.DisplayEntry       = mSPLDef.SPLD_MarketingSection.Title
      FOR EACH mSPLDef.SPLD_MarketingUsage
         CREATE ENTITY mSPLDef.MarketingUsage
         mSPLDef.MarketingUsage.MarketingSectionID = mSPLDef.SPLD_MarketingSection.ID
         mSPLDef.MarketingUsage.UsageID            = mSPLDef.SPLD_MarketingUsage.ID
         GetStringFromAttributeByContext( szUsageType, mSPLDef, "SPLD_MarketingUsage", "UsageType", "", 20 )
         mSPLDef.MarketingUsage.DisplayEntry        = "......" + szUsageType + ": " + mSPLDef.SPLD_MarketingUsage.Name
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddMarketingBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddMarketingBlock( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mSPLDefF BASED ON LOD  mSPLDef
   VIEW mSPLDefT BASED ON LOD  mSPLDef
   INTEGER  lID

   // We must be positioned on a Template Block
   SET CURSOR FIRST mSPLDef.DisplayTemplateStatement WHERE mSPLDef.DisplayTemplateStatement.wkSelected = "Y"
   IF RESULT < zCURSOR_SET OR mSPLDef.DisplayTemplateStatement.EntityType != "Block"

      MessageSend( ViewToWindow, "", "Add Marketing Block",
                   "You must be positioned on a valid Block.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   lID = mSPLDef.DisplayTemplateStatement.EntityID
   SET CURSOR FIRST mSPLDef.SPLD_TemplateBlock WITHIN mSPLDef.SPLD_Template
              WHERE mSPLDef.SPLD_TemplateBlock.ID = lID
// TraceLineI( "After SetCursorFirst for SPLD_TemplateBlock.ID: ", lID )
// DisplayObjectInstance( mSPLDef, 0, 0 )
   IF RESULT < zCURSOR_SET
      IssueError( ViewToWindow, 0, 0, "Programming Error 15" )
   ELSE
      // Check if the last Section for the current Block and the first Section of the next Block
      // are both Directions for Use. This is invalid as it would place a Marketing Section within
      // Directions for Use Sections.
      CreateViewFromView( mSPLDefF, mSPLDef )
      CreateViewFromView( mSPLDefT, mSPLDef )
      SET CURSOR PREVIOUS mSPLDefF.SPLD_TemplateBlock
      SET CURSOR NEXT mSPLDefT.SPLD_TemplateBlock WITHIN mSPLDefT.SPLD_Template
      IF mSPLDefF.SPLD_TemplateBlockBlock.TSectionType  = "DirectionsForUse" AND
         mSPLDefT.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse"

         DropView( mSPLDefF )
         DropView( mSPLDefT )
         MessageSend( ViewToWindow, "", "Add Marketing Block",
                      "You cannot add a Marketing Section in the middle of Directions for Use.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      DropView( mSPLDefF )
      DropView( mSPLDefT )
   END

   // Simply add the single Marketing Block and Section.
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   mSPLDef.SPLD_TemplateBlock.Name = "New Marketing"
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   lID = mSPLDef.SubregPhysicalLabelDef.wNextwTemplIDValue
   lID = lID + 1
   mSPLDef.SubregPhysicalLabelDef.wNextwTemplIDValue = lID
   mSPLDef.SPLD_TemplateBlockBlock.wTempID = lID

   // We've got to commit the SPLD, but not rebuild the DisplayStructure in the Web
   COMMIT mSPLDef

// TraceLineI( "After Create NewMarketing after SPLD_TemplateBlock.ID: ", lID )
// DisplayObjectInstance( mSPLDef, 0, 0 )

// // Rebuild the display structure.
// BuildDisplayStructure( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSections
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSections( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mSPLDefT BASED ON LOD  mSPLDef

   // We must be positioned on a Template Marketing Section.
   SET CURSOR FIRST mSPLDef.DisplayTemplateStatement WHERE mSPLDef.DisplayTemplateStatement.wkSelected = "Y"
   IF RESULT < zCURSOR_SET OR mSPLDef.DisplayTemplateStatement.EntityType != "Section"

      MessageSend( ViewToWindow, "", "Select Marketing Sections",
                   "You must be positioned on a valid Marketing Section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   SET CURSOR FIRST mSPLDef.SPLD_TemplateBlockBlock WITHIN mSPLDef.SPLD_Template
              WHERE mSPLDef.SPLD_TemplateBlockBlock.ID = mSPLDef.DisplayTemplateStatement.EntityID
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST mSPLDef.SPLD_TemplateBlockBlock WITHIN mSPLDef.SPLD_Template
                 WHERE mSPLDef.SPLD_TemplateBlockBlock.wTempID = mSPLDef.DisplayTemplateStatement.wTempID
   END

   IF RESULT < zCURSOR_SET
      IssueError( ViewToWindow, 0, 0, "Programming Error 10" )
   ELSE
      IF mSPLDef.SPLD_TemplateBlockBlock.TSectionType != "Marketing"
         MessageSend( ViewToWindow, "", "Select Marketing Sections",
                      "You must be positioned on a valid Marketing Section.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   // Create a list of Marketing Sections that are not already used in the SPLD.
   FOR EACH mSPLDef.SelectableMarketingSection
      EXCLUDE mSPLDef.SelectableMarketingSection NONE
   END

   CreateViewFromView( mSPLDefT, mSPLDef )
   FOR EACH mSPLDef.SPLD_MarketingSection
      SET CURSOR FIRST mSPLDefT.SPLDT_MarketingSection WITHIN mSPLDefT.SPLD_Template
                 WHERE mSPLDefT.SPLDT_MarketingSection.ID = mSPLDef.SPLD_MarketingSection.ID
      IF RESULT < zCURSOR_SET
         INCLUDE mSPLDef.SelectableMarketingSection FROM mSPLDef.SPLD_MarketingSection
      END
   END

   DropView( mSPLDefT )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmSelectMarketingSections
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmSelectMarketingSections( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef
   SHORT nRC

   // Include each selected Marketing Section under the Template Section.
   FOR EACH mSPLDef.SelectableMarketingSection
      nRC = GetSelectStateOfEntity( mSPLDef, "SelectableMarketingSection" )
      IF nRC = 1
         INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SelectableMarketingSection
      END
   END

   // Rebuild the display structure.
   BuildDisplayStructure( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateSPLD( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelUpdateSPLD: " )
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateSPLD( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptUpdateSPLD: " )
   COMMIT mSPLDef
   DropObjectInstance( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSections
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSections( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   VIEW mSPLDefT BASED ON LOD  mSPLDef
   SHORT nRC

   // First validate that only Directions for Use Sections have been selected.
   FOR EACH mSPLDef.DisplayTemplateStatement
      IF mSPLDef.DisplayTemplateStatement.wkSelected = "Y"
         IF mSPLDef.DisplayTemplateStatement.EntityType != "DirectionsForUseSection"
            MessageSend( ViewToWindow, "", "Select Directions Sections",
                         "You can only select 'Directions for Use' Sections.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END

         SetSelectStateOfEntity( mSPLDef, "DisplayTemplateStatement", 1 )
      ELSE
         SetSelectStateOfEntity( mSPLDef, "DisplayTemplateStatement", 0 )
      END
   END

   // Position on TemplateBlockBlock for selected entries.
   nRC = SetCursorFirstSelectedEntity( mSPLDef, "DisplayTemplateStatement", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Select Directions Sections",
                   "You must select at least one 'Directions for Use' Section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   SET CURSOR FIRST mSPLDef.SPLDT_DirectionsForUseSection WITHIN mSPLDef.SPLD_Template
              WHERE mSPLDef.SPLDT_DirectionsForUseSection.ID = mSPLDef.DisplayTemplateStatement.EntityID
   IF RESULT < zCURSOR_SET
      IssueError( ViewToWindow, 0, 0, "Programming Error 11 " )
   END

   // Create list of Directions for Use Template Sections.
   // Note that each entry points to the TemplateBlockBlock we just positioned on.
   FOR EACH mSPLDef.SelectDirectionsForUse
      DELETE ENTITY mSPLDef.SelectDirectionsForUse NONE
   END

   CreateViewFromView( mSPLDefT, mSPLDef )
   FOR EACH mSPLDefT.SPLD_TemplateBlockBlock WITHIN mSPLDefT.SPLD_Template
      IF mSPLDefT.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse" AND
         mSPLDefT.SPLD_TemplateBlockBlock.ID != mSPLDef.SPLD_TemplateBlockBlock.ID

         // Create three entries for Panel, Block and Section.
         CREATE ENTITY mSPLDef.SelectDirectionsForUse
         mSPLDef.SelectDirectionsForUse.TemplateBlockBlockID = mSPLDefT.SPLD_TemplateBlockBlock.ID
         mSPLDef.SelectDirectionsForUse.DisplayEntry = "Panel:   " + mSPLDefT.SPLD_TemplatePanel.dPanelName
         CREATE ENTITY mSPLDef.SelectDirectionsForUse
         mSPLDef.SelectDirectionsForUse.TemplateBlockBlockID = mSPLDefT.SPLD_TemplateBlockBlock.ID
         mSPLDef.SelectDirectionsForUse.DisplayEntry = "...Block:   " + mSPLDefT.SPLD_TemplateBlock.Name
         CREATE ENTITY mSPLDef.SelectDirectionsForUse
         mSPLDef.SelectDirectionsForUse.TemplateBlockBlockID = mSPLDefT.SPLD_TemplateBlockBlock.ID
         mSPLDef.SelectDirectionsForUse.DisplayEntry = "......Section:      Directions for Use"
      END
   END

   DropView( mSPLDefT )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GeneratePDF
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GeneratePDF( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef

// mSPLDef.SPLD_TemplateBlock.ExternalGraphicFileName = "KennelSolHeader.jpg"
// SET CURSOR NEXT mSPLDef.SPLD_TemplateBlock
// mSPLDef.SPLD_TemplateBlock.ShowBox = "Y"
// FOR EACH mSPLDef.SPLD_TemplatePanel
//    mSPLDef.SPLD_TemplatePanel.SizeX = 620
// END

// FOR EACH mSPLDef.SPLD_TemplateBlockBlock WITHIN mSPLDef.SubregPhysicalLabelDef
//    IF mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing" OR
//       mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse"
//
//       mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
//    END
// END

   // Build Display Structure.
   GeneratePDF_Label( mSPLDef )

END

/*
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GeneratePDF
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GeneratePDF( VIEW ViewToWindow )

   VIEW lSPLDLST REGISTERED AS lSPLDLST
   VIEW mSPLDef  BASED ON LOD  mSPLDef

   ACTIVATE mSPLDef WHERE mSPLDef.SubregPhysicalLabelDef.ID = lSPLDLST.SubregPhysicalLabelDef.ID
   NAME VIEW mSPLDef "mSPLDef"
   mSPLDef.SPLD_TemplateBlock.ExternalGraphicFileName = "KennelSolHeader.jpg"
   SET CURSOR NEXT mSPLDef.SPLD_TemplateBlock
   mSPLDef.SPLD_TemplateBlock.ShowBox = "Y"
   FOR EACH mSPLDef.SPLD_TemplatePanel
      mSPLDef.SPLD_TemplatePanel.SizeX = 620
   END

   FOR EACH mSPLDef.SPLD_TemplateBlockBlock WITHIN mSPLDef.SubregPhysicalLabelDef
      IF mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing" OR
         mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse"
         mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
      END
   END

   // Build Display Structure.
   GeneratePDF_Label( mSPLDef )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GeneratePDF
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GeneratePDF( VIEW ViewToWindow )

   VIEW mSPLDef BASED ON LOD mSPLDef

   // Test HTML generation agains a test object.
   // Create an initial test object.
   ACTIVATE mSPLDef EMPTY
   NAME VIEW mSPLDef "mSPLDef"
   CREATE ENTITY mSPLDef.SubregPhysicalLabelDef
   mSPLDef.SubregPhysicalLabelDef.Name = "Test1"

   // Set up Marketing example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 1
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "Recommended for use in <AreaOfUse>. Disinfects, cleans, and deodorizes the following hard nonporous inanimate surfaces: <Surface>. " +
                                          "Recommended for use in: Federally inspected meat and poultry plants as a disinfectant agent for use in all departments. " +
                                          "Food products and packaging materials must be removed from the room or carefully protected. Use product in accordance with its label. " +
                                          "All surfaces must be thoroughly rinsed with potable water."
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "kennels"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "pet shops"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "veterinary clinics"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "life science laboratories"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "floors"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "walls"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "nonmedical metal surfaces,"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "plastic surfaces (such as polypropylene, polystyrene, etc.)"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage

   // Set up 2nd MARKETING example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 2
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "First unnumbered statement."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "1. First numbered statement."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "2. Second numbered statement. We want to test multiple lines, so this statement will go on and on and on until we finally get to at least another line."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "3. Third numbered statement."

   // Set up 3rd MARKETING example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 3
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "A multi-purpose, neutral pH, gemicidal detergent and deodorant effective in hardwater up to 400 ppm (calculated as CaCO3) in the presence of a moderate amount of soil."
   FOR EACH mSPLDef.SPLD_Usage
      INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   END

   // Set up DIRECTIONS FOR USE example.
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 1
   mSPLDef.SPLD_DirectionsForUseSection.GeneralUse = "Y"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "It is a violation of Federal law to use this product in a manner inconsistent with its labeling."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "This product is not for use on medical device surfaces."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 2
   mSPLDef.SPLD_DirectionsForUseSection.Title = "DISINFECTION / CLEANING / DEODORIZING DIRECTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Remove heavy soil deposits from surface. Then thoroughly wet surface with a use-solution of 1/2 oz. of the concentrate per gallon of water. " +
                                                 "The use-solution can be applied with a cloth, mop, sponge, or coarse spray, or by soaking. " +
                                                 "For sprayer applications, use a coarse spray device.Spray 6-8 inches from the surface, rub with a brush, cloth or sponge. " +
                                                 "Do not breathe spray. Let solution remain on surface for a minimum of 10 minutes. Rinse or allow to air dry. Rinsing of floors is not necessary unless they are to be waxed or polished. "
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Food contact surfaces must be thoroughly rinsed with potable water. This product must not be used to clean the following food contact surfaces: utensils, glassware and dishes."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Prepare a fresh solution daily or more often if the solution becomes visibly dirty or diluted."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 3
   mSPLDef.SPLD_DirectionsForUseSection.Title = "FUNGICIDAL DIRECTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "For use in areas such as locker rooms, dressing rooms, shower and bath areas and exercise facilities follow disinfection directions."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 4
   mSPLDef.SPLD_DirectionsForUseSection.Title = "MILDEWSTATIC INSTRUCTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Will effectively control the growth of mold and mildew plus the odors caused by them when applied to hard, nonporous surfaces such as <AreaOfUse>. " +
                                                 "Apply use-solution of 1/2 oz. per gallon of water with a cloth, mop, sponge, or coarse spray. Make sure to wet all surfaces completely." +
                                                 " Let air dry. Repeat application weekly or when growth reappears."
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "walls"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "floors"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "table tops"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage

   // Set up Template data.
   CREATE ENTITY mSPLDef.SPLD_Template
   CREATE ENTITY mSPLDef.SPLD_TemplatePanel
   // First Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
   SET CURSOR FIRST mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Directions for Use Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
   FOR EACH mSPLDef.SPLD_DirectionsForUseSection
      INCLUDE mSPLDef.SPLDT_DirectionsForUseSection FROM mSPLDef.SPLD_DirectionsForUseSection
   END

   // Second Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "SN"
   SET CURSOR NEXT mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Third Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "L3"
   SET CURSOR NEXT mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Call the generation routine.
   IssueError( ViewToWindow, 0, 0, "Before call2" )
   GeneratePDF_Label( mSPLDef )

END
*/

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelTemplate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelTemplate( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CancelSubobject( mSPLDef, "SPLD_Template" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelTemplate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptTemplate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptTemplate( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// AcceptSubobject( mSPLDef, "SPLD_Template" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptTemplate: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewTemplatePanel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewTemplatePanel( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CreateTemporalEntity( mSPLDef, "SPLD_TemplatePanel", zPOS_AFTER )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_AFTER, "mSPLDef", "SPLD_TemplatePanel", "NewTemplatePanel: " )
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Hazards"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateTemplatePanel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTemplatePanel( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "UpdateTemplatePanel: " )
   COMMIT mSPLDef

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplatePanel" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplatePanel", "UpdateTemplatePanel: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelTemplatePanel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelTemplatePanel( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CancelSubobject( mSPLDef, "SPLD_TemplatePanel" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelTemplatePanel: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptTemplatePanel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptTemplatePanel( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// AcceptSubobject( mSPLDef, "SPLD_TemplatePanel" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptTemplatePanel: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteTemplatePanel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteTemplatePanel( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   DELETE ENTITY mSPLDef.SPLD_TemplatePanel

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewTemplateBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewTemplateBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CreateTemporalEntity( mSPLDef, "SPLD_TemplateBlock", zPOS_AFTER )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_AFTER, "mSPLDef", "SPLD_TemplateBlock", "NewTemplateBlock: " )
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Hazards"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateTemplateBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTemplateBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "UpdateTemplateBlock: " )
   COMMIT mSPLDef

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplateBlock" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplateBlock", "UpdateTemplateBlock: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelTemplateBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelTemplateBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CancelSubobject( mSPLDef, "SPLD_TemplateBlock" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelTemplateBlock: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptTemplateBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptTemplateBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// AcceptSubobject( mSPLDef, "SPLD_TemplateBlock" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptTemplateBlock: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteTemplateBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteTemplateBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   DELETE ENTITY mSPLDef.SPLD_TemplateBlock

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewTemplateBlockBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewTemplateBlockBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CreateTemporalEntity( mSPLDef, "SPLD_TemplateBlockBlock", zPOS_AFTER )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_AFTER, "mSPLDef", "SPLD_TemplateBlockBlock", "NewTemplateBlockBlock: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateTemplateBlockBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTemplateBlockBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "UpdateTemplateBlockBlock: " )
   COMMIT mSPLDef

// CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplateBlockBlock" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplateBlockBlock", "UpdateTemplateBlockBlock: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelTemplateBlockBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelTemplateBlockBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// CancelSubobject( mSPLDef, "SPLD_TemplateBlockBlock" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelTemplateBlockBlock: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptTemplateBlockBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptTemplateBlockBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

// AcceptSubobject( mSPLDef, "SPLD_TemplateBlockBlock" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptTemplateBlockBlock: " )
   COMMIT mSPLDef

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteTemplateBlockBlock
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteTemplateBlockBlock( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   DELETE ENTITY mSPLDef.SPLD_TemplateBlockBlock

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateTemplateStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTemplateStatement( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateTemplateStatement: " )

   // Position on the real entity in the hierarchical structure.
   // Then, create that entity as temporal and go to the correct window based on type.
   IF mSPLDef.DisplayTemplateStatement.EntityType = "Template"

      // Panel
      SET CURSOR FIRST mSPLDef.SPLD_Template
                 WHERE mSPLDef.SPLD_Template.ID = mSPLDef.DisplayTemplateStatement.EntityID
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplatePanel" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_Template", "UpdateTemplate: " )
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "wSPLD", "TemplateDetail" )
      RETURN 1

   ELSE
   IF mSPLDef.DisplayTemplateStatement.EntityType = "Panel"

      // Panel
      SET CURSOR FIRST mSPLDef.SPLD_TemplatePanel
                 WHERE mSPLDef.SPLD_TemplatePanel.ID = mSPLDef.DisplayTemplateStatement.EntityID
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplatePanel" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplatePanel", "UpdateTemplatePanel: " )
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "wSPLD", "TemplatePanelDetail" )
      RETURN 1

   ELSE
   IF mSPLDef.DisplayTemplateStatement.EntityType = "Block"

      // Block
      SET CURSOR FIRST mSPLDef.SPLD_TemplateBlock WITHIN mSPLDef.SPLD_Template
                 WHERE mSPLDef.SPLD_TemplateBlock.ID = mSPLDef.DisplayTemplateStatement.EntityID
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplateBlock" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplateBlock", "UpdateTemplateBlock: " )
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "wSPLD", "TemplateBlockDetail" )
      RETURN 1

   ELSE
   IF mSPLDef.DisplayTemplateStatement.EntityType = "Section"

      // Section
      SET CURSOR FIRST mSPLDef.SPLD_TemplateBlockBlock WITHIN mSPLDef.SPLD_Template
                 WHERE mSPLDef.SPLD_TemplateBlockBlock.ID = mSPLDef.DisplayTemplateStatement.EntityID
   // CreateTemporalSubobjectVersion( mSPLDef, "SPLD_TemplateBlockBlock" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSPLDef", "SPLD_TemplateBlockBlock", "UpdateTemplateBlockBlock: " )
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "wSPLD", "TemplateBlockBlockDetail" )
      RETURN 1

   ELSE

      MessageSend( ViewToWindow, "", "Update Template Statement",
                   "Cannot update statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END
   END
   END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: StartBrowserWithHTML
//
//    vSubtask    - View to current dialog window (subtask).
//    pchReturnFileName - Return generated file name.
//    nMaxNameLth - Maximum return file name length ... if zero,
//                  the file name will not be returned
//    cpcURL      - Complete URL specification.
//    cpcFileName - Name of the file for which the URL will be
//                  generated.  If the path for this file matches
//                  the path specified in the Zeidon.ini file for
//                  "ExecutableRemoteDocPath", the URL is generated
//                  by simply replacing the path with the value
//                  specified by "ExecutableRemoteDocURL".
//                  Otherwise, it is assumed that the file needs
//                  to be copied to the URL directory first.
//    ulControlFlag -  0 ==> File name is specified.
//                     1 ==> Generate a unique file name.
//                    16 ==> URL is completely specified.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
StartBrowserWithHTML( VIEW ViewToWindow )

   VIEW mSPLDef REGISTERED AS mSPLDef
   STRING ( 512 ) szReturnFileName
   STRING ( 512 ) szFileName

   SysMakeWebFileName( szFileName, ViewToWindow, 0 )
   StartBrowserWindowWithURL( ViewToWindow, szReturnFileName, 512,
                              "", szFileName, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GenerateNewSPLD_Version
//
// Generates a new version of an SPLD from an existing SPLD by following the
// path from the original SPLD to its parent SLC and to the next version of
// that SLC.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GenerateNewSPLD_Version( VIEW ViewToWindow )

   VIEW lSPLDLST   REGISTERED AS lSPLDLST
   VIEW NewSPLD    BASED ON LOD  mSPLDef
   VIEW SourceSPLD BASED ON LOD  mSPLDef
   VIEW SourceSLC  BASED ON LOD  mSubLC
   VIEW ParentSLC  BASED ON LOD  mSubLC   // This is the parent SLC of the SPLD to be created.
   VIEW mTempl     BASED ON LOD  mTempl

   // Build a new SPLD version from an existing SPLD.

   // Activate selected SPLD, which will be source of new SPLD.
   ACTIVATE SourceSPLD WHERE SourceSPLD.SubregPhysicalLabelDef.ID = lSPLDLST.SubregPhysicalLabelDef.ID
   NAME VIEW SourceSPLD "SourceSPLD"

   // Activate Source SLC of source SPLD just activated.
   ACTIVATE SourceSLC WHERE SourceSLC.SubregLabelContent.ID = SourceSPLD.SubregLabelContent.ID
   NAME VIEW SourceSLC "SourceSLC"

   // Activate the next version of the Source SLC, which will become the Parent SLC of new SPLD.
   ACTIVATE ParentSLC WHERE ParentSLC.SubregLabelContent.ID = SourceSLC.SN_SubregLabelContent.ID
   NAME VIEW ParentSLC "ParentSLC"

   // Activate new empty SPLD.
   ACTIVATE NewSPLD EMPTY
   NAME VIEW NewSPLD "NewSPLD"
   CREATE ENTITY NewSPLD.SubregPhysicalLabelDef

   // Build the main part of the SPLD from the Source SPLD.
   BuildSPLD_FromSPLD( NewSPLD, SourceSPLD, ParentSLC )

   // Add the Template subobject to the SPLD from the original SPLD. We will activate mTempl so we
   // can pass the Template ID into the operation.
   ACTIVATE mTempl RootOnly WHERE mTempl.Template.Name = SourceSPLD.SPLD_Template.Name
   NAME VIEW mTempl "mTempl"
   BuildSPLD_Template( NewSPLD, mTempl.Template.ID )

   COMMIT NewSPLD

   // Build Display NewSPLD.
   BuildDisplayStructure( NewSPLD )

   // Reset cursor to beginning for all entties.
   SET CURSOR FIRST NewSPLD.SubregPhysicalLabelDef

   // Rebuild SPLD list.
   GET VIEW lSPLDLST NAMED "lSPLDLST"
   IF RESULT >= 0
      DropObjectInstance( lSPLDLST )
   END

   ACTIVATE lSPLDLST Multiple
   NAME VIEW lSPLDLST "lSPLDLST"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: RemoveDirectionsUsages
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
RemoveDirectionsUsages( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szUsageID

   // For each selected Usage work entitiy, position on the corresponding Usage under Directions for Use and
   // remove it. We will ignore any Directions for Use entries that are selected.
   FOR EACH mSPLDef.DirectionsUsage
      IF mSPLDef.DirectionsUsage.wkSelected = "Y"

         // A work entity with a null UsageID is a Directions for Use entry.
         szUsageID = mSPLDef.DirectionsUsage.UsageID
         IF szUsageID != ""
            SET CURSOR FIRST mSPLDef.SPLD_DirectionsForUseSection WHERE mSPLDef.SPLD_DirectionsForUseSection.ID = mSPLDef.DirectionsUsage.DirectionsSectionID
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 13" )
            END

            SET CURSOR FIRST mSPLDef.SPLD_DirectionsUsage WHERE mSPLDef.SPLD_DirectionsUsage.ID = mSPLDef.DirectionsUsage.UsageID
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 14" )
            END

            EXCLUDE mSPLDef.SPLD_DirectionsUsage
         END
      END
   END

   COMMIT mSPLDef

   // Rebuild work structure for display.
   ShowDirectionsUsages( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: RemoveMarketingUsages
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
RemoveMarketingUsages( VIEW ViewToWindow )

   VIEW mSPLDef  REGISTERED AS mSPLDef
   STRING ( 32 ) szUsageID

   // For each selected Usage work entitiy, position on the corresponding Usage under Marketing for Use and
   // remove it. We will ignore any Marketing for Use entries that are selected.
   FOR EACH mSPLDef.MarketingUsage
      IF mSPLDef.MarketingUsage.wkSelected = "Y"

         // A work entity with a null UsageID is a Marketing for Use entry.
         szUsageID = mSPLDef.MarketingUsage.UsageID
         IF szUsageID != ""
            SET CURSOR FIRST mSPLDef.SPLD_MarketingSection WHERE mSPLDef.SPLD_MarketingSection.ID = mSPLDef.MarketingUsage.MarketingSectionID
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 13" )
            END

            SET CURSOR FIRST mSPLDef.SPLD_MarketingUsage WHERE mSPLDef.SPLD_MarketingUsage.ID = mSPLDef.MarketingUsage.UsageID
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow, 0, 0, "Programming Error 14" )
            END

            EXCLUDE mSPLDef.SPLD_MarketingUsage
         END
      END
   END

   COMMIT mSPLDef

   // Rebuild work structure for display.
   ShowMarketingUsages( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: TestHTML_Generation
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
TestHTML_Generation( VIEW ViewToWindow )

   VIEW mSPLDef BASED ON LOD mSPLDef

   // Test HTML generation agains a test object.

   // Create an initial test object.
   ACTIVATE mSPLDef EMPTY
   NAME VIEW mSPLDef "mSPLDef"
   CREATE ENTITY mSPLDef.SubregPhysicalLabelDef
   mSPLDef.SubregPhysicalLabelDef.Name = "Test1"

   // Set up Marketing example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 1
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "Recommended for use in <AreaOfUse>. Disinfects, cleans, and deodorizes the following hard nonporous inanimate surfaces: <Surface>. " +
                                          "Recommeded for use in: Federally inspected meat and poultry plants as a disinfectant agent for use in all departments. " +
                                          "Food products and packaging materials must be removed from the room or carefully protected. Use product in accordance with its label. " +
                                          "All surfaces must be thoroughly rinsed with potable water."
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "kennels"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "pet shops"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "veterinary clinics"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "life science laboratories"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "floors"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "walls"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "nonmedical metal surfaces,"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "S"
   mSPLDef.SPLD_Usage.Name = "plastic surfaces (such as polypropylene, polystyrene, etc.)"
   INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage

   // Set up 2nd MARKETING example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 2
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "First unnumbered statement."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "1. First numbered statement."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "2. Second numbered statement. We want to test multiple lines, so this statement will go on and on and on until we finally get to at least another line."
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "3. Third numbered statement."

   // Set up 3rd MARKETING example.
   CREATE ENTITY mSPLDef.SPLD_MarketingSection
   mSPLDef.SPLD_MarketingSection.ID = 3
   CREATE ENTITY mSPLDef.SPLD_MarketingStatement
   mSPLDef.SPLD_MarketingStatement.Text = "A multi-purpose, neutral pH, gemicidal detergent and deodorant effective in hardwater up to 400 ppm (calculated as CaCO3) in the presence of a moderate amount of soil."
   FOR EACH mSPLDef.SPLD_Usage
      INCLUDE mSPLDef.SPLD_MarketingUsage FROM mSPLDef.SPLD_Usage
   END

   // Set up DIRECTIONS FOR USE example.
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 1
   mSPLDef.SPLD_DirectionsForUseSection.GeneralUse = "Y"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "It is a violation of Federal law to use this product in a manner inconsistent with its labeling."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "This product is not for use on medical device surfaces."

   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 2
   mSPLDef.SPLD_DirectionsForUseSection.Title = "DISINFECTION / CLEANING / DEODORIZING DIRECTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Remove heavy soil deposits from surface. Then thoroughly wet surface with a use-solution of 1/2 oz. of the concentrate per gallon of water. " +
                                                 "The use-solution can be applied with a cloth, mop, sponge, or coarse spray, or by soaking. " +
                                                 "For sprayer applications, use a coarse spray device.Spray 6-8 inches from the surface, rub with a brush, cloth or sponge. " +
                                                 "Do not breathe spray. Let solution remain on surface for a minimum of 10 minutes. Rinse or allow to air dry. Rinsing of floors is not necessary unless they are to be waxed or polished. "
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Food contact surfaces must be thoroughly rinsed with potable water. This product must not be used to clean the following food contact surfaces: utensils, glassware and dishes."
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Prepare a fresh solution daily or more often if the solution becomes visibly dirty or diluted."

   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 3
   mSPLDef.SPLD_DirectionsForUseSection.Title = "FUNGICIDAL DIRECTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "For use in areas such as locker rooms, dressing rooms, shower and bath areas and exercise facilities follow disinfection directions."

   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseSection
   mSPLDef.SPLD_DirectionsForUseSection.ID = 4
   mSPLDef.SPLD_DirectionsForUseSection.Title = "MILDEWSTATIC INSTRUCTIONS:"
   CREATE ENTITY mSPLDef.SPLD_DirectionsForUseStatement
   mSPLDef.SPLD_DirectionsForUseStatement.Text = "Will effectively control the growth of mold and mildew plus the odors caused by them when applied to hard, nonporous surfaces such as <AreaOfUse>. " +
                                                 "Apply use-solution of 1/2 oz. per gallon of water with a cloth, mop, sponge, or coarse spray. Make sure to wet all surfaces completely." +
                                                 " Let air dry. Repeat application weekly or when growth reappears."
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "walls"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "floors"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage
   CREATE ENTITY mSPLDef.SPLD_Usage
   mSPLDef.SPLD_Usage.UsageType = "U"
   mSPLDef.SPLD_Usage.Name = "table tops"
//   INCLUDE mSPLDef.SPLD_DirectionsForUseUsage FROM mSPLDef.SPLD_Usage

   // Set up Template data.
   CREATE ENTITY mSPLDef.SPLD_Template
   CREATE ENTITY mSPLDef.SPLD_TemplatePanel

   // First Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
   SET CURSOR FIRST mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Directions for Use Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "DirectionsForUse"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "PU"
   FOR EACH mSPLDef.SPLD_DirectionsForUseSection
      INCLUDE mSPLDef.SPLDT_DirectionsForUseSection FROM mSPLDef.SPLD_DirectionsForUseSection
   END

   // Second Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.UsageSeparatorCharacters = ", "
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "SN"
   SET CURSOR NEXT mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Third Marketing Section
   CREATE ENTITY mSPLDef.SPLD_TemplateBlock
   CREATE ENTITY mSPLDef.SPLD_TemplateBlockBlock
   mSPLDef.SPLD_TemplateBlockBlock.TSectionType = "Marketing"
   mSPLDef.SPLD_TemplateBlockBlock.StatementFormat = "L3"
   SET CURSOR NEXT mSPLDef.SPLD_MarketingSection
   INCLUDE mSPLDef.SPLDT_MarketingSection FROM mSPLDef.SPLD_MarketingSection

   // Call the generation routine.
   IssueError( ViewToWindow, 0, 0, "Before call1" )
   GeneratePDF_Label( mSPLDef )

//</body>
//<%
//   strHTML_FileName = mSPLDef.MakeWebFileName( strSessionId, 2 ) + ".html";
//%>
////   <iframe src="<%=strHTML_FileName%>"></iframe>
//     <iframe src="C:\\Program Files\\Apache Group\\Tomcat 5.5\\webapps\\ROOT\\ePamms\\HTML_Temp.html"></iframe>

END

/*
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubProd BASED ON LOD  mSubProd

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   ACTIVATE mSubProd EMPTY
   NAME VIEW mSubProd "mSubProd"
   CreateEntity( mSubProd, "SubregProduct", zPOS_FIRST )  // want latest version first
   CreateEntity( mSubProd, "SubregLabelContent", zPOS_FIRST )
   wWebXfer.Root.AttemptProductName = ""
   wWebXfer.Root.AttemptProductNumber = ""
   wWebXfer.Root.AttemptContentVersion = "Please specify content version"
   SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewSubregProduct( VIEW ViewToWindow )

   VIEW mSubProd REGISTERED AS mSubProd

   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewSubregProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1
      MessageSend( ViewToWindow, "", "New Subregistrant Product",
                   "The Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSubreg, "SubregProduct", "Name", lControl,
                          szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Subregistrant Product",
                      "The Product Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1
      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSubreg, "SubregProduct", "Number", lControl,
                          szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product",
                      "The Master Product Number must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END
   // Ensure label version is not blank and is unique.
   szVersion = wWebXfer.Root.AttemptContentVersion
   lVersionLth = zGetStringLen( szVersion )
   TraceLineS( "Product Version: ", szVersion )
   TraceLineI( "Product Version Length: ", lVersionLth )
   IF lVersionLth < 1
      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Label Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
// ELSE ... it's got to be unique since the product is new
   // lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   // IF SetEntityCursor( mSubProd, "SubregLabelContent", "Version", lControl,
   //                     szVersion, "", "", 0, "", "" ) >= zCURSOR_SET
   //    MessageSend( ViewToWindow, "", "New Master Product",
   //                 "The Master Label Version must be unique.",
   //                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   //    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   //    RETURN 2
   // END
   END

   mSubProd.SubregProduct.Name = szProductName
   mSubProd.SubregProduct.Number = szProductNumber
   mSubProd.SubregLabelContent.Version = szVersion
   IncludeSubobjectFromSubobject( mSubProd, "PrimaryRegistrant",
                                  mSubreg, "Subregistrant", zPOS_BEFORE )
   AcceptSubobject( mSubProd, "SubregProduct" )
   COMMIT mSubProd
   DropObjectInstance( mSubProd )
   DropObjectInstance( mSubreg )

END
*/

