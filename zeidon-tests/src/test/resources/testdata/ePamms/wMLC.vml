/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright © 2007 - 2012 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    wMLC          - Primary Registrant Master Label Content operations
// FILE:         wMLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: fnInitListMasterProducts
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
fnInitListMasterProducts( VIEW ViewToWindow, SHORT bMasProd )

   VIEW lPrimReg REGISTERED AS lPrimReg
   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd
   INTEGER lProductID
   INTEGER lID
   SHORT   nRC

   TraceLineS( "ZeidonOperation: ", "fnInitListMasterProducts" )

// lProductID = 0  done by VML generated initializations
   GET VIEW mPrimReg NAMED "mPrimReg"
   GET VIEW mMasProd NAMED "mMasProd"
   IF mPrimReg != 0
      nRC = CheckExistenceOfEntity( mPrimReg, "MasterProduct" )
      IF nRC = 0
         lProductID = mPrimReg.MasterProduct.ID
      END

      DropObjectInstance( mPrimReg )
   ELSE
      IF mMasProd != 0
         nRC = CheckExistenceOfEntity( mMasProd, "MasterProduct" )
         IF nRC = 0
            lProductID = mMasProd.MasterProduct.ID
         END
      END
   END

   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   ACTIVATE mPrimReg WHERE mPrimReg.PrimaryRegistrant.ID = lPrimReg.PrimaryRegistrant.ID
   NAME VIEW mPrimReg "mPrimReg"
   IF bMasProd != 0
      SET CURSOR FIRST mPrimReg.MasterProduct
          WHERE mPrimReg.MasterProduct.ID = lProductID
   END

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitListMasterProducts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitListMasterProducts( VIEW ViewToWindow )

   fnInitListMasterProducts( ViewToWindow, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewMasterProduct( VIEW ViewToWindow )

   // nothing to do here

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateMasterProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterProductForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterProductForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd BASED ON LOD  mMasProd

   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   ACTIVATE mMasProd EMPTY
   NAME VIEW mMasProd "mMasProd"

// CreateTemporalEntity( mMasProd, "MasterProduct", zPOS_FIRST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_FIRST, "mMasProd", "MasterProduct", "InitMasterProductForInsert: " )

   mMasProd.MasterProduct.ChemicalFamily = "DQ" // Quat Disinfectant
   wWebXfer.Root.AttemptProductName = ""
   wWebXfer.Root.AttemptProductNumber = ""
// wWebXfer.Root.AttemptContentVersion = "Please specify content version"

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterProductForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterProductForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd

   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = mPrimReg.MasterProduct.ID
   NAME VIEW mMasProd "mMasProd"

   wWebXfer.Root.AttemptProductName = mMasProd.MasterProduct.Name
   wWebXfer.Root.AttemptProductNumber = mMasProd.MasterProduct.Number
// wWebXfer.Root.AttemptContentVersion = mMasProd.MasterLabelContent.Version

// CreateTemporalSubobjectVersion( mMasProd, "MasterProduct" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasProd", "MasterProduct", "InitMasterProductForUpdate: " )
   wWebXfer.Root.CurrentContentType = ""
   OrderEntityForView( mMasProd, "MasterLabelContent", "CreatedDateTime D" )

// wWebXfer.Root.Banner1 = qOrganiz.Organization.dLoginUserName
// wWebXfer.Root.Banner2 = qOrganiz.Organization.dLoginUserRole
   wWebXfer.Root.Banner3 = ""
   wWebXfer.Root.Banner4 = ""
   wWebXfer.Root.Banner5 = ""
   wWebXfer.Root.Banner6 = ""

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewMasterProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd REGISTERED AS mMasProd
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   INTEGER Ignore
   SHORT   nRC

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mPrimReg, "MasterProduct", "Name", lControl,
                          szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product",
                      "The Master Product Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1

      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mPrimReg, "MasterProduct", "Number", lControl,
                          szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product",
                      "The Master Product Number must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END
/*
   // Ensure label version is not blank and is unique.
   szVersion = wWebXfer.Root.AttemptContentVersion
   lVersionLth = zGetStringLen( szVersion )
   TraceLineS( "Product Version: ", szVersion )
   TraceLineI( "Product Version Length: ", lVersionLth )
   IF lVersionLth < 1
      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Label Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
// ELSE ... it's got to be unique since the product is new
   // lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   // IF SetEntityCursor( mMasProd, "MasterLabelContent", "Version", lControl,
   //                     szVersion, "", "", 0, "", "" ) >= zCURSOR_SET
   //    MessageSend( ViewToWindow, "", "New Master Product",
   //                 "The Master Label Version must be unique.",
   //                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   //    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   //    RETURN 2
   // END
   END
*/
   mMasProd.MasterProduct.Name = szProductName
   mMasProd.MasterProduct.Number = szProductNumber
// mMasProd.MasterLabelContent.Version = szVersion
   IncludeSubobjectFromSubobject( mMasProd, "PrimaryRegistrant",
                                  mPrimReg, "PrimaryRegistrant", zPOS_BEFORE )
// AcceptSubobject( mMasProd, "MasterProduct" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptNewMasterProduct" )
   COMMIT mMasProd

   fnInitListMasterProducts( ViewToWindow, 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateMasterProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd REGISTERED AS mMasProd
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   INTEGER Ignore
   SHORT   nRC

   IF mMasProd = 0
      RETURN
   END

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF szProductName != mMasProd.MasterProduct.Name
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mPrimReg, "MasterProduct", "Name", lControl,
                             szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "New Master Product",
                         "The Master Product Name must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2

         END
      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1

      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF szProductNumber != mMasProd.MasterProduct.Number
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mPrimReg, "MasterProduct", "Number", lControl,
                             szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "New Master Product",
                         "The Master Product Number must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2

         END
      END
   END

   mMasProd.MasterProduct.Name = szProductName
   mMasProd.MasterProduct.Number = szProductNumber
// mMasProd.MasterLabelContent.Version = szVersion
// AcceptSubobject( mMasProd, "MasterProduct" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptUpdateMasterProduct" )
   COMMIT mMasProd

   fnInitListMasterProducts( ViewToWindow, 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewMasterProduct( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd

   IF mMasProd != 0
   // CancelSubobject( mMasProd, "MasterProduct" )
      CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewMasterProduct: " )
      DropObjectInstance( mMasProd )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateMasterProduct( VIEW ViewToWindow )

   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd REGISTERED AS mMasProd

   IF mMasProd != 0
   // CancelSubobject( mMasProd, "MasterProduct" )
      CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewMasterProduct: " )
      DropObjectInstance( mMasProd )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMasterProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterProductForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterProductForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMasterProductForDelete" )
   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = mPrimReg.MasterProduct.ID
   NAME VIEW mMasProd "mMasProd"

   wWebXfer.Root.AttemptProductName = mMasProd.MasterProduct.Name
   wWebXfer.Root.AttemptProductNumber = mMasProd.MasterProduct.Number
// wWebXfer.Root.AttemptContentVersion = mMasProd.MasterLabelContent.Version
   wWebXfer.Root.CurrentContentType = ""

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterProduct( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd

   DropObjectInstance( mMasProd )

// // We don't think there is anything to do here ... just get back to list
// // after accepting the master product.
// AcceptUpdateMasterProduct( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterProduct( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd
   VIEW mSubProd BASED ON LOD  mSubProd
   INTEGER lID

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   GET VIEW mPrimReg NAMED "mPrimReg"
   lID = mPrimReg.MasterProduct.ID

   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lID
   IF mMasProd.SubregProduct EXISTS

      IF mMasProd.MasterLabelContent EXISTS
         MessageSend( ViewToWindow, "", "Delete Master Product",
                      "The Master Product has associated Subregistrant Products.  It cannot be deleted",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      ELSE
         ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mMasProd.SubregProduct.ID
         DELETE ENTITY mSubProd.SubregProduct
         COMMIT mSubProd
         DropObjectInstance( mSubProd )

         // Reactivate mMasProd since the restricted delete entity should be gone
         DropObjectInstance( mMasProd )
         ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lID
      END
   END

   DELETE ENTITY mMasProd.MasterProduct
   COMMIT mMasProd
   DropObjectInstance( mMasProd )

   fnInitListMasterProducts( ViewToWindow, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasProd BASED ON LOD  mMasProd
   INTEGER lID
   SHORT   nRC

   GET VIEW mMasProd NAMED "mMasProd"
   lID = mMasProd.MasterProduct.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateMasterProduct( ViewToWindow )
   IF nRC = 0
      ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lID
      NAME VIEW mMasProd "mMasProd"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateMasterLabelContent( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd
   STRING (  50  ) szUserId
   INTEGER lMasterProductID
   INTEGER lMasterLabelContentID
   SHORT   nRC

   GET VIEW mMasProd NAMED "mMasProd"

   SfGetUserIdForTask( ViewToWindow, szUserId )
   IF szUserId != "Admin" // let admin go through without question ... javascript checked to be sure admin wanted to update Finalized MLC
      IF mMasProd != 0 AND mMasProd.MasterLabelContent.Finalized = "Y"

         MessageSend( ViewToWindow, "", "Update Master Label Content",
                      "The Master Label Content has been Finalized and cannot be updated.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   lMasterProductID = mMasProd.MasterProduct.ID
   lMasterLabelContentID = mMasProd.MasterLabelContent.ID

   // We have to ensure the Product is in good shape before we go on!
   nRC = AcceptUpdateMasterProduct( ViewToWindow )
   IF nRC = 0

   // GET VIEW mMasProd NAMED "mMasProd"  // mMasProd has been dropped by AcceptUpdateMasterProduct
   // IF mMasProd != 0
   //    DropObjectInstance( mMasProd )
   // END

      GET VIEW mPrimReg NAMED "mPrimReg"
      IF mPrimReg != 0
         SET CURSOR FIRST mPrimReg.MasterProduct
             WHERE mPrimReg.MasterProduct.ID = lMasterProductID
      // TraceLineS( "mPrimReg: ", "EditMasterLabelContent" )
      // DisplayEntityInstance( mPrimReg, "MasterProduct" )
      END

      ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lMasterProductID
      NAME VIEW mMasProd "mMasProd"
      SET CURSOR FIRST mMasProd.MasterLabelContent
          WHERE mMasProd.MasterLabelContent.ID = lMasterLabelContentID

      SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditMasterLabelVersionData
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditMasterLabelVersionData( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditMasterLabelVersionData: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = ""
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterLabelContentForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterLabelContentForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   BASED ON LOD  mMasLC
   VIEW mMasProd BASED ON LOD  mMasProd

   GET VIEW mMasProd NAMED "mMasProd"
   wWebXfer.Root.AttemptContentVersion = ""

   ACTIVATE mMasLC EMPTY
   NAME VIEW mMasLC "mMasLC"

   // We need to create a new MasterLabelContent entity.
// CreateTemporalEntity( mMasLC, "MasterLabelContent", zPOS_FIRST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_FIRST, "mMasLC", "MasterLabelContent", "InitMasterLabelContentForInsert: " )
   mMasLC.MasterLabelContent.Finalized = "N"
   mMasLC.MasterLabelContent.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
   mMasLC.MasterLabelContent.RevisionDate = wWebXfer.Root.dCurrentDateTime
   wWebXfer.Root.CurrentContentType = ""

   IncludeSubobjectFromSubobject( mMasLC, "MasterProduct",
                                  mMasProd, "MasterProduct", zPOS_BEFORE )
   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterLabelContentForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterLabelContentForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC

   GET VIEW mMasLC NAMED "mMasLC"
   IF mMasLC != 0
      DropObjectInstance( mMasLC )
   END

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLC"

   wWebXfer.Root.AttemptContentVersion = mMasLC.MasterLabelContent.Version

   // We are going to update the existing MasterLabelContent entity.
// CreateTemporalSubobjectVersion( mMasLC, "MasterLabelContent" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MasterLabelContent", "InitMasterLabelContentForUpdate: " )
   IF mMasLC.MasterLabelContent.CreatedDateTime = ""
      mMasLC.MasterLabelContent.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
   END

   wWebXfer.Root.CurrentContentType = ""

// wWebXfer.Root.Banner1 = qOrganiz.Organization.dLoginUserName
// wWebXfer.Root.Banner2 = qOrganiz.Organization.dLoginUserRole
   wWebXfer.Root.Banner3 = ""
   wWebXfer.Root.Banner4 = mMasProd.MasterProduct.dContentVersionRevDate
   wWebXfer.Root.Banner5 = mMasProd.MasterProduct.dDescription
   wWebXfer.Root.Banner6 = ""

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterLabelContentForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterLabelContentForDelete( VIEW ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewMasterLabelContent( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mPrimReg BASED ON LOD  mPrimReg
   STRING (  50  ) szContentVersion
   INTEGER lContentVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szContentVersion = wWebXfer.Root.AttemptContentVersion
   lContentVersionLth = zGetStringLen( szContentVersion )
   TraceLineS( "Product Content Name: ", szContentVersion )
   TraceLineI( "Product Content Length: ", lContentVersionLth )
   IF lContentVersionLth < 1

      MessageSend( ViewToWindow, "", "New Master Product Content",
                   "The Master Product Content Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mMasLC, "MasterLabelContent", "Version", lControl,
                          szContentVersion, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product Content",
                      "The Master Product Content Version must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END

   mMasLC.MasterLabelContent.RevisionDate = wWebXfer.Root.dCurrentDateTime
   mMasLC.MasterLabelContent.Version = szContentVersion
// AcceptSubobject( mMasLC, "MasterLabelContent" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptNewMasterLabelContent: " )
   COMMIT mMasLC

   SetMatchingAttributesByName( mMasProd, "MasterLabelContent",
                                mMasLC, "MasterLabelContent", zSET_ALL )
   COMMIT mMasProd

   ACTIVATE mPrimReg WHERE mPrimReg.PrimaryRegistrant.ID = mMasLC.PrimaryRegistrant.ID
   NAME VIEW mPrimReg "mPrimReg"
   SET CURSOR FIRST mPrimReg.MasterLabelContent
       WHERE mPrimReg.MasterLabelContent.ID = mMasLC.MasterLabelContent.ID
   DropObjectInstance( mMasLC )
   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateMasterLabelContent( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mPrimReg BASED ON LOD  mPrimReg
   STRING (  50  ) szContentVersion
   INTEGER lContentVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szContentVersion = wWebXfer.Root.AttemptContentVersion
   lContentVersionLth = zGetStringLen( szContentVersion )
   TraceLineS( "Product Content Version: ", szContentVersion )
   TraceLineI( "Product Version Length: ", lContentVersionLth )
   IF lContentVersionLth < 1

      MessageSend( ViewToWindow, "", "Update Master Product Content",
                   "The Master Product Content Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF mMasLC.MasterLabelContent.Version != szContentVersion

         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mMasLC, "MasterLabelContent", "Version", lControl,
                             szContentVersion, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Master Product Content",
                         "The Master Product Content Version must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2

         END

         mMasLC.MasterLabelContent.Version = szContentVersion

      END
   END

// AcceptSubobject( mMasLC, "MasterLabelContent" )
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptUpdateMasterLabelContent: " )
   COMMIT mMasLC

   SetMatchingAttributesByName( mMasProd, "MasterLabelContent",
                                mMasLC, "MasterLabelContent", zSET_ALL )
   COMMIT mMasProd

   GET VIEW mPrimReg NAMED "mPrimReg"
   IF mPrimReg != 0
      DropObjectInstance( mPrimReg )
   END

   ACTIVATE mPrimReg WHERE mPrimReg.PrimaryRegistrant.ID = mMasLC.PrimaryRegistrant.ID
   NAME VIEW mPrimReg "mPrimReg"
   SET CURSOR FIRST mPrimReg.MasterProduct
       WHERE mPrimReg.MasterProduct.ID = mMasLC.MasterProduct.ID
   SET CURSOR FIRST mPrimReg.MasterLabelContent
       WHERE mPrimReg.MasterLabelContent.ID = mMasLC.MasterLabelContent.ID
   DropObjectInstance( mMasLC )

END
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mPrimReg BASED ON LOD  mPrimReg
   INTEGER  lPrimaryRegistrantID
   INTEGER  lMasterProductID
   INTEGER  lMasterLabelContentID

   lPrimaryRegistrantID = mMasLC.PrimaryRegistrant.ID
   lMasterProductID = mMasLC.MasterProduct.ID
   lMasterLabelContentID = mMasLC.MasterLabelContent.ID
// CancelSubobject( mMasLC, "MasterLabelContent" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewMasterLabelContent: " )

   ACTIVATE mPrimReg WHERE mPrimReg.PrimaryRegistrant.ID = lPrimaryRegistrantID
   NAME VIEW mPrimReg "mPrimReg"
   SET CURSOR FIRST mPrimReg.MasterProduct
       WHERE mPrimReg.MasterProduct.ID = lMasterProductID
   SET CURSOR FIRST mPrimReg.MasterLabelContent
       WHERE mPrimReg.MasterLabelContent.ID = lMasterLabelContentID
   DropObjectInstance( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateMasterLabelContent( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasLC   REGISTERED AS mMasLC
   INTEGER  lPrimaryRegistrantID
   INTEGER  lMasterProductID
   INTEGER  lMasterLabelContentID

   lPrimaryRegistrantID = mMasLC.PrimaryRegistrant.ID
   lMasterProductID = mMasLC.MasterProduct.ID
   lMasterLabelContentID = mMasLC.MasterLabelContent.ID
   CancelSubobject( mMasLC, "MasterLabelContent" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelUpdateMasterLabelContent: " )

   ACTIVATE mPrimReg WHERE mPrimReg.PrimaryRegistrant.ID = lPrimaryRegistrantID
   NAME VIEW mPrimReg "mPrimReg"
   SET CURSOR FIRST mPrimReg.MasterProduct
       WHERE mPrimReg.MasterProduct.ID = lMasterProductID
   SET CURSOR FIRST mPrimReg.MasterLabelContent
       WHERE mPrimReg.MasterLabelContent.ID = lMasterLabelContentID
   DropObjectInstance( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasProd BASED ON LOD  mMasProd
   INTEGER lMasterProductID
   INTEGER lMasterLabelContentID
   SHORT   nRC

   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0 AND mMasProd.MasterLabelContent.Finalized = "Y"
      MessageSend( ViewToWindow, "", "Update Master Label Content",
                   "The Master Label Content has been Finalized and cannot be deleted.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   lMasterProductID = mMasProd.MasterProduct.ID
   lMasterLabelContentID = mMasProd.MasterLabelContent.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateMasterProduct( ViewToWindow )
   IF nRC = 0
      AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "DeleteMasterLabelContent: " )
      fnInitListMasterProducts( ViewToWindow, 0 )

      GET VIEW mMasProd NAMED "mMasProd"
      IF mMasProd != 0
         DropObjectInstance( mMasProd )
      END

      ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lMasterProductID
      NAME VIEW mMasProd "mMasProd"
      SET CURSOR FIRST mMasProd.MasterLabelContent
          WHERE mMasProd.MasterLabelContent.ID = lMasterLabelContentID
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We don't think there's much to do here ... just get back to Master Product update.
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMasterLabelContent: " )
   DropObjectInstance( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMasterLabelContent: " )
   DELETE ENTITY mMasLC.MasterLabelContent
   COMMIT mMasLC
   DropObjectInstance( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DesignMasterLabel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DesignMasterLabel( VIEW ViewToWindow )

   // Don't need to do anything except have this OPERATION: to cause
   // positioning code to be done in the JSP.

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterProductUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterProductUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mTempReg BASED ON LOD  mPrimReg
   INTEGER lMove

   CreateViewFromView( mTempReg, mPrimReg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempReg.MasterProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "MasterProduct",
                  mPrimReg, "MasterProduct",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempReg )

   // We now accept the Master Label to maintain order!
   COMMIT mPrimReg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterProductDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterProductDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mTempReg BASED ON LOD  mPrimReg
   INTEGER lMove

   CreateViewFromView( mTempReg, mPrimReg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempReg.MasterProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "MasterProduct",
                  mPrimReg, "MasterProduct",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempReg )

   // We now accept the Master Label to maintain order!
   COMMIT mPrimReg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupDirectionsWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupDirectionsWorkEntities( VIEW mMasLC )

   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to traverse M_DirectionsUsageOrdering entities and delete the work sub-entities.
   FOR EACH mTempLC.M_DirectionsUsageOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempLC.M_DirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mTempLC.M_DirectionsUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadDirectionsUsageList
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadDirectionsUsageList( VIEW ViewToWindow,
                         VIEW mMasLC_In BASED ON LOD mMasLC )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   BASED ON LOD  mMasLC 
   VIEW mPosLC   BASED ON LOD  mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupDirectionsWorkEntities( mMasLC_In )

   CreateViewFromView( mPosLC, mMasLC_In )
   NAME VIEW mPosLC "mPosLC"
   CreateViewFromView( mTempLC, mMasLC_In )
   NAME VIEW mTempLC "mTempLC"
   CreateViewFromView( mMasLC, mMasLC_In )
   NAME VIEW mMasLC "mMasLC1"

   // Get position on included M_DirectionsUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosLC, "M_DirectionsUsageOrdering", "" )

   // Mark included M_DirectionsUsage entities as "selected" and include M_Usage not
   // already included into the M_DirectionsUsage entity and mark as "not selected".
   FOR EACH mMasLC.M_Usage

      lID = mMasLC.M_Usage.ID
      SET CURSOR FIRST mTempLC.M_DirectionsUsage WITHIN mTempLC.M_DirectionsForUseSection
                                                 WHERE mTempLC.M_DirectionsUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosLC.M_DirectionsUsage WITHIN mPosLC.M_DirectionsForUseSection
                                                   WHERE mPosLC.M_DirectionsUsage.ID = lID
         mPosLC.M_DirectionsUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosLC, "M_DirectionsUsageOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosLC, "M_DirectionsUsage",
                                        mMasLC, "M_Usage", zPOS_NEXT )
         mPosLC.M_DirectionsUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mMasLC.M_Usage.ClaimsClassification
         CreateEntity( mPosLC, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosLC, "DirectionsSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosLC, "DirectionsAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosLC, "DirectionsAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid DirectionsUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosLC )
   DropView( mTempLC )
   DropView( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditDirectionsUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditDirectionsUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   IF mMasLC.M_DirectionsForUseSection EXISTS
      IF MiEntityVersioned( mMasLC, "M_DirectionsForUseSection" ) = 0
      // CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseSection", "InitDirectionsUseSection1: " )
      END
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mMasLC, "M_DirectionsForUseSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_DirectionsForUseSection", "InitDirectionsUseSection2: " )
      mMasLC.M_DirectionsForUseSection.BoldItalic = "R"
   END

   LoadDirectionsUsageList( ViewToWindow, mMasLC )
   wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   IF mMasLC.M_Usage DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Update Master Label Content",
                   "Organism Claims, Types of Surfaces and Areas of Use should be set up before Directions of Use.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END

   wWebXfer.Root.AttemptSectionName = ""

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewDirectionsUseSect: " )

   // We need to create a new M_DirectionsForUseSection entity.
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_DirectionsForUseSection", "AddNewDirectionsUseSect: " )
   mMasLC.M_DirectionsForUseSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_DirectionsForUseSection.Title

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_DirectionsForUseSection.Title

   // We need to update the existing M_DirectionsForUseSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseSection", "InitDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   CleanupDirectionsWorkEntities( mMasLC )

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to exclude M_DirectionsUsage entities that are not selected.  In
   // the new structure, we need to traverse M_DirectionsUsageOrdering entities
   // and delete the work sub-entities.
   FOR EACH mTempLC.M_DirectionsUsageOrdering

      IF mTempLC.M_DirectionsUsage.wkSelected != "Y"
      // ExcludeEntity( mTempLC, "M_DirectionsUsage", zREPOS_NONE )
         DeleteEntity( mTempLC, "M_DirectionsUsageOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempLC )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseSect: " )
   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0
      AddNewDirectionsUseSect( ViewToWindow )
   ELSE
   // MessageSend( ViewToWindow, "", "Save And Add New DirectionsUse Section",
   //              "Error saving DirectionsUse section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NextDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextDirectionsUseSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_NEXT + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mMasLC, "M_DirectionsForUseSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Next Directions For Use Section",
                   "There is not a next directions for use section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mMasLC.M_DirectionsForUseSection.ID
      nRC = AcceptDirectionsUseSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection
          WHERE mMasLC.M_DirectionsForUseSection.ID = lID
      SET CURSOR NEXT mMasLC.M_DirectionsForUseSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseSection", "NextDirectionsUseSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Next Directions For Use Section",
   //              "Error saving directions for use section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: PreviousDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousDirectionsUseSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_PREV + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mMasLC, "M_DirectionsForUseSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Previous Directions For Use Section",
                   "There is not a previous directions for use section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mMasLC.M_DirectionsForUseSection.ID
      nRC = AcceptDirectionsUseSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection
          WHERE mMasLC.M_DirectionsForUseSection.ID = lID
      SET CURSOR PREVIOUS mMasLC.M_DirectionsForUseSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseSection", "PreviousDirectionsUseSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Previous Directions For Use Section",
   //              "Error saving directions for use section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionsUseSect: " )
   DELETE ENTITY mMasLC.M_DirectionsForUseSection
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   SHORT nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateDirectionsUseStmt: " )
   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0

      // We need to update the existing M_DirectionsForUseStatement entity.
   // CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseStatement", "SelectDirectionsUseStmtForUpdate: " )
      wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewDirectionsUseStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewDirectionsUseStmt: " )

   // We need to create a new M_DirectionsForUseStatement entity.
// CreateTemporalEntity( mMasLC, "M_DirectionsForUseStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_DirectionsForUseStatement", "AddNewDirectionsUseStmt: " )
   mMasLC.M_DirectionsForUseStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseStmtForUpdate: " )

   // We need to update an M_DirectionsForUseStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_DirectionsForUseStatement", "InitDirectionsUseStmtForUpdate: " )
   IF mMasLC.M_DirectionsForUseStatement.NotForUseType = ""
      mMasLC.M_DirectionsForUseStatement.NotForUseType = "NA"
   END

   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseStmt( ViewToWindow )
   IF nRC = 0
      AddNewDirectionsUseStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Directions for Use Statement",
                   "Error saving Directions for Use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForDelete( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseSect( ViewToWindow )
   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionsUseStmt: " )
   DELETE ENTITY mMasLC.M_DirectionsForUseStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_DirectionsForUseSection",
                  mMasLC, "M_DirectionsForUseSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_DirectionsForUseSection",
                  mMasLC, "M_DirectionsForUseSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove
   SHORT   nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtUp: " )
   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
      lMove = wWebXfer.Root.MoveIncrement
      IF lMove <= 0
         lMove = 1
      END

      LOOP WHILE lMove > 0
         SET CURSOR PREVIOUS mTempLC.M_DirectionsForUseStatement
         lMove = lMove - 1
      END

      MoveSubobject( mTempLC, "M_DirectionsForUseStatement",
                     mMasLC, "M_DirectionsForUseStatement",
                     zPOS_PREV, zREPOS_PREV )
      DropView( mTempLC )

      // We now commit the Master Label Content to maintain order!
      COMMIT mMasLC

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove
   SHORT   nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtDown: " )
   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
      lMove = wWebXfer.Root.MoveIncrement
      IF lMove <= 0
         lMove = 1
      END

      LOOP WHILE lMove > 0
         SET CURSOR NEXT mTempLC.M_DirectionsForUseStatement
         lMove = lMove - 1
      END


      MoveSubobject( mTempLC, "M_DirectionsForUseStatement",
                     mMasLC, "M_DirectionsForUseStatement",
                     zPOS_NEXT, zREPOS_NEXT )
      DropView( mTempLC )

      // We now commit the Master Label Content to maintain order!
      COMMIT mMasLC

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditPrecautionarySect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditPrecautionarySect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionarySect: " )

   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "P" // Precautionary
   IF RESULT < 0
      // We get here the first time into the section ... need to create Precautionary Section entity.
   // CreateEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitPrecautionarySect: " )
      mMasLC.M_GeneralSection.SectionType = "P" // Precautionary
      mMasLC.M_GeneralSection.BoldItalic = "R"
   ELSE
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitPrecautionarySect: " )
   END

   // Guarantee we maintain position in mMasLC.
   CreateViewFromView( mTempLC, mMasLC )
// LOOP WHILE mTempLC.MI_PrecautionarySection EXISTS
//    ExcludeEntity( mTempLC, "MI_PrecautionarySection", zREPOS_NONE )
// END

   SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_PrecautionarySection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   END

   SET CURSOR FIRST mTempLC.MI_HazardSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_HazardSection
   END

   SET CURSOR FIRST mTempLC.MI_FirstAidSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_FirstAidSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_FirstAidSection
   END

   FOR EACH mTempLC.M_GeneralSection
      IF mTempLC.M_GeneralSection.SectionType = "P" // Precautionary
         IncludeSubobjectFromSubobject( mTempLC, "MI_PrecautionarySection",
                                        mTempLC, "M_GeneralSection", zPOS_LAST )
      // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MI_PrecautionarySection", "InitPrecautionarySect: " )
      END
   END
   DropView( mTempLC )

   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_PrecautionarySection entity.
// CreateTemporalEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitPrecautionarySectForInsert: " )
   mMasLC.M_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_GeneralSection.Title

   // We need to update the existing M_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitPrecautionarySectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionarySect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionarySect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionarySect: " )

   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"
   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdatePrecautionaryStmt: " )

   // We need to update the existing M_PrecautionarySection entity.  We have
   // position on the M_PrecautionaryStatement, but need to get position on
   // the M_GeneralStatement that corresponds to the M_PrecautionaryStatement.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_PrecautionaryStatement", "" )
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralStatement", "UpdatePrecautionaryStmt: " )
   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForInsert: " )

   // We need to create a new M_GeneralStatement entity.
// CreateTemporalEntity( mMasLC, "M_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralStatement", "InitPrecautionaryStmtForInsert: " )
   mMasLC.M_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "P" // "Precautionary"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update Precautionary Statement",
                   "The Precautionary Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForUpdate: " )

   // We need to update an M_GeneralStatement entity.
   TraceLineS( "InitPrecautionaryStmtForUpdate: ", "M_GeneralStatement" )
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralStatement", "InitPrecautionaryStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionaryStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionaryStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_PrecautionaryStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeletePrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeletePrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeletePrecautionaryStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeletePrecautionaryStmt: " )
   DELETE ENTITY mMasLC.M_GeneralStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardContent( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardContent: " )

   SET CURSOR FIRST mMasLC.MI_HazardSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mMasLC, "MI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mMasLC.MI_HazardSection
   END

   FOR EACH mMasLC.M_GeneralSection
      IF mMasLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
         IncludeSubobjectFromSubobject( mMasLC, "MI_HazardSection",
                                        mMasLC, "M_GeneralSection", zPOS_LAST )
      END
   END

//?CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MasterLabelContent", "InitHazardContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardSect: " )
/* We have already achieved position on the correct Hazard section!!!
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
   IF RESULT < 0
      // We get here the first time into the section ... need to create Environmental/Physical Hazard Section entity.
   // CreateEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitHazardSect: " )
      mMasLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
      mMasLC.M_GeneralSection.BoldItalic = "R"
   ELSE
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitHazardSect: " )
   END
*/
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitHazardSect: " )

   // Guarantee we maintain position in mMasLC.
   CreateViewFromView( mTempLC, mMasLC )
// LOOP WHILE mTempLC.MI_HazardSection EXISTS
//    ExcludeEntity( mTempLC, "MI_HazardSection", zREPOS_NONE )
// END

   SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_PrecautionarySection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   END

   SET CURSOR FIRST mTempLC.MI_HazardSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_HazardSection
   END

   SET CURSOR FIRST mTempLC.MI_FirstAidSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_FirstAidSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_FirstAidSection
   END

   FOR EACH mTempLC.M_GeneralSection
      IF mTempLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
         IncludeSubobjectFromSubobject( mTempLC, "MI_HazardSection",
                                        mTempLC, "M_GeneralSection", zPOS_LAST )
      // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MI_HazardSection", "InitHazardSect: " )
      END
   END
   DropView( mTempLC )

   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardSectForDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardSectForDelete: " )
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralSection", mMasLC, "MI_HazardSection", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardSectForUpdate: " )
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralSection", mMasLC, "MI_HazardSection", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardSectForInsert: " )
   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_GeneralSection entity.
// CreateTemporalEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitHazardSectForInsert: " )
   mMasLC.M_GeneralSection.BoldItalic = "R"
   mMasLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardSectForUpdate: " )
   wWebXfer.Root.AttemptSectionName = mMasLC.M_GeneralSection.Title

   // We need to update the existing M_GeneralSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitHazardSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardSect: " )

   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"
   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteHazardSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteHazardSect: " )
   DELETE ENTITY mMasLC.M_GeneralSection
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.MI_HazardSection
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralSection", mMasLC, "MI_HazardSection", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_GeneralSection", mTempLC, "MI_HazardSection", "" )

// SetCursorFirstEntityByAttr( mMasLC, "M_GeneralSection", "ID",
//                             mMasLC, "M_HazardSection", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "M_GeneralSection", "ID",
//                             mTempLC, "M_HazardSection", "ID", "" )

   MoveSubobject( mTempLC, "MI_HazardSection",
                  mMasLC, "MI_HazardSection",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "M_GeneralSection",
                  mMasLC, "M_GeneralSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.MI_HazardSection
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralSection", mMasLC, "MI_HazardSection", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_GeneralSection", mTempLC, "MI_HazardSection", "" )

// SetCursorFirstEntityByAttr( mMasLC, "M_GeneralSection", "ID",
//                             mMasLC, "M_HazardSection", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "M_GeneralSection", "ID",
//                             mTempLC, "M_HazardSection", "ID", "" )

   MoveSubobject( mTempLC, "MI_HazardSection",
                  mMasLC, "MI_HazardSection",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "M_GeneralSection",
                  mMasLC, "M_GeneralSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateHazardStmt: " )

   // We need to update the existing M_HazardSection entity. We have
   // position on the M_HazardStatement, but need to get position on
   // the M_GeneralStatement that corresponds to the M_HazardStatement.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_HazardStatement", "" )
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralStatement", "UpdateHazardStmt: " )
   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

/*
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0
      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END
*/
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForInsert: " )

   // We need to create a new M_GeneralStatement entity.
// CreateTemporalEntity( mMasLC, "M_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralStatement", "InitHazardStmtForInsert: " )
   mMasLC.M_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
/*
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "E" // "Environmental/Physical Hazard"
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Update Hazard Statement",
                   "The Environmental/Physical Hazard Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END
*/
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForUpdate: " )

   // We need to create a new M_GeneralStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralStatement", "InitHazardStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_HazardStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteHazardStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteHazardStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteHazardStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteHazardStmt: " )
   DELETE ENTITY mMasLC.M_GeneralStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC
//?CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MasterLabelContent", "MoveHazardStmtDown: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditFirstAidSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditFirstAidSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING ( 1024 ) szNote

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidSect: " )

   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "F" // FirstAid
   IF RESULT < 0
      // We get here the first time into the section ... need to create FirstAid Section entity.
   // CreateEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitFirstAidSection: " )
      mMasLC.M_GeneralSection.SectionType = "F" // FirstAid
      mMasLC.M_GeneralSection.BoldItalic = "R"
      mMasLC.M_GeneralSection.Title = "FIRST AID"

      szNote = "Call a poison control center or doctor for treatment advice. Have the product container or label with you when "
      szNote = szNote + "calling a poison control center or doctor, or going for treatment. You may also contact 1-800-xxx-xxxx "
      szNote = szNote + "for emergency medical treatment information." + zNEW_LINE
      szNote = szNote + "[Toll free phone number language may be modified to fit company's policy. Suggestions follow:]" + zNEW_LINE
      szNote = szNote + "[National Pesticide Information Center (NPIC) - 1-800-858-7378]" + zNEW_LINE
      szNote = szNote + "[American Association of Poison Control Centers - 1-800-222-1222]" + zNEW_LINE
      szNote = szNote + "[Animal Poison Control Center (APCC) - 1-888-426-4435]"
      mMasLC.M_GeneralSection.ContactNote = szNote

      szNote = "[" + zQUOTES + "NOTE TO PHYSICIAN"
      szNote = szNote + zQUOTES + " is required in the following instances]" + zNEW_LINE
      szNote = szNote + "Probable mucosal damage may contraindicate the use of gastric lavage." + zNEW_LINE
      szNote = szNote + "   [Only required if Toxicity Category I eye and skin irritants]" + zNEW_LINE
      szNote = szNote + "Contains petroleum distillate - vomiting may cause aspiration pneumonia." + zNEW_LINE
      szNote = szNote + "   [Only required if product contains $10% petroleum distillate]" + zNEW_LINE
      szNote = szNote + "[Notes may also address the following information; as appropriate:" + zNEW_LINE
      szNote = szNote + "- technical information on symptoms;" + zNEW_LINE
      szNote = szNote + "- use of supportive treatments to maintain life functions;" + zNEW_LINE
      szNote = szNote + "- medicine that will counteract the specific physiological effects of the pesticide;" + zNEW_LINE
      szNote = szNote + "- company telephone number to specific medical personnel who can provide specialized medical advice.]"
      mMasLC.M_GeneralSection.NoteToPhysician = szNote

      CREATE ENTITY mMasLC.M_GeneralStatement
      szNote = "If in eyes" + zNEW_LINE
      szNote = szNote + "   - Hold eye open and rinse slowly and gently with water for 15-20 minutes." + zNEW_LINE
      szNote = szNote + "   - Remove contact lenses, if present, after the first 5 minutes, then continue rinsing eye."
      mMasLC.M_GeneralStatement.Text = szNote

      CREATE ENTITY mMasLC.M_GeneralStatement
      szNote = "If swallowed" + zNEW_LINE
      szNote = szNote + "   - Call a poison control center or doctor immediately for treatment advice." + zNEW_LINE
      szNote = szNote + "   - Have person sip a glass of water if able to swallow." + zNEW_LINE
      szNote = szNote + "   - Do not induce vomiting unless told to do so by the poison control center or doctor." + zNEW_LINE
      szNote = szNote + "   - Do not give anything by mouth to an unconscious person."
      mMasLC.M_GeneralStatement.Text = szNote

      CREATE ENTITY mMasLC.M_GeneralStatement
      szNote = "If on skin or clothing" + zNEW_LINE
      szNote = szNote + "   - Take off contaminated clothing." + zNEW_LINE
      szNote = szNote + "   - Rinse skin immediately with plenty of water for 15-20 minutes."
      mMasLC.M_GeneralStatement.Text = szNote

      CREATE ENTITY mMasLC.M_GeneralStatement
      szNote = "If inhaled" + zNEW_LINE
      szNote = szNote + "   - Move person to fresh air." + zNEW_LINE
      szNote = szNote + "   - If person is not breathing, call 911 or an ambulance, then give artificial respiration,"
      szNote = szNote + " preferably by mouth-to-mouth, if possible."
      mMasLC.M_GeneralStatement.Text = szNote

   ELSE
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitFirstAidSect: " )
   END

   // Guarantee we maintain position in mMasLC.
   CreateViewFromView( mTempLC, mMasLC )
// LOOP WHILE mTempLC.MI_FirstAidSection EXISTS
//    ExcludeEntity( mTempLC, "MI_FirstAidSection", zREPOS_NONE )
// END

   SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_PrecautionarySection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_PrecautionarySection
   END

   SET CURSOR FIRST mTempLC.MI_HazardSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_HazardSection
   END

   SET CURSOR FIRST mTempLC.MI_FirstAidSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mTempLC, "MI_FirstAidSection", zREPOS_NONE )
      SET CURSOR FIRST mTempLC.MI_FirstAidSection
   END

   FOR EACH mTempLC.M_GeneralSection
      IF mTempLC.M_GeneralSection.SectionType = "F" // FirstAid
         IncludeSubobjectFromSubobject( mTempLC, "MI_FirstAidSection",
                                        mTempLC, "M_GeneralSection", zPOS_LAST )
      // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MI_FirstAidSection", "InitFirstAidSect: " )
      END
   END
   DropView( mTempLC )

   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_FirstAidSection entity.
// CreateTemporalEntity( mMasLC, "M_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralSection", "InitFirstAidSectForInsert: " )
   mMasLC.M_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_GeneralSection.Title

   // We need to update the existing M_FirstAidSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralSection", "InitFirstAidSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidSect: " )

   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"
   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewFirstAidStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewFirstAidStmt: " )

   // We need to create a new M_GeneralStatement entity.
// CreateTemporalEntity( mMasLC, "M_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_GeneralStatement", "AddNewFirstAidStmt: " )
   mMasLC.M_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateFirstAidStmt: " )

   // We need to update the existing M_FirstAidSection entity.  We have
   // position on the M_FirstAidStatement, but need to get position on
   // the M_GeneralStatement that corresponds to the M_FirstAidStatement.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_FirstAidStatement", "" )
// CreateTemporalSubobjectVersion( mMasLC, "M_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_GeneralStatement", "UpdateFirstAidStmt: " )
   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidStmtForUpdate( VIEW ViewToWindow )


END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_GeneralStatement", mMasLC, "M_FirstAidStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteFirstAidStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteFirstAidStmt: " )
   DELETE ENTITY mMasLC.M_GeneralStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_GeneralStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_GeneralStatement",
                  mMasLC, "M_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHumanHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHumanHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "H"  // "HumanHazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHumanHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHumanHazardSect: " )

   IF mMasLC.M_HumanHazardSection EXISTS
   // CreateTemporalSubobjectVersion( mMasLC, "M_HumanHazardSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_HumanHazardSection", "InitHumanHazardSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mMasLC, "M_HumanHazardSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_HumanHazardSection", "InitHumanHazardSect2: " )
      mMasLC.M_HumanHazardSection.PrecautionaryStatement = "See {{Precautionary Position}} Panel for Precautionary Statements"
      mMasLC.M_HumanHazardSection.Location1 = "Back"
      mMasLC.M_HumanHazardSection.Location2 = "Side"
      mMasLC.M_HumanHazardSection.Location3 = "Left"
      mMasLC.M_HumanHazardSection.Location4 = "Right"
      mMasLC.M_HumanHazardSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "H"  // Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHumanHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHumanHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHumanHazardSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHumanHazardSect: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditIngredientsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditIngredientsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsSect: " )

   IF mMasLC.M_IngredientsSection EXISTS
   // CreateTemporalSubobjectVersion( mMasLC, "M_IngredientsSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_IngredientsSection", "InitIngredientsSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mMasLC, "M_IngredientsSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_IngredientsSection", "InitIngredientsSect2: " )
      mMasLC.M_IngredientsSection.ActiveBoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "I"  // Ingredients
   wWebXfer.Root.FormValidationDLL = "wMLC"
   wWebXfer.Root.FormValidationOperation = "ValidateIngredientsSection"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_IngredientsSection entity.
// CreateTemporalEntity( mMasLC, "M_IngredientsSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_IngredientsSection", "InitIngredientsSectForInsert: " )
   mMasLC.M_IngredientsSection.ActiveBoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_IngredientsSection.ActiveTitle

   // We need to update the existing M_IngredientsSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_IngredientsSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_IngredientsSection", "InitIngredientsSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ValidateIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ValidateIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING ( 256  ) szMessage
// STRING (  50  ) szSectionTitle
   STRING (  32  ) szPercent
// INTEGER lSectionTitleLth
   DECIMAL dPercent
   SHORT   nRC

   // Ensure section title is not blank.
// szSectionTitle = mMasLC.M_GeneralSection.Title
// lSectionTitleLth = zGetStringLen( szSectionTitle )
// TraceLineS( "Product Section Title: ", szSectionTitle )
// TraceLineI( "Product Section Title Length: ", lSectionTitleLth )
// IF lSectionTitleLth < 1
//
//    MessageSend( ViewToWindow, "", "Ingredients Section",
//                 "The Master Product Section Name cannot be blank.",
//                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
//    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
//    RETURN 2
//
// END

   CreateViewFromView( mTempLC, mMasLC )
   dPercent = mTempLC.M_IngredientsSection.GeneralInactivePercent
   FOR EACH mTempLC.M_IngredientsStatement
      dPercent = dPercent + mTempLC.M_IngredientsStatement.Percent
   END

   DropView( mTempLC )
   IF dPercent != 100.000

      wWebXfer.Root.Decimal3 = dPercent
      szPercent = wWebXfer.Root.Decimal3
      szMessage = "The Ingredients total percentage must add up to 100% - currently: "
      szMessage = szMessage + szPercent
      MessageSend( ViewToWindow, "", "Ingredients Section",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   nRC = ValidateIngredientsSect( ViewToWindow )
   IF nRC != 0
      RETURN nRC
   END

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsSect: " )

   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"
   wWebXfer.Root.FormValidationOperation = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateIngredientsStmt: " )

   // We need to update the existing M_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_IngredientsStatement", "UpdateIngredientsStmt: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.FormValidationDLL = ""
   wWebXfer.Root.FormValidationOperation = ""
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "InitIngredientsStmtForInsert: " )

   // We need to create a new M_IngredientsStatement entity.
// CreateTemporalEntity( mMasLC, "M_IngredientsStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_IngredientsStatement", "InitIngredientsStmtForInsert: " )
   mMasLC.M_IngredientsStatement.Active = "A"
   mMasLC.M_IngredientsStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.FormValidationDLL = ""
   wWebXfer.Root.FormValidationOperation = ""
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsStmtForUpdate: " )

   // We need to update an M_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_IngredientsStatement", "InitIngredientsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewIngredient
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewIngredient( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   STRING ( 256 ) szPrompt
   SHORT nRC

   nRC = AcceptIngredientsStmt( ViewToWindow )
   IF nRC = 0
      szPrompt = mMasLC.M_IngredientsStatement.Prompt
      InitIngredientsStmtForInsert( ViewToWindow )
      mMasLC.M_IngredientsStatement.Prompt = szPrompt
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Ingredients Statement",
                   "Error saving ingredient statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteIngredientStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteIngredientStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteIngredientStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteIngredientStmt: " )
   DELETE ENTITY mMasLC.M_IngredientsStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_IngredientsStatement",
                  mMasLC, "M_IngredientsStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_IngredientsStatement",
                  mMasLC, "M_IngredientsStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupMarketingWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupMarketingWorkEntities( VIEW mMasLC )

   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to traverse M_MarketingUsageOrdering entities and delete the work sub-entities.
   FOR EACH mTempLC.M_MarketingUsageOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempLC.M_MarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mTempLC.M_MarketingUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadMarketingUsageList
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadMarketingUsageList( VIEW ViewToWindow,
                        VIEW mMasLC_In BASED ON LOD mMasLC )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   BASED ON LOD  mMasLC 
   VIEW mPosLC   BASED ON LOD  mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupMarketingWorkEntities( mMasLC_In )

   CreateViewFromView( mPosLC, mMasLC_In )
   NAME VIEW mPosLC "mPosLC"
   CreateViewFromView( mTempLC, mMasLC_In )
   NAME VIEW mTempLC "mTempLC"
   CreateViewFromView( mMasLC, mMasLC_In )
   NAME VIEW mMasLC "mMasLC1"

   // Get position on included M_MarketingUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosLC, "M_MarketingUsageOrdering", "" )

   // Mark included M_MarketingUsage entities as "selected" and include M_Usage not
   // already included into the M_MarketingUsage entity and mark as "not selected".
   FOR EACH mMasLC.M_Usage

      lID = mMasLC.M_Usage.ID
      SET CURSOR FIRST mTempLC.M_MarketingUsage WITHIN mTempLC.M_MarketingSection
                                                WHERE mTempLC.M_MarketingUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosLC.M_MarketingUsage WITHIN mPosLC.M_MarketingSection
                                                  WHERE mPosLC.M_MarketingUsage.ID = lID
         mPosLC.M_MarketingUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosLC, "M_MarketingUsageOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosLC, "M_MarketingUsage",
                                        mMasLC, "M_Usage", zPOS_NEXT )
         mPosLC.M_MarketingUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mMasLC.M_Usage.ClaimsClassification
         CreateEntity( mPosLC, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosLC, "MarketingSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosLC, "MarketingAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosLC, "MarketingAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid MarketingUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosLC )
   DropView( mTempLC )
   DropView( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditMarketingSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditMarketingSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "M"  // "Marketing"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingSect: " )

   IF mMasLC.M_MarketingSection EXISTS
   // CreateTemporalSubobjectVersion( mMasLC, "M_MarketingSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingSection", "InitMarketingSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mMasLC, "M_MarketingSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_MarketingSection", "InitMarketingSect2: " )
      mMasLC.M_MarketingSection.BoldItalic = "R"
   END

   LoadMarketingUsageList( ViewToWindow, mMasLC )
   wWebXfer.Root.CurrentContentType = "M"  // Marketing

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectMarketingSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   IF mMasLC.M_Usage DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Update Master Label Content",
                   "Organism Claims, Types of Surfaces and Areas of Use should be set up before Marketing sections.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_MarketingSection entity.
// CreateTemporalEntity( mMasLC, "M_MarketingSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_MarketingSection", "AddNewMarketingSect: " )
   mMasLC.M_MarketingSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_MarketingSection.Title

   // We need to update the existing M_MarketingSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_MarketingSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingSection", "InitMarketingSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   CleanupMarketingWorkEntities( mMasLC )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to exclude M_MarketingUsage entities that are not selected.  In
   // the new structure, we need to traverse M_MarketingUsageOrdering entities
   // and delete the work sub-entities.
   FOR EACH mTempLC.M_MarketingUsageOrdering

      IF mTempLC.M_MarketingUsage.wkSelected != "Y"
      // ExcludeEntity( mTempLC, "M_MarketingUsage", zREPOS_NONE )
         DeleteEntity( mTempLC, "M_MarketingUsageOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempLC )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptMarketingSect: " )
   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0
      AddNewMarketingSect( ViewToWindow )
   ELSE
   // MessageSend( ViewToWindow, "", "Save And Add New Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NextMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextMarketingSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_NEXT + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mMasLC, "M_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Next Marketing Section",
                   "There is not a next marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mMasLC.M_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mMasLC.M_MarketingSection
          WHERE mMasLC.M_MarketingSection.ID = lID
      SET CURSOR NEXT mMasLC.M_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingSection", "NextMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Next Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: PreviousMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousMarketingSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_PREV + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mMasLC, "M_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Previous Marketing Section",
                   "There is not a previous marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mMasLC.M_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mMasLC.M_MarketingSection
          WHERE mMasLC.M_MarketingSection.ID = lID
      SET CURSOR PREVIOUS mMasLC.M_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingSection", "PrevMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Previous Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForDelete( VIEW ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingSect: " )
   DELETE ENTITY mMasLC.M_MarketingSection
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   SHORT nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateMarketingStmt: " )
   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0

   // CreateTemporalSubobjectVersion( mMasLC, "M_MarketingStatement" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingStatement", "UpdateMarketingStmt: " )
      wWebXfer.Root.CurrentContentType = "M"  // Marketing

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewMarketingStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewMarketingStmt: " )

   // We need to create a new M_MarketingStatement entity.
// CreateTemporalEntity( mMasLC, "M_MarketingStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_MarketingStatement", "AddNewMarketingStmt: " )
   mMasLC.M_MarketingStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

/*
IssueError( ViewToWindow, 0, 0, "InitMarketingStmtForUpdate" )
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingStmtForUpdate: " )

   // We need to update an M_MarketingStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_MarketingStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_MarketingStatement", "InitMarketingStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"
*/
END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AcceptMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingStmt( ViewToWindow )
   IF nRC = 0
      AddNewMarketingStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Marketing Statement",
                   "Error saving marketing statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

   SHORT nRC

   nRC = AcceptMarketingSect( ViewToWindow )
   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingStmt: " )
   DELETE ENTITY mMasLC.M_MarketingStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_MarketingSection",
                  mMasLC, "M_MarketingSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_MarketingSection",
                  mMasLC, "M_MarketingSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove
   SHORT   nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtUp: " )
   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
      lMove = wWebXfer.Root.MoveIncrement
      IF lMove <= 0
         lMove = 1
      END

      LOOP WHILE lMove > 0
         SET CURSOR PREVIOUS mTempLC.M_MarketingStatement
         lMove = lMove - 1
      END

      MoveSubobject( mTempLC, "M_MarketingStatement",
                     mMasLC, "M_MarketingStatement",
                     zPOS_PREV, zREPOS_PREV )
      DropView( mTempLC )

      // We now commit the Master Label Content to maintain order!
      COMMIT mMasLC

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove
   SHORT   nRC

// AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtDown: " )
   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
      lMove = wWebXfer.Root.MoveIncrement
      IF lMove <= 0
         lMove = 1
      END

      LOOP WHILE lMove > 0
         SET CURSOR NEXT mTempLC.M_MarketingStatement
         lMove = lMove - 1
      END

      MoveSubobject( mTempLC, "M_MarketingStatement",
                     mMasLC, "M_MarketingStatement",
                     zPOS_NEXT, zREPOS_NEXT )
      DropView( mTempLC )

      // We now commit the Master Label Content to maintain order!
      COMMIT mMasLC

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectStorDispSectForUpdate: " )

   // We need to update the existing M_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_StorageDisposalSection", "SelectStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditStorDispSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditStorDispSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispSect: " )

   wWebXfer.Root.Units = "Gallons"
   IF mMasLC.M_StorageDisposalSection EXISTS
   // CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_StorageDisposalSection", "InitStorDispSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mMasLC, "M_StorageDisposalSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_StorageDisposalSection", "InitStorDispSect2: " )
      mMasLC.M_StorageDisposalSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new M_StorageDisposalSection entity.
// CreateTemporalEntity( mMasLC, "M_StorageDisposalSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_StorageDisposalSection", "InitStorDispSectForInsert: " )
   mMasLC.M_StorageDisposalSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mMasLC.M_StorageDisposalSection.Title

   // We need to update the existing M_StorageDisposalSection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_StorageDisposalSection", "InitStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispSect: " )

   IF szEntityName = "M_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mMasLC.M_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mMasLC,
                               "M_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "MI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mMasLC, szEntityName,
                                     mMasLC, "M_GeneralSection", zPOS_FIRST )
   END

   COMMIT mMasLC
   wWebXfer.Root.CurrentContentType = "D"  // "StorageDisposal"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispSect( ViewToWindow )
   IF nRC = 0
      InitStorDispSectForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal Section",
                   "Error saving Storage and Disposal section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForDelete( VIEW ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispSect: " )
   DELETE ENTITY mMasLC.M_StorageDisposalSection
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_StorageDisposalSection",
                  mMasLC, "M_StorageDisposalSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_StorageDisposalSection",
                  mMasLC, "M_StorageDisposalSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateStorDispStmt: " )

   // We need to update the existing M_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_StorageDisposalStatement", "UpdateStorDispStmt: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForInsert: " )

   // We need to create a new M_StorageDisposalStatement entity.
// CreateTemporalEntity( mMasLC, "M_StorageDisposalStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_StorageDisposalStatement", "InitStorDispStmtForInsert: " )
   mMasLC.M_StorageDisposalStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForUpdate: " )

   // We need to update an M_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_StorageDisposalStatement", "InitStorDispStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispStmt( ViewToWindow )
   IF nRC = 0
      InitStorDispStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal statement",
                   "Error saving Storage and Disposal statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispStmt: " )
   DELETE ENTITY mMasLC.M_StorageDisposalStatement
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.M_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_StorageDisposalStatement",
                  mMasLC, "M_StorageDisposalStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.M_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "M_StorageDisposalStatement",
                  mMasLC, "M_StorageDisposalStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAreasOfUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAreasOfUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseSect: " )

   SET CURSOR FIRST mMasLC.MI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mMasLC.MI_UsageList
   END

   // We need to create MI_UsageList (AreasOfUse) entities.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = "U" // "AreasOfUse"
         IncludeSubobjectFromSubobject( mMasLC, "MI_UsageList",
                                        mMasLC, "M_Usage", zPOS_LAST )

         // We do not create a temporal UsageList entity.
      // CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MI_UsageList", "InitAreasOfUseSect1: " )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseSect: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewAreasOfUseStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewAreasOfUseStmt: " )

   // We need to create a new M_Usage entity.
// CreateTemporalEntity( mMasLC, "M_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_Usage", "AddNewAreasOfUseStmt: " )
   mMasLC.M_Usage.UsageType = "U" // "AreasOfUse"
   mMasLC.M_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseStmtForUpdate: " )

   // We need to update the existing S_Usage (AreasOfUse) entity. We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (AreasOfUse) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )

   // We need to update an M_Usage entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_Usage", "InitAreasOfUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewAreasOfUse
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewAreasOfUse( VIEW ViewToWindow )

   VIEW  mMasLC  REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptAreasOfUseStmt( ViewToWindow )
   IF nRC = 0
      AddNewAreasOfUseStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Area of Use Statement",
                   "Error saving area of use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteAreasOfUseStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteAreasOfUseStmt: " )
   DELETE ENTITY mSubLC.S_Usage
   COMMIT mSubLC

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

   CancelCurrentTemporalSubobject( ViewToWindow, "InitAreasOfUseStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmAddAreasOfUseStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddAreasOfUseStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   SHORT   nRC

   FOR EACH mEPA.EPA_AreaOfUse
      IF mEPA.EPA_AreaOfUse.wkSelected = "Y"
         CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
         mMasLC.M_Usage.UsageType = "U" // Area of Use
         mMasLC.M_Usage.Name = mEPA.EPA_AreaOfUse.Name
         mMasLC.M_Usage.BoldItalic = mEPA.EPA_AreaOfUse.BoldItalic
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAddAreasOfUseStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddAreasOfUseStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAreasOfUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAreasOfUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAreasOfUseStmtForUpdate: " )

   // We need to update the existing M_Usage (AreasOfUse) entity. We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (AreasOfUse) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )

   // We need to update an M_Usage entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_Usage", "SelectAreasOfUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAreasOfUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAreasOfUseStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAreasOfUseStmtForDelete: " )

   // We need to delete the existing M_Usage (AreasOfUse) entity. We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (AreasOfUse) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   DELETE ENTITY mMasLC.M_Usage
   COMMIT mMasLC

   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAreasOfUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
//DIALOG OPERATION
//SelectAreasOfUseStmtForDelete( VIEW ViewToWindow )
//
//   VIEW wWebXfer REGISTERED AS wWebXfer
//   VIEW mMasLC   REGISTERED AS mMasLC
//
//   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAreasOfUseStmtForDelete: " )
//
//   // We need to delete the existing M_Usage (AreasOfUse) entity. We have
//   // position on the MI_UsageList entity, but need to get position on
//   // the M_Usage (AreasOfUse) entity that corresponds to the MI_UsageList entity.
//   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
//   DELETE ENTITY mMasLC.M_Usage
//   COMMIT mMasLC
//
//   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"
//
//END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSelectedAreasOfUse
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSelectedAreasOfUse( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szSelected
   STRING ( 1 )  szUsageType
   SHORT nRC

   nRC = SetCursorFirstEntity( mMasLC, "MI_UsageList", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szSelected = mMasLC.MI_UsageList.wkSelected
      IF szSelected = "Y"
         nRC = SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
         IF nRC = zCURSOR_SET
            szUsageType = mMasLC.M_Usage.UsageType // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
            IF szUsageType = "U"
            // ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
               DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
            END
         END
      END

      nRC = SetCursorNextEntity( mMasLC, "MI_UsageList", "" )
   END

   Commit mMasLC
END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditClaimsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditClaimsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "C"  // "Claims"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsList: " )

   SET CURSOR FIRST mMasLC.MI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mMasLC.MI_UsageList
   END

   // We need to create MI_UsageList entities.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = "C" // "Claim"
         IncludeSubobjectFromSubobject( mMasLC, "MI_UsageList",
                                        mMasLC, "M_Usage", zPOS_LAST )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsSect: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewClaimsStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewClaimsStmt: " )

   // We need to create a new M_Usage entity.
// CreateTemporalEntity( mMasLC, "M_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_Usage", "AddNewClaimsStmt: " )
   mMasLC.M_Usage.UsageType = "C" // "Claim"
   mMasLC.M_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectClaimsStmtForUpdate: " )

   // We need to update the existing M_Usage (Claims) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (Claims) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )

   // We need to update an M_Usage entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_Usage", "SelectClaimsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectClaimsStmtForDelete: " )

   // We need to delete the existing M_Usage (Claims) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (Claims) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   DELETE ENTITY mMasLC.M_Usage
   COMMIT mMasLC

   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSelectedClaims
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSelectedClaims( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szSelected
   STRING ( 1 )  szUsageType
   SHORT nRC

   nRC = SetCursorFirstEntity( mMasLC, "MI_UsageList", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szSelected = mMasLC.MI_UsageList.wkSelected
      IF szSelected = "Y"
         nRC = SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
         IF nRC = zCURSOR_SET
            szUsageType = mMasLC.M_Usage.UsageType // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
            IF szUsageType = "C"
            // ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
               DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
            END
         END
      END

      nRC = SetCursorNextEntity( mMasLC, "MI_UsageList", "" )
   END

   Commit mMasLC
END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewClaim
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewClaim( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptClaimsStmt( ViewToWindow )
   IF nRC = 0
      AddNewClaimsStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Claims Statement",
                   "Error saving Claims statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

   CancelCurrentTemporalSubobject( ViewToWindow, "InitClaimsStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmAddClaimsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddClaimsStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   SHORT   nRC

   FOR EACH mEPA.EPA_Claim
      IF mEPA.EPA_Claim.wkSelected = "Y"
         CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
         mMasLC.M_Usage.UsageType = "C" // Claim
         mMasLC.M_Usage.ClaimsClassification = mEPA.EPA_Claim.ClaimsClassification
         mMasLC.M_Usage.Name = mEPA.EPA_Claim.Name
         mMasLC.M_Usage.BoldItalic = mEPA.EPA_Claim.BoldItalic
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAddClaimsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddClaimsStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditSurfacesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditSurfacesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "S"  // "Surfaces"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesSect: " )

   SET CURSOR FIRST mMasLC.MI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mMasLC.MI_UsageList
   END

   // We need to create MI_UsageList entities.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = "S" // "Surface"
         IncludeSubobjectFromSubobject( mMasLC, "MI_UsageList",
                                        mMasLC, "M_Usage", zPOS_LAST )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesSect: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewSurfacesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewSurfacesStmt: " )

   // We need to create a new M_Usage entity.
// CreateTemporalEntity( mMasLC, "M_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_Usage", "AddNewSurfacesStmt: " )
   mMasLC.M_Usage.UsageType = "S" // "Surface"
   mMasLC.M_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectSurfacesStmtForUpdate: " )

   // We need to update the existing M_Usage (Surfaces) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (Surfaces) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )

   // We need to update an M_Usage entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_Usage", "SelectSurfacesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectSurfacesStmtForDelete: " )

   // We need to delete the existing M_Usage (Surfaces) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (Surfaces) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   DELETE ENTITY mMasLC.M_Usage
   COMMIT mMasLC

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSelectedSurfaces
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSelectedSurfaces( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szSelected
   STRING ( 1 )  szUsageType
   SHORT nRC

   nRC = SetCursorFirstEntity( mMasLC, "MI_UsageList", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szSelected = mMasLC.MI_UsageList.wkSelected
      IF szSelected = "Y"
         nRC = SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
         IF nRC = zCURSOR_SET
            szUsageType = mMasLC.M_Usage.UsageType // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
            IF szUsageType = "S"
            // ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
               DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
            END
         END
      END

      nRC = SetCursorNextEntity( mMasLC, "MI_UsageList", "" )
   END

   Commit mMasLC
END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewSurface
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewSurface( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSurfacesStmt( ViewToWindow )
   IF nRC = 0
      AddNewSurfacesStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Surfaces Statement",
                   "Error saving surfaces statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC
//?CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MasterLabelContent", "MoveSurfacesStmtUp: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC
//?CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "MasterLabelContent", "MoveSurfacesStmtDown: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

   CancelCurrentTemporalSubobject( ViewToWindow, "InitSurfacesStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmAddSurfacesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddSurfacesStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   SHORT   nRC

   FOR EACH mEPA.EPA_Surface
      IF mEPA.EPA_Surface.wkSelected = "Y"
         CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
         mMasLC.M_Usage.UsageType = "S" // Surface
         mMasLC.M_Usage.Name = mEPA.EPA_Surface.Name
         mMasLC.M_Usage.BoldItalic = mEPA.EPA_Surface.BoldItalic
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAddSurfacesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddSurfacesStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopyMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopyMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.Finalized = "N"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: FinalizeMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
FinalizeMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   // This is checked by JavaScript
// nRC = OperatorWebPrompt( ViewToWindow, "Finalize Master Label Content",
//                          "Once the Master Label Content has been Finalized,"
//                            "it cannot be updated.  Are you sure you want it Finalized?" )
// IF nRC = 8
//    RETURN 2      // Return 2 to indicate Web client must prompt operator
// END

   IF mMasLC.MasterLabelContent.Finalized = "Y"
      mMasLC.MasterLabelContent.Finalized = "N"
   ELSE
      mMasLC.MasterLabelContent.Finalized = "Y"
   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "FinalizeMasterLabelContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveMasterLabelContent( VIEW ViewToWindow )


END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC REGISTERED AS mMasLC
   STRING ( 50 ) szSectionName
   STRING ( 50 ) szSectionNameNew

   AcceptSubobject( mMasLC, "M_PrecautionarySection" )
   COMMIT mMasLC

//?szSectionName = mMasLC.M_PrecautionarySection.Title
   szSectionNameNew = szSectionName + "a"
   wWebXfer.Root.NameBefore = szSectionNameNew
   szSectionNameNew = szSectionName + "b"
   wWebXfer.Root.NameAfter = szSectionNameNew
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

   // We may update the existing M_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_PrecautionarySection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_PrecautionarySection", "InitSplitMasterSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   STRING ( 50 ) szSectionName
   INTEGER lControl
   INTEGER lSectionNameLth
   INTEGER lID
   SHORT   nRC

   lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   IF wWebXfer.Root.SplitHTML_Before != ""
      szSectionName = wWebXfer.Root.NameBefore
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mMasLC, "M_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_After != ""
      szSectionName = wWebXfer.Root.NameAfter
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mMasLC, "M_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_Before != ""

      CreateViewFromView( mTempLC, mMasLC )
      CreateEntity( mTempLC, "M_PrecautionarySection", zPOS_BEFORE )
      SetMatchingAttributesByName( mTempLC, "M_PrecautionarySection",
                                   mMasLC, "M_PrecautionarySection", zSET_NOTNULL )
//?   mTempLC.M_PrecautionarySection.Title = wWebXfer.Root.NameBefore
      mTempLC.M_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_Before
      DropView( mTempLC )

   END

   IF wWebXfer.Root.SplitHTML_After != ""

      CreateViewFromView( mTempLC, mMasLC )
      CreateEntity( mTempLC, "M_PrecautionarySection", zPOS_AFTER )
      SetMatchingAttributesByName( mTempLC, "M_PrecautionarySection",
                                   mMasLC, "M_PrecautionarySection", zSET_NOTNULL )
//?   mTempLC.M_PrecautionarySection.Title = wWebXfer.Root.NameAfter
      mTempLC.M_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_After
      DropView( mTempLC )
   END

   AcceptSubobject( mMasLC, "M_PrecautionarySection" )
   COMMIT mMasLC

   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSplitMasterSect: " )
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMasterSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterSectForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
// VIEW mMasLC REGISTERED AS mMasLC

// TraceLineS( "", "" )
// TraceLineS( "InitMasterSectForDelete", "" )
// DisplayObjectInstance( mMasLC, "", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMasterSect( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasLC REGISTERED AS mMasLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mMasLC.MasterLabelContent.ID
   lContentID = mMasLC.MasterLabelContent.ID
//?lSectionID = mMasLC.M_PrecautionarySection.ID

   // We have to make sure the Content is in good shape before we go on!
   nRC = AcceptUpdateMasterLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = lID
      NAME VIEW mMasLC "mMasLC"
      SET CURSOR FIRST mMasLC.MasterLabelContent
          WHERE mMasLC.MasterLabelContent.ID = lContentID
//?   SET CURSOR FIRST mMasLC.M_PrecautionarySection
//?       WHERE mMasLC.M_PrecautionarySection.ID = lSectionID
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterSect( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

//?DELETE ENTITY mMasLC.M_PrecautionarySection
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterSect( VIEW ViewToWindow )

// VIEW mMasLC REGISTERED AS mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectUp( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mMasLC.MasterLabelContent.ID
   lContentID = mMasLC.MasterLabelContent.ID
//?lSectionID = mMasLC.M_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateMasterLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = lID
      NAME VIEW mMasLC "mMasLC"
      SET CURSOR FIRST mMasLC.MasterLabelContent
          WHERE mMasLC.MasterLabelContent.ID = lContentID
//?   SET CURSOR FIRST mMasLC.M_PrecautionarySection
//?       WHERE mMasLC.M_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
//?   SET CURSOR PREVIOUS mTempLC.M_PrecautionarySection
      MoveSubobject( mTempLC, "M_PrecautionarySection",
                     mMasLC, "M_PrecautionarySection",
                     zPOS_PREV, zREPOS_PREV )
      DropView( mTempLC )
      COMMIT mMasLC
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectDown( VIEW ViewToWindow )

   VIEW mPrimReg BASED ON LOD  mPrimReg
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mMasLC.MasterLabelContent.ID
   lContentID = mMasLC.MasterLabelContent.ID
//?lSectionID = mMasLC.M_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateMasterLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = lID
      NAME VIEW mMasLC "mMasLC"
      SET CURSOR FIRST mMasLC.MasterLabelContent
          WHERE mMasLC.MasterLabelContent.ID = lContentID
//?   SET CURSOR FIRST mMasLC.M_PrecautionarySection
//?       WHERE mMasLC.M_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempLC, mMasLC )
      NAME VIEW mTempLC "mTempLC"
//?   SET CURSOR NEXT mTempLC.M_PrecautionarySection
      MoveSubobject( mTempLC, "M_PrecautionarySection",
                     mMasLC, "M_PrecautionarySection",
                     zPOS_NEXT, zREPOS_NEXT )
      DropView( mTempLC )
      COMMIT mMasLC
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMLC( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   DropObjectInstance( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ListMLCs
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ListMLCs( VIEW ViewToWindow )

   VIEW lMLC BASED ON LOD lMLC

   GET VIEW lMLC NAMED "lMLC"
   IF lMLC != 0
      DropObjectInstance( lMLC )
   END

   ACTIVATE lMLC Multiple
   NAME VIEW lMLC "lMLC"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopyMLC_ToNewProductMLC
//
// Creates a new MLC for one Product by copying an MLC from a different
// Product. The two MLC's are not tied together.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopyMLC_ToNewProductMLC( VIEW ViewToWindow )

   VIEW mMasProd  REGISTERED AS mMasProd
   VIEW mMasProd2 BASED ON LOD  mMasProd
   VIEW mMasLC    REGISTERED AS mMasLC
   VIEW NewMLC    BASED ON LOD  mMasLC

   // This check is done by JavaScript, so should never happen.
   IF mMasProd.MasterProduct.Name = ""
      MessageSend( ViewToWindow, "", "Copy MLC to new Product MLC",
                   "A name must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // If a Product by same name exists, error.
   ACTIVATE mMasProd2 WHERE mMasProd2.MasterProduct.Name = mMasProd.MasterProduct.Name
   DropObjectInstance( mMasProd2 )
   IF RESULT >= 0
      MessageSend( ViewToWindow, "", "Copy MLC to New Product MLC",
                   "A unique Product Name must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   ACTIVATE NewMLC EMPTY
   CREATE ENTITY NewMLC.MasterLabelContent
   NAME VIEW NewMLC "NewMLC"

   SetMatchingAttributesByName( mMasProd, "MasterProduct", mMasLC, "MasterProduct", zSET_NULL )
   COMMIT mMasProd
   INCLUDE NewMLC.MasterProduct FROM mMasProd.MasterProduct
   DropObjectInstance( mMasProd )

   CopyMLCToNewProduct( NewMLC, mMasLC )

   COMMIT NewMLC

// ListMLCs( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GenerateNewMLC_Version
//
// Creates a new version of an MLC from a previous version. It copies one
// MLC to another and ties the second back to the first.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GenerateNewMLC_Version( VIEW ViewToWindow )

   VIEW mMasProd    REGISTERED AS mMasProd
   VIEW OriginalMLC BASED ON LOD  mMasLC
   VIEW NewMLC      BASED ON LOD  mMasLC
   INTEGER lID
   SHORT   nRC

   // We have to make sure the Product is in good shape before we go on!
   lID = mMasProd.MasterLabelContent.ID
   nRC = AcceptUpdateMasterProduct( ViewToWindow )
   IF nRC = 0

      // Generate new MLC from the selected MLC.
      ACTIVATE OriginalMLC WHERE OriginalMLC.MasterLabelContent.ID = lID
      NAME VIEW OriginalMLC "OriginalMLC"

      ACTIVATE NewMLC EMPTY
      NAME VIEW NewMLC "NewMLC"

      BuildNewMLC_Version( NewMLC, OriginalMLC )    // Create NewMLC from OriginalMLC
      NewMLC.MasterLabelContent.Finalized = "N"

      /* Remove these lines prior to deployment!!!
      // Make modifications to Target for compare purposes.
      NewMLC.M_IngredientsStatement.Percent = 20.141
      NewMLC.M_IngredientsStatement.ChemicalName = "Don Test Didecyl dimethyl ammonium bromide"
      NewMLC.M_StorageDisposalSection.Title = "STORAGE AND DISPOSAL II"
      SET CURSOR FIRST NewMLC.M_DirectionsForUseSection
      SET CURSOR NEXT NewMLC.M_DirectionsForUseSection
      NewMLC.M_DirectionsForUseStatement.Text = "Don Directions Test"
      CREATE ENTITY NewMLC.M_Usage
      NewMLC.M_Usage.UsageType = "C"
      NewMLC.M_Usage.Name = "Don Claim"
      NewMLC.M_Usage.BoldItalic = "R"
      CREATE ENTITY NewMLC.M_MarketingUsageOrdering
      INCLUDE NewMLC.M_MarketingUsage FROM NewMLC.M_Usage
      // End of: Remove these lines prior to deployment!!!
      */
      DropObjectInstance( OriginalMLC )

      COMMIT NewMLC
      DropObjectInstance( NewMLC )
      ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = lID

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CompareToPreviousMLC
//
// Used by the Primary Registrant to analyze changes made to an MLC by
// comparing it to the MLC from which it was created. It's not for comparing
// any two MLC's, but only two MLC's where one was created from the other.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CompareToPreviousMLC( VIEW ViewToWindow )

   VIEW mMasProd    REGISTERED AS mMasProd
   VIEW lMLCATgt    BASED ON LOD  lMLCATgt
   VIEW lMLCASrc    BASED ON LOD  lMLCASrc
   INTEGER lID
   SHORT   nRC

   lID = mMasProd.MasterLabelContent.ID
   ACTIVATE lMLCATgt WHERE lMLCATgt.MasterLabelContent.ID = lID
   NAME VIEW lMLCATgt "lMLCATgt"

   IF lMLCATgt.MP_MasterLabelContent DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Compare MLC's",
                   "The selected MLC is not a source MLC.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      DropObjectInstance( lMLCATgt )
      nRC = 2
   ELSE
      ACTIVATE lMLCASrc WHERE lMLCASrc.MasterLabelContent.ID = lMLCATgt.MP_MasterLabelContent.ID
      NAME VIEW lMLCASrc "lMLCASrc"
      BuildDifferencesMLC( lMLCATgt, lMLCASrc )
      DropObjectInstance( lMLCASrc )
      nRC = 0
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMLC( VIEW ViewToWindow )

   VIEW lMLC   REGISTERED AS lMLC
   VIEW mMasLC BASED ON LOD  mMasLC
   SHORT nRC

   nRC = MessagePrompt( ViewToWindow, "", "Delete", "OK to delete MLC?", 0, zBUTTONS_YESNO, zRESPONSE_YES, 0 )
   IF nRC = zRESPONSE_NO
      RETURN -1
   END

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = lMLC.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLC"
   DELETE ENTITY mMasLC.MasterLabelContent
   COMMIT mMasLC
   DropObjectInstance( mMasLC )

   ListMLCs( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitCopyNewProductMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitCopyNewProductMLC( VIEW ViewToWindow )

   VIEW mPrimReg REGISTERED AS mPrimReg
   VIEW mMasProd BASED ON LOD  mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mPrimReg.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLC"

   ACTIVATE mMasProd EMPTY
   CREATE ENTITY mMasProd.MasterProduct
   NAME VIEW mMasProd "mMasProd"
   INCLUDE mMasProd.PrimaryRegistrant FROM mMasLC.PrimaryRegistrant

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BulkAreasOfUseListMaintenance
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
BulkAreasOfUseListMaintenance( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
// VIEW mMasLC   REGISTERED AS mMasLC

   CancelCurrentTemporalSubobject( ViewToWindow, "BulkAreasOfUseListMaintenance: " )
// COMMIT mMasLC

   wWebXfer.Root.String = "AreasOfUse.csv"
// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMaintainAreasOfUseList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMaintainAreasOfUseList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "U"
// wWebXfer.Type.StatementCSV = "" not needed
   FOR EACH mMasLC.M_Usage
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "U"
         CREATE ENTITY wWebXfer.Usage
         SetMatchingAttributesByName( wWebXfer, "Usage", mMasLC, "M_Usage", zSET_NULL )
      END
   END

   // If the previous window is not the Areas of Use content, then rebuild the list.
   IF wWebXfer.Root.CurrentDialog != "wMLC" OR wWebXfer.Root.CurrentWindow != "MaintainAreasOfUseList"

      // Set up Areas of Use list in wWebXfer.Root.CurrentStatementText to be
      // set to multiline edit box.
      BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                    "CurrentStatementText",
                                    wWebXfer, "Usage", "Name", 0 )
   END

// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "MaintainAreasOfUseList"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAreasOfUseFromFile
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAreasOfUseFromFile( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "U"

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( wWebXfer, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // Set up Areas of Use list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                 "CurrentStatementText",
                                 wWebXfer, "Usage", "Name", 0 )
   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmImportAreasOfUseList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmImportAreasOfUseList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType
   SHORT nRC

   // Clean out previous list of areas of use.
   nRC = SetCursorFirstEntity( mMasLC, "M_Usage", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "U"
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END

      nRC = SetCursorNextEntity( mMasLC, "M_Usage", "" )
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   // Set up Areas of Use list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "U"
   BuildEntityAttributeFromCSV( wWebXfer, "Root",
                                "CurrentStatementText",
                                wWebXfer, "Usage", "Name", 0 )
   FOR EACH wWebXfer.Usage
      CREATE ENTITY mMasLC.M_Usage
      SetMatchingAttributesByName( mMasLC, "M_Usage", wWebXfer, "Usage", zSET_NULL )
      mMasLC.M_Usage.UsageType = "U"
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelImportAreasOfUseList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelImportAreasOfUseList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "U"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BulkClaimsListMaintenance
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
BulkClaimsListMaintenance( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
// VIEW mMasLC   REGISTERED AS mMasLC

   CancelCurrentTemporalSubobject( ViewToWindow, "BulkClaimsListMaintenance: " )
// COMMIT mMasLC

   wWebXfer.Root.String = "Claims.csv"
// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "Claims"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMaintainClaimsList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMaintainClaimsList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "C"
// wWebXfer.Type.StatementCSV = "" not needed
   FOR EACH mMasLC.M_Usage
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "C"
         CREATE ENTITY wWebXfer.Usage
         SetMatchingAttributesByName( wWebXfer, "Usage", mMasLC, "M_Usage", zSET_NULL )
      END
   END

   // If the previous window is not the Claims content, then rebuild the list.
   IF wWebXfer.Root.CurrentDialog != "wMLC" OR wWebXfer.Root.CurrentWindow != "MaintainClaimsList"

      // Set up Claims list in wWebXfer.Root.CurrentStatementText to be
      // set to multiline edit box.
      BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                    "CurrentStatementText",
                                    wWebXfer, "Usage", "ClaimsClassification,Name", 0 )
   END

// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "MaintainClaimsList"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportClaimsFromFile
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportClaimsFromFile( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "C"

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( wWebXfer, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // Set up Claims list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                 "CurrentStatementText",
                                 wWebXfer, "Usage", "ClaimsClassification,Name", 0 )
   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmImportClaimsList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmImportClaimsList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType
   SHORT nRC

   // Clean out previous list of claims.
   nRC = SetCursorFirstEntity( mMasLC, "M_Usage", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "C"
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END

      nRC = SetCursorNextEntity( mMasLC, "M_Usage", "" )
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   // Set up Claims list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "C"
   BuildEntityAttributeFromCSV( wWebXfer, "Root",
                                "CurrentStatementText",
                                wWebXfer, "Usage", "ClaimsClassification,Name", 0 )
   FOR EACH wWebXfer.Usage
      CREATE ENTITY mMasLC.M_Usage
      SetMatchingAttributesByName( mMasLC, "M_Usage",  wWebXfer, "Usage", zSET_NULL )
      mMasLC.M_Usage.UsageType = "C"
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelImportClaimsList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelImportClaimsList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "C"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BulkSurfacesListMaintenance
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
BulkSurfacesListMaintenance( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
// VIEW mMasLC   REGISTERED AS mMasLC

   CancelCurrentTemporalSubobject( ViewToWindow, "BulkSurfacesListMaintenance: " )
// COMMIT mMasLC

   wWebXfer.Root.String = "Surfaces.csv"
// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "Surfaces"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMaintainSurfacesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMaintainSurfacesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "S"
// wWebXfer.Type.StatementCSV = "" not needed
   FOR EACH mMasLC.M_Usage
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "S"
         CREATE ENTITY wWebXfer.Usage
         SetMatchingAttributesByName( wWebXfer, "Usage", mMasLC, "M_Usage", zSET_NULL )
      END
   END

   // If the previous window is not the Surfaces content, then rebuild the list.
   IF wWebXfer.Root.CurrentDialog != "wMLC" OR wWebXfer.Root.CurrentWindow != "MaintainSurfacesList"

      // Set up Surfaces list in wWebXfer.Root.CurrentStatementText to be
      // set to multiline edit box.
      BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                    "CurrentStatementText",
                                    wWebXfer, "Usage", "Name", 0 )
   END

// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "MaintainSurfacesList"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportSurfacesFromFile
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportSurfacesFromFile( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "S"

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( wWebXfer, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // Set up Surfaces list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                 "CurrentStatementText",
                                 wWebXfer, "Usage", "Name", 0 )
   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmImportSurfacesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmImportSurfacesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType
   SHORT nRC

   // Clean out previous list of surfaces.
   nRC = SetCursorFirstEntity( mMasLC, "M_Usage", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "S"
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END

      nRC = SetCursorNextEntity( mMasLC, "M_Usage", "" )
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   // Set up Surfaces list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "S"
   BuildEntityAttributeFromCSV( wWebXfer, "Root",
                                "CurrentStatementText",
                                wWebXfer, "Usage", "Name", 0 )
   FOR EACH wWebXfer.Usage
      CREATE ENTITY mMasLC.M_Usage
      SetMatchingAttributesByName( mMasLC, "M_Usage", wWebXfer, "Usage", zSET_NULL )
      mMasLC.M_Usage.UsageType = "S"
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelImportSurfacesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelImportSurfacesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "S"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAppTypesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAppTypesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesSect: " )

   SET CURSOR FIRST mMasLC.MI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mMasLC.MI_UsageList
   END

   // We need to create MI_UsageList entities.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = "T" // "AppTypes"
         IncludeSubobjectFromSubobject( mMasLC, "MI_UsageList",
                                        mMasLC, "M_Usage", zPOS_LAST )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesSect( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesSect: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AddNewAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewAppTypesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "AddNewAppTypesStmt: " )

   // We need to create a new M_Usage entity.
// CreateTemporalEntity( mMasLC, "M_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mMasLC", "M_Usage", "AddNewAppTypesStmt: " )
   mMasLC.M_Usage.UsageType = "T" // "AppTypes"
   mMasLC.M_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAppTypesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAppTypesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAppTypesStmtForUpdate: " )

   // We need to update the existing M_Usage (AppTypes) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (AppTypes) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )

   // We need to update an M_Usage entity.
// CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mMasLC", "M_Usage", "SelectAppTypesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAppTypesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAppTypesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAppTypesStmtForDelete: " )

   // We need to delete the existing M_Usage (AppTypes) entity.  We have
   // position on the MI_UsageList entity, but need to get position on
   // the M_Usage (AppTypes) entity that corresponds to the MI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   DELETE ENTITY mMasLC.M_Usage
   COMMIT mMasLC

   wWebXfer.Root.CurrentContentType = "T"  // "AppType"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSelectedAppTypes
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSelectedAppTypes( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szSelected
   STRING ( 1 )  szUsageType
   SHORT nRC

   nRC = SetCursorFirstEntity( mMasLC, "MI_UsageList", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szSelected = mMasLC.MI_UsageList.wkSelected
      IF szSelected = "Y"
         nRC = SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
         IF nRC = zCURSOR_SET
            szUsageType = mMasLC.M_Usage.UsageType // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
            IF szUsageType = "T"
            // ExcludeEntity( mMasLC, "MI_UsageList", zREPOS_NONE )
               DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
            END
         END
      END

      nRC = SetCursorNextEntity( mMasLC, "MI_UsageList", "" )
   END

   Commit mMasLC
END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesStmt( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesStmt: " )
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewAppType
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewAppType( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptAppTypesStmt( ViewToWindow )
   IF nRC = 0
      AddNewAppTypesStmt( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Application Type Statement",
                   "Error saving application type statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtUp: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mTempLC  BASED ON LOD  mMasLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtDown: " )

   CreateViewFromView( mTempLC, mMasLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.MI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mMasLC, "M_Usage", mMasLC, "MI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "M_Usage", mTempLC, "MI_UsageList", "" )

   MoveSubobject( mTempLC, "M_Usage",
                  mMasLC, "M_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "MI_UsageList",
                  mMasLC, "MI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

   CancelCurrentTemporalSubobject( ViewToWindow, "InitAppTypesStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmAddAppTypesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddAppTypesStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   SHORT   nRC

   FOR EACH mEPA.EPA_AreaOfUse
      IF mEPA.EPA_AreaOfUse.wkSelected = "Y"
         CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
         mMasLC.M_Usage.UsageType = "T" // Application Type
         mMasLC.M_Usage.Name = mEPA.EPA_ApplicationType.Name
         mMasLC.M_Usage.BoldItalic = mEPA.EPA_AreaOfUse.BoldItalic
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAddAppTypesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddAppTypesStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BulkAppTypesListMaintenance
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
BulkAppTypesListMaintenance( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
// VIEW mMasLC   REGISTERED AS mMasLC

   CancelCurrentTemporalSubobject( ViewToWindow, "BulkAppTypesListMaintenance: " )
// COMMIT mMasLC

   wWebXfer.Root.String = "AppTypes.csv"
// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMaintainAppTypesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMaintainAppTypesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "T"
// wWebXfer.Type.StatementCSV = "" not needed
   FOR EACH mMasLC.M_Usage
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "T"
         CREATE ENTITY wWebXfer.Usage
         SetMatchingAttributesByName( wWebXfer, "Usage", mMasLC, "M_Usage", zSET_NULL )
      END
   END

   // If the previous window is not the AppTypes content, then rebuild the list.
   IF wWebXfer.Root.CurrentDialog != "wMLC" OR wWebXfer.Root.CurrentWindow != "MaintainAppTypesList"

      // Set up AppTypes list in wWebXfer.Root.CurrentStatementText to be
      // set to multiline edit box.
      BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                    "CurrentStatementText",
                                    wWebXfer, "Usage", "Name", 0 )
   END

// wWebXfer.Root.CurrentDialog = "wMLC"
// wWebXfer.Root.CurrentWindow = "MaintainAppTypesList"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAppTypesFromFile
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAppTypesFromFile( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Application Types Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Application Types Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "T"

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( wWebXfer, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import AppTypes Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // Set up AppTypes list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   BuildCSV_FromEntityAttribute( wWebXfer, "Root",
                                 "CurrentStatementText",
                                 wWebXfer, "Usage", "Name", 0 )
   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmImportAppTypesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmImportAppTypesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 )  szUsageType
   SHORT nRC

   // Clean out previous list of application types.
   nRC = SetCursorFirstEntity( mMasLC, "M_Usage", "" )
   LOOP WHILE nRC = zCURSOR_SET
      szUsageType = mMasLC.M_Usage.UsageType
      IF szUsageType = "T"
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END

      nRC = SetCursorNextEntity( mMasLC, "M_Usage", "" )
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   // Set up Application Types list in wWebXfer.Root.CurrentStatementText
   // to be set to multiline edit box.
   CREATE ENTITY wWebXfer.Type
   wWebXfer.Type.UsageType = "T"
   BuildEntityAttributeFromCSV( wWebXfer, "Root",
                                "CurrentStatementText",
                                wWebXfer, "Usage", "Name", 0 )
   FOR EACH wWebXfer.Usage
      CREATE ENTITY mMasLC.M_Usage
      SetMatchingAttributesByName( mMasLC, "M_Usage", wWebXfer, "Usage", zSET_NULL )
      mMasLC.M_Usage.UsageType = "T"
   END

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelImportAppTypesList
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelImportAppTypesList( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   SET CURSOR FIRST wWebXfer.Type WHERE wWebXfer.Type.UsageType = "T"
   IF RESULT = 0
      DELETE ENTITY wWebXfer.Type
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanAppTypesStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanAppTypesStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanAppTypesStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_Usage", "Name", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanAreasOfUseStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanAreasOfUseStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanAreasOfUseStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_Usage", "Name", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanClaimsStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanClaimsStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanClaimsStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_Usage", "Name", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanDirectionsUseStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanDirectionsUseStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanDirectionsUseStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_DirectionsForUseStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanFirstAidStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanFirstAidStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanFirstAidStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_GeneralStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanHazardStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanHazardStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanHazardStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_GeneralStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanIngredientsStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanIngredientsStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanIngredientsStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_IngredientsStatement", "ChemicalName", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanMarketingStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanMarketingStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanMarketingStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_MarketingStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanPrecautionaryStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanPrecautionaryStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanPrecautionaryStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_GeneralStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanStorDispStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanStorDispStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanStorDispStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_StorageDisposalStatement", "Text", "p,strong,sup,sub" )

   COMMIT mMasLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanSurfacesStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanSurfacesStmtHTML( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "CleanSurfacesStmtHTML: " )

   RemoveFormattingFromHTML_Attr( mMasLC, "M_Usage", "Name", "p,strong,sup,sub" )

   COMMIT mMasLC

END
