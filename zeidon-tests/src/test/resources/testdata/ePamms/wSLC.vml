/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright © 2007 - 2012 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    wSLC          - Subregistrant Label Content operations
// FILE:         wSLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitListSubregProducts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitListSubregProducts( VIEW ViewToWindow )

   VIEW lSubreg  REGISTERED AS lSubreg
   VIEW mSubreg  BASED ON LOD  mSubreg

   GET VIEW mSubreg NAMED "mSubreg"
   IF mSubreg != 0
      DropObjectInstance( mSubreg )
   END

   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lSubreg.Subregistrant.ID
   NAME VIEW mSubreg "mSubreg"

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewSubregProduct( VIEW ViewToWindow )

   // nothing to do here

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateSubregProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubProd BASED ON LOD  mSubProd

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   ACTIVATE mSubProd EMPTY
   NAME VIEW mSubProd "mSubProd"

   CreateEntity( mSubProd, "SubregProduct", zPOS_FIRST )  // want latest version first
// CreateEntity( mSubProd, "SubregLabelContent", zPOS_FIRST )

   wWebXfer.Root.AttemptProductName = ""
   wWebXfer.Root.AttemptProductNumber = ""
// wWebXfer.Root.AttemptContentVersion = "Please specify content version"

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mSubreg.SubregProduct.ID
   NAME VIEW mSubProd "mSubProd"

   wWebXfer.Root.AttemptProductName = mSubProd.SubregProduct.Name
   wWebXfer.Root.AttemptProductNumber = mSubProd.SubregProduct.Number
// wWebXfer.Root.AttemptContentVersion = mSubProd.MasterLabelContent.Version

   CreateTemporalSubobjectVersion( mSubProd, "SubregProduct" )
// CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubProd", "SubregProduct", "InitSubregProductForUpdate: " )
   wWebXfer.Root.CurrentContentType = ""
   OrderEntityForView( mSubProd, "SubregLabelContent", "CreatedDateTime D" )

   wWebXfer.Root.Banner1 = mSubreg.Subregistrant.dNameEPA_Number
   wWebXfer.Root.Banner2 = ""
   wWebXfer.Root.Banner3 = ""
   wWebXfer.Root.Banner4 = mSubreg.PrimaryRegistrant.dNameEPA_Number
   wWebXfer.Root.Banner5 = mSubProd.MasterProduct.dMasterProductNameNbr
   wWebXfer.Root.Banner6 = ""

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewSubregProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   INTEGER lProductID
   INTEGER lSubregID
   SHORT   nRC

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "New Subregistrant Product",
                   "The Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSubreg, "SubregProduct", "Name", lControl,
                          szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Subregistrant Product",
                      "The Product Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1

      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSubreg, "SubregProduct", "Number", lControl,
                          szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product",
                      "The Master Product Number must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END
/*
   // Ensure label version is not blank and is unique.
   szVersion = wWebXfer.Root.AttemptContentVersion
   lVersionLth = zGetStringLen( szVersion )
   TraceLineS( "Product Version: ", szVersion )
   TraceLineI( "Product Version Length: ", lVersionLth )
   IF lVersionLth < 1
      MessageSend( ViewToWindow, "", "New Master Product",
                   "The Master Label Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
// ELSE ... it's got to be unique since the product is new
   // lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   // IF SetEntityCursor( mSubProd, "SubregLabelContent", "Version", lControl,
   //                     szVersion, "", "", 0, "", "" ) >= zCURSOR_SET
   //    MessageSend( ViewToWindow, "", "New Master Product",
   //                 "The Master Label Version must be unique.",
   //                 zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   //    SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   //    RETURN 2
   // END
   END
*/

   // Preliminary check is performed by the JSP to ensure that exactly one Master Product is selected.
   nRC = 2
   IF mSubreg.PrimaryRegistrant EXISTS

      SET CURSOR FIRST mSubreg.ListMasterProduct WHERE mSubreg.ListMasterProduct.wkSelected = "Y"
      IF RESULT = 0
         IncludeSubobjectFromSubobject( mSubProd, "MasterProduct",
                                        mSubreg, "ListMasterProduct", zPOS_BEFORE )
         mSubProd.SubregProduct.ChemicalFamily = mSubProd.MasterProduct.ChemicalFamily
         nRC = 0
      END
   END

   IF nRC != 0
      MessageSend( ViewToWindow, "", "New Subregistrant Product",
                   "One Master Product must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   mSubProd.SubregProduct.Name = szProductName
   mSubProd.SubregProduct.Number = szProductNumber
// mSubProd.SubregLabelContent.Version = szVersion
   IncludeSubobjectFromSubobject( mSubProd, "Subregistrant",
                                  mSubreg, "Subregistrant", zPOS_BEFORE )
   AcceptSubobject( mSubProd, "SubregProduct" )
   COMMIT mSubProd

   lProductID = mSubProd.SubregProduct.ID
   lSubregID = mSubreg.Subregistrant.ID

   DropObjectInstance( mSubProd )
   DropObjectInstance( mSubreg )

   // Set up for the following GenerateNewSLC_FromMLC.
   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lSubregID
   NAME VIEW mSubreg "mSubreg"
   SET CURSOR FIRST mSubreg.SubregProduct WHERE mSubreg.SubregProduct.ID = lProductID

   GenerateNewSLC_FromMLC( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateSubregProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   STRING (  50  ) szProductName
   STRING (  50  ) szProductNumber
   STRING (  50  ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure product name is not blank and is unique.
   szProductName = wWebXfer.Root.AttemptProductName
   lProductNameLth = zGetStringLen( szProductName )
   TraceLineS( "Product Name: ", szProductName )
   TraceLineI( "Product Name Length: ", lProductNameLth )
   IF lProductNameLth < 1

      MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                   "The Subregistrant Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF szProductName != mSubProd.SubregProduct.Name
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSubProd, "SubregProduct", "Name", lControl,
                             szProductName, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                         "The Subregistrant Product Name must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2

         END
      END
   END

   // Ensure product number is not blank and is unique.
   szProductNumber = wWebXfer.Root.AttemptProductNumber
   lProductNumberLth = zGetStringLen( szProductNumber )
   TraceLineS( "Product Number: ", szProductNumber )
   TraceLineI( "Product Number Length: ", lProductNumberLth )
   IF lProductNumberLth < 1

      MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                   "The Subregistrant Product Number cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF szProductNumber != mSubProd.SubregProduct.Number
         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSubProd, "SubregProduct", "Number", lControl,
                             szProductNumber, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Subregistrant Product",
                         "The Subregistrant Product Number must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2

         END
      END
   END

   mSubProd.SubregProduct.Name = szProductName
   mSubProd.SubregProduct.Number = szProductNumber
// mMasProd.MasterLabelContent.Version = szVersion
   mSubProd.SubregProduct.ChemicalFamily = mSubProd.MasterProduct.ChemicalFamily
   AcceptSubobject( mSubProd, "SubregProduct" )
   COMMIT mSubProd

   DropObjectInstance( mSubProd )
   DropObjectInstance( mSubreg )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewSubregProduct( VIEW ViewToWindow )

   VIEW mSubProd REGISTERED AS mSubProd

   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd

   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   DropObjectInstance( mSubreg )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdateSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateSubregLabelContent( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END


/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewSubregLabelContent
//
// Validate the subregistrant product before moving on.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewSubregLabelContent( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lID
   SHORT   nRC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "NewSubregLabelContent: " )

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      lID = mSubLC.SubregLabelContent.ID
      DropObjectInstance( mSubLC )
   END

   GET VIEW mSubProd NAMED "mSubProd"
   lID = mSubProd.SubregProduct.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow )
   IF nRC = 0

      InitListSubregProducts( ViewToWindow )
      GET VIEW mSubreg NAMED "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct
          WHERE mSubreg.SubregProduct.ID = lID

      GET VIEW mSubProd NAMED "mSubProd"
      IF mSubProd != 0
         DropObjectInstance( mSubProd )
      END

      ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
      NAME VIEW mSubProd "mSubProd"

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditSubregLabelVersionData
//
// Generally need this operation simply to cause positioning code to be
// done in the JSP, but need to validate the subregistrant product here
// before moving on.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditSubregLabelVersionData( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lContentID
   INTEGER lID
   SHORT   nRC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditSubregLabelVersionData: " )

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      lID = mSubLC.SubregLabelContent.ID
      DropObjectInstance( mSubLC )
   END

   GET VIEW mSubProd NAMED "mSubProd"

   IF mSubProd.SubregLabelContent DOES NOT EXIST  // should never happen!!!
      MessageSend( ViewToWindow, "", "Update Product Label Content",
                   "The Product Label Content does not exist.  Please initialize it.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   lID = mSubProd.SubregProduct.ID
   lContentID = mSubProd.SubregLabelContent.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow )
   IF nRC = 0

      InitListSubregProducts( ViewToWindow )
      GET VIEW mSubreg NAMED "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct
          WHERE mSubreg.SubregProduct.ID = lID

      GET VIEW mSubProd NAMED "mSubProd"
      IF mSubProd != 0
         DropObjectInstance( mSubProd )
      END

      ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
      NAME VIEW mSubProd "mSubProd"
      SET CURSOR FIRST mSubProd.SubregLabelContent
          WHERE mSubProd.SubregLabelContent.ID = lContentID

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregLabelContentForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregLabelContentForInsert( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mSubLC    BASED ON LOD  mSubLC
// STRING ( 20 ) szVersion

   wWebXfer.Root.AttemptContentVersion = ""
   wWebXfer.Root.AttemptRevision = mSubProd.SubregProduct.Name

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      DropObjectInstance( mSubLC )
   END

   ACTIVATE mSubLC EMPTY
   NAME VIEW mSubLC "mSubLC"

// SetAttributeFromCurrentDateTime( wWebXfer, "Root", "AttemptContentVersion" )
// szVersion = wWebXfer.Root.AttemptContentVersion
// zLeft( szVersion, 8, szVersion, 9 )
// wWebXfer.Root.AttemptContentVersion = szVersion

   // Don't create a temporal version, just delete instance on cancel.
// CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "SubregLabelContent", "InitSubregLabelContentForInsert: " )

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregLabelContentForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregLabelContentForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubProd REGISTERED AS mSubProd
   VIEW mSubLC   BASED ON LOD  mSubLC

   wWebXfer.Root.AttemptContentVersion = mSubProd.SubregLabelContent.Version
   wWebXfer.Root.AttemptRevision = mSubProd.SubregLabelContent.Description

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      DropObjectInstance( mSubLC )
   END

   ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = mSubProd.SubregLabelContent.ID
   NAME VIEW mSubLC "mSubLC"
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SubregLabelContent", "InitSubregLabelContentForUpdate: " )
   IF mSubLC.MasterLabelContent.CreatedDateTime = ""
      mSubLC.MasterLabelContent.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
   END

   IF mSubLC.Subregistrant DOES NOT EXIST
      IncludeSubobjectFromSubobject( mSubLC, "SubregProduct",
                                     mSubProd, "SubregProduct", zPOS_LAST )
   END

   wWebXfer.Root.CurrentContentType = ""

   wWebXfer.Root.Banner1 = mSubLC.Subregistrant.dNameEPA_Number
   wWebXfer.Root.Banner2 = mSubProd.SubregProduct.dSubregProductNameNbr
   wWebXfer.Root.Banner3 = ""
   wWebXfer.Root.Banner4 = mSubLC.PrimaryRegistrant.dRegistrantNameID
   wWebXfer.Root.Banner5 = mSubProd.MasterProduct.dMasterProductNameNbr
   wWebXfer.Root.Banner6 = ""

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptNewSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptNewSubregLabelContent( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  50  ) szContentVersion
   INTEGER lContentVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szContentVersion = wWebXfer.Root.AttemptContentVersion
   lContentVersionLth = zGetStringLen( szContentVersion )
   TraceLineS( "Product Content Name: ", szContentVersion )
   TraceLineI( "Product Content Length: ", lContentVersionLth )
   IF lContentVersionLth < 1

      MessageSend( ViewToWindow, "", "New Master Product Content",
                   "The Master Product Content Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
      IF SetEntityCursor( mSubLC, "SubregLabelContent", "Version", lControl,
                          szContentVersion, "", "", 0, "", "" ) >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product Content",
                      "The Master Product Content Version must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2

      END
   END

   mSubLC.SubregLabelContent.Version = szContentVersion
   mSubLC.SubregLabelContent.Description = wWebXfer.Root.AttemptRevision

   IncludeSubobjectFromSubobject( mSubLC, "SubregProduct",
                                  mSubProd, "SubregProduct", zPOS_LAST )

   IncludeSubobjectFromSubobject( mSubreg, "SubregLabelContent",
                                  mSubLC, "SubregLabelContent", zPOS_BEFORE )
   COMMIT mSubLC
   COMMIT mSubreg

   DropObjectInstance( mSubProd )
   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mSubLC.SubregProduct.ID
   NAME VIEW mSubProd "mSubProd"
   SET CURSOR FIRST mSubProd.SubregLabelContent
       WHERE mSubProd.SubregLabelContent.ID = mSubLC.SubregLabelContent.ID
   DropObjectInstance( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptUpdateSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptUpdateSubregLabelContent( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd REGISTERED AS mSubProd
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  50  ) szContentVersion
   INTEGER lContentVersionLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section name is not blank and is unique.
   szContentVersion = wWebXfer.Root.AttemptContentVersion
   lContentVersionLth = zGetStringLen( szContentVersion )
   TraceLineS( "Product Content Version: ", szContentVersion )
   TraceLineI( "Product Version Length: ", lContentVersionLth )
   IF lContentVersionLth < 1

      MessageSend( ViewToWindow, "", "Update Master Product Content",
                   "The Master Product Content Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   ELSE

      IF mSubLC.SubregLabelContent.Version != szContentVersion

         lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
         IF SetEntityCursor( mSubProd, "SubregLabelContent", "Version", lControl,
                             szContentVersion, "", "", 0, "", "" ) >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Update Master Product Content",
                         "The Master Product Content Version must be unique.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END

         mSubLC.SubregLabelContent.Version = szContentVersion
      END

   END

// mSubLC.SubregLabelContent.Version = szContentVersion  <-- done above!
   mSubLC.SubregLabelContent.Description = wWebXfer.Root.AttemptRevision

   AcceptSubobject( mSubLC, "SubregLabelContent" )
   COMMIT mSubLC

   DropObjectInstance( mSubProd )
   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mSubLC.SubregProduct.ID
   NAME VIEW mSubProd "mSubProd"
   SET CURSOR FIRST mSubProd.SubregLabelContent
       WHERE mSubProd.SubregLabelContent.ID = mSubLC.SubregLabelContent.ID
   DropObjectInstance( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelNewSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelNewSubregLabelContent( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg
   VIEW mSubLC  REGISTERED AS mSubLC

   CancelSubobject( mSubreg, "SubregLabelContent" )

   // No temporal subobject created!
// CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewSubregLabelContent: " )

   DropObjectInstance( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelUpdateSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelUpdateSubregLabelContent( VIEW ViewToWindow )

   VIEW mSubreg REGISTERED AS mSubreg
   VIEW mSubLC  REGISTERED AS mSubLC

   CancelSubobject( mSubreg, "SubregLabelContent" )
   CancelCurrentTemporalSubobject( ViewToWindow, "CancelNewSubregLabelContent: " )
   DropObjectInstance( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSubregLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSubregLabelContent( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lID
   SHORT   nRC

   GET VIEW mSubreg NAMED "mSubreg"
   lID = mSubreg.SubregProduct.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow )
   IF nRC = 0
      InitListSubregProducts( ViewToWindow )
      GET VIEW mSubreg NAMED "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct
          WHERE mSubreg.SubregProduct.ID = lID

      ACTIVATE mSubLC WHERE mSubLC.SubregProduct.ID = lID
      NAME VIEW mSubLC "mSubLC"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DesignSubregLabel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DesignSubregLabel( VIEW ViewToWindow )

   // Don't need to do anything except have this OPERATION: to cause
   // positioning code to be done in the JSP.

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSubregProductUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSubregProductUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mTempReg BASED ON LOD  mSubreg
   INTEGER lMove

   CreateViewFromView( mTempReg, mSubreg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempReg.SubregProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "SubregProduct",
                  mSubreg, "SubregProduct",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempReg )

   // We now accept the Master Label to maintain order!
   COMMIT mSubreg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSubregProductDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSubregProductDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mTempReg BASED ON LOD  mSubreg
   INTEGER lMove

   CreateViewFromView( mTempReg, mSubreg )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempReg.SubregProduct
      lMove = lMove - 1
   END

   MoveSubobject( mTempReg, "SubregProduct",
                  mSubreg, "SubregProduct",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempReg )

   // We now accept the Master Label to maintain order!
   COMMIT mSubreg

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSubregProduct( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSubregProductForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSubregProductForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = mSubreg.SubregProduct.ID
   NAME VIEW mSubProd "mSubProd"

// wWebXfer.Root.AttemptProductNumber = mSubProd.SubregProduct.Number
// wWebXfer.Root.AttemptContentVersion = mSubProd.SubregLabelContent.Version
// wWebXfer.Root.CurrentContentType = ""

   SetDynamicBannerName( ViewToWindow, "wSLC", "SubregistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteSubregProduct( VIEW ViewToWindow )

   VIEW mSubProd REGISTERED AS mSubProd

   DropObjectInstance( mSubProd )

// // We don't think there is anything to do here ... just get back to list
// // after accepting the subregistrant product.
// AcceptUpdateSubregProduct( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteSubregProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteSubregProduct( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd
   INTEGER lID
   SHORT   nRC

   GET VIEW mSubreg NAMED "mSubreg"
   lID = mSubreg.SubregProduct.ID

// // We have to make sure the Product is in good shape before we go on!
// nRC = AcceptUpdateSubregProduct( ViewToWindow )
// IF nRC = 0
      ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
      DELETE ENTITY mSubProd.SubregProduct
      COMMIT mSubProd
      DropObjectInstance( mSubProd )
// END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupDirectionsWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupDirectionsWorkEntities( VIEW mSubLC )

   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to traverse S_DirectionsUsageOrdering entities and delete the work sub-entities.
   FOR EACH mTempLC.S_DirectionsUsageOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempLC.S_DirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mTempLC.S_DirectionsUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadDirectionsUsageList
//
// We traverse the Ordering entities since the Usage entities are one-to-one
// under the Ordering entities.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadDirectionsUsageList( VIEW ViewToWindow,
                         VIEW mSubLC_In BASED ON LOD mSubLC )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   BASED ON LOD  mSubLC
   VIEW mPosLC   BASED ON LOD  mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupDirectionsWorkEntities( mSubLC_In )

   CreateViewFromView( mPosLC, mSubLC_In )
   NAME VIEW mPosLC "mPosLC"
   CreateViewFromView( mTempLC, mSubLC_In )
   NAME VIEW mTempLC "mTempLC"
   CreateViewFromView( mSubLC, mSubLC_In )
   NAME VIEW mSubLC "mSubLC1"

   // Get position on included S_DirectionsUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosLC, "S_DirectionsUsageOrdering", "" )

   // Mark included S_DirectionsUsage entities as "selected" and include S_OriginalDirectionsUsage not
   // already included into the S_DirectionsUsage entity and mark as "not selected".
   FOR EACH mSubLC.S_OriginalDirectionUsageOrdering

      lID = mSubLC.S_OriginalDirectionsUsage.ID
      SET CURSOR FIRST mTempLC.S_DirectionsUsage WITHIN mTempLC.S_DirectionsForUseSection
                                                 WHERE mTempLC.S_DirectionsUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosLC.S_DirectionsUsage WITHIN mPosLC.S_DirectionsForUseSection
                                                   WHERE mPosLC.S_DirectionsUsage.ID = lID
         mPosLC.S_DirectionsUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosLC, "S_DirectionsUsageOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosLC, "S_DirectionsUsage",
                                        mSubLC, "S_OriginalDirectionsUsage", zPOS_NEXT )
         mPosLC.S_DirectionsUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mSubLC.S_OriginalDirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mSubLC.S_OriginalDirectionsUsage.ClaimsClassification
         CreateEntity( mPosLC, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosLC, "DirectionsSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosLC, "DirectionsAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosLC, "DirectionsAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid DirectionsUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosLC )
   DropView( mTempLC )
   DropView( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditDirectionsUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditDirectionsUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseSect: " )

   IF mSubLC.S_DirectionsForUseSection EXISTS
   // CreateTemporalSubobjectVersion( mSubLC, "S_DirectionsForUseSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_DirectionsForUseSection", "InitDirectionsUseSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSubLC, "S_DirectionsForUseSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_DirectionsForUseSection", "InitDirectionsUseSect2: " )
      mSubLC.S_DirectionsForUseSection.BoldItalic = "R"
   END

   LoadDirectionsUsageList( ViewToWindow, mSubLC )
   wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_DirectionsForUseSection entity.
// CreateTemporalEntity( mSubLC, "S_DirectionsForUseSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_DirectionsForUseSection", "InitDirectionsUseSectForInsert: " )
   mSubLC.S_DirectionsForUseSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_DirectionsForUseSection.Title

   // We need to update the existing S_DirectionsForUseSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_DirectionsForUseSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_DirectionsForUseSection", "InitDirectionsUseSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szClaimsClassification
   STRING (  32  ) szSectionType
   STRING (   1  ) szUsageType
   INTEGER lSectionTitleLth
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to exclude S_DirectionsUsage entities that are not selected, but
   // the new structure, we need to traverse S_DirectionsUsageOrdering entities.
   FOR EACH mTempLC.S_DirectionsUsageOrdering

      szUsageType = mTempLC.S_DirectionsUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Directions" + mTempLC.S_DirectionsUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsClaim.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsSurface
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsSurface.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAppType
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsAppType.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "DirectionsAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.DirectionsAreasOfUse
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_DirectionsUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected DirectionsAreasOfUse.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
         DisplayEntityInstance( mTempLC, "DirectionsAreasOfUse" )
         MessageSend( ViewToWindow, "", "Unexpected Type",
                      szUsageType,
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropView( mTempLC )
         RETURN 2
      END
      END
      END
      END

      IF mTempLC.S_DirectionsUsage.wkSelected != "Y"
      // ExcludeEntity( mTempLC, "S_DirectionsUsage", zREPOS_NONE )
         DeleteEntity( mTempLC, "S_DirectionsUsageOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempLC )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseSect: " )
   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_DirectionsForUseSection",
                  mSubLC, "S_DirectionsForUseSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseSectDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_DirectionsForUseSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_DirectionsForUseSection",
                  mSubLC, "S_DirectionsForUseSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseSect( ViewToWindow )
   IF nRC = 0
      InitDirectionsUseSectForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New DirectionsUse Section",
                   "Error saving DirectionsUse section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionsUseSect: " )
   DELETE ENTITY mSubLC.S_DirectionsForUseSection
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdateDirectionsUseStatement: " )

   // We need to update the existing S_DirectionsForUseStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_DirectionsForUseStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_DirectionsForUseStatement", "UpdateDirectionsUseStatement: " )
   wWebXfer.Root.CurrentContentType = "U"  // DirectionsForUse

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseStmtForInsert: " )

   // We need to create a new S_DirectionsForUseStatement entity.
// CreateTemporalEntity( mSubLC, "S_DirectionsForUseStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_DirectionsForUseStatement", "InitDirectionsUseStmtForInsert: " )
   mSubLC.S_DirectionsForUseStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitDirectionsUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitDirectionsUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitDirectionsUseStmtForUpdate: " )

   // We need to update an S_DirectionsForUseStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_DirectionsForUseStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_DirectionsForUseStatement", "InitDirectionsUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "DirectionsForUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptDirectionsUseStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewDirectionsUseStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptDirectionsUseStmt( ViewToWindow )
   IF nRC = 0
      InitDirectionsUseStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Directions for Use Statement",
                   "Error saving Directions for Use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectDirectionsUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectDirectionsUseStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteDirectionsUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteDirectionsUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteDirectionsUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteDirectionsUseStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteDirectionsUseStmt: " )
   DELETE ENTITY mSubLC.S_DirectionsForUseStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_DirectionsForUseStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_DirectionsForUseStatement",
                  mSubLC, "S_DirectionsForUseStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveDirectionsUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveDirectionsUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveDirectionsUseStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_DirectionsForUseStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_DirectionsForUseStatement",
                  mSubLC, "S_DirectionsForUseStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditPrecautionarySect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditPrecautionarySect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionarySect: " )

   SET CURSOR FIRST mSubLC.SI_PrecautionarySection
   LOOP WHILE RESULT = 0
      ExcludeEntity( mSubLC, "SI_PrecautionarySection", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_PrecautionarySection
   END

   FOR EACH mSubLC.S_GeneralSection
      IF mSubLC.S_GeneralSection.SectionType = "P" // Precautionary
         IncludeSubobjectFromSubobject( mSubLC, "SI_PrecautionarySection",
                                        mSubLC, "S_GeneralSection", zPOS_LAST )

         // We need to create a temporal Precautionary Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_PrecautionarySection", "InitPrecautionarySect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_PrecautionarySection entity.
// CreateTemporalEntity( mSubLC, "S_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralSection", "InitPrecautionarySectForInsert: " )
   mSubLC.S_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionarySectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionarySectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_GeneralSection.Title

   // We need to update the existing S_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralSection", "InitPrecautionarySectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionarySect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionarySect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionarySect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionarySect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   STRING (  50  ) szSectionTitle
   INTEGER lSectionTitleLth
   INTEGER lControl
   SHORT   nRC

   // Ensure section title is not blank.
   szSectionTitle = mSubLC.S_GeneralSection.Title
   lSectionTitleLth = zGetStringLen( szSectionTitle )
   TraceLineS( "Product Section Title: ", szSectionTitle )
   TraceLineI( "Product Section Title Length: ", lSectionTitleLth )
   IF lSectionTitleLth < 1

      MessageSend( ViewToWindow, "", "Accept Precautionary Section",
                   "The Precautionary Section Title cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionarySect: " )

   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectPrecautionaryStmtForUpdate: " )

   // We need to update the existing S_PrecautionarySection entity.  We have
   // position on the S_PrecautionaryStatement, but need to get position on
   // the S_GeneralStatement that corresponds to the S_PrecautionaryStatement.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_PrecautionaryStatement", "" )
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "SelectPrecautionaryStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // Precautionary

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForInsert: " )

   // We need to create a new S_GeneralStatement entity.
// CreateTemporalEntity( mSubLC, "S_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralStatement", "InitPrecautionaryStmtForInsert: " )
   mSubLC.S_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitPrecautionaryStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitPrecautionaryStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = "P" // "Precautionary"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update Precautionary Statement",
                   "The Precautionary Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitPrecautionaryStmtForUpdate: " )

   // We need to update an S_GeneralStatement entity.
   TraceLineS( "InitPrecautionaryStmtForUpdate: ", "S_GeneralStatement" )
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "InitPrecautionaryStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "P"  // "Precautionary"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelPrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelPrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptPrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptPrecautionaryStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptPrecautionaryStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectPrecautionaryStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectPrecautionaryStmtForDelete( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_PrecautionaryStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeletePrecautionaryStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeletePrecautionaryStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeletePrecautionaryStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeletePrecautionaryStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeletePrecautionaryStmt: " )
   DELETE ENTITY mSubLC.S_GeneralStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_PrecautionaryStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_PrecautionaryStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_PrecautionaryStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_PrecautionaryStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_PrecautionaryStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_PrecautionaryStatement",
                  mSubLC, "S_PrecautionaryStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MovePrecautionaryStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MovePrecautionaryStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MovePrecautionaryStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_PrecautionaryStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_PrecautionaryStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_PrecautionaryStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_PrecautionaryStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_PrecautionaryStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_PrecautionaryStatement",
                  mSubLC, "S_PrecautionaryStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardContent( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardContent: " )

   SET CURSOR FIRST mSubLC.SI_HazardSection
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSubLC, "SI_HazardSection", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_HazardSection
   END

// IF mSubLC.MI_HazardSection DOES NOT EXIST
      FOR EACH mSubLC.S_GeneralSection
         IF mSubLC.S_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
            IncludeSubobjectFromSubobject( mSubLC, "SI_HazardSection",
                                           mSubLC, "S_GeneralSection", zPOS_LAST )
         END
      END
// END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardContent( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardContent: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardContent( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

/* don't think we need this ...
   VIEW mSubLC   REGISTERED AS mSubLC
   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardSect: " )
   FOR EACH mSubLC.S_GeneralSection
      IF mSubLC.S_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
         IncludeSubobjectFromSubobject( mSubLC, "SI_HazardSection",
                                        mSubLC, "S_GeneralSection", zPOS_LAST )
         // We need to create a temporal Environmental/Physical Hazard Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_HazardSection", "InitHazardSect1: " )
      END
   END
 ... don't think we need this */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardSectForDelete( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardSectForDelete: " )
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralSection", mSubLC, "SI_HazardSection", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardSectForUpdate: " )
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralSection", mSubLC, "SI_HazardSection", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_GeneralSection entity.
// CreateTemporalEntity( mSubLC, "S_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralSection", "InitHazardSectForInsert: " )
   mSubLC.S_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_GeneralSection.Title

   // We need to update the existing S_GeneralSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralSection", "InitHazardSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardSect: " )

   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.SI_HazardSection
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralSection", mSubLC, "SI_HazardSection", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralSection", mTempLC, "SI_HazardSection", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralSection", "ID",
//                             mSubLC, "S_HazardSection", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralSection", "ID",
//                             mTempLC, "S_HazardSection", "ID", "" )

   MoveSubobject( mTempLC, "SI_HazardSection",
                  mSubLC, "SI_HazardSection",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "S_GeneralSection",
                  mSubLC, "S_GeneralSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardSectDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.SI_HazardSection
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralSection", mSubLC, "SI_HazardSection", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralSection", mTempLC, "SI_HazardSection", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralSection", "ID",
//                             mSubLC, "S_HazardSection", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralSection", "ID",
//                             mTempLC, "S_HazardSection", "ID", "" )

   MoveSubobject( mTempLC, "SI_HazardSection",
                  mSubLC, "SI_HazardSection",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "S_GeneralSection",
                  mSubLC, "S_GeneralSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectHazardStmtForUpdate: " )

   // We need to update the existing S_HazardSection entity. We have
   // position on the S_HazardStatement, but need to get position on
   // the S_GeneralStatement that corresponds to the S_HazardStatement.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_HazardStatement", "" )
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "SelectHazardStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // Environmental/Physical Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForInsert: " )

   // We need to create a new S_GeneralStatement entity.
// CreateTemporalEntity( mSubLC, "S_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralStatement", "InitHazardStmtForInsert: " )
   mSubLC.S_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHazardStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHazardStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = "E" // "Environmental/Physical Hazard"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update Environmental/Physical Hazard Statement",
                   "The Environmental/Physical Hazard Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHazardStmtForUpdate: " )

   // We need to create a new S_GeneralStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "InitHazardStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "E"  // "Environmental/Physical Hazard"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHazardStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHazardStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHazardStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHazardStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHazardStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectHazardStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectHazardStmtForDelete( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_HazardStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteEnvironStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteEnvironStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteEnvironStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteEnvironStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteEnvironStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteEnvironStmt: " )
   DELETE ENTITY mSubLC.S_GeneralStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_HazardStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_HazardStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_HazardStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_HazardStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_HazardStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_HazardStatement",
                  mSubLC, "S_HazardStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveHazardStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveHazardStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveHazardStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_HazardStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_HazardStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_HazardStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_HazardStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_HazardStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_HazardStatement",
                  mSubLC, "S_HazardStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditFirstAidSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditFirstAidSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidSect: " )

   SET CURSOR FIRST mSubLC.SI_FirstAidSection
   LOOP WHILE RESULT = 0
      ExcludeEntity( mSubLC, "SI_FirstAidSection", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_FirstAidSection
   END

   FOR EACH mSubLC.S_GeneralSection
      IF mSubLC.S_GeneralSection.SectionType = "F" // FirstAid
         IncludeSubobjectFromSubobject( mSubLC, "SI_FirstAidSection",
                                        mSubLC, "S_GeneralSection", zPOS_LAST )

         // We need to create a temporal FirstAid Section entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_FirstAidSection", "InitFirstAidSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_FirstAidSection entity.
// CreateTemporalEntity( mSubLC, "S_GeneralSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralSection", "InitFirstAidSectForInsert: " )
   mSubLC.S_GeneralSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_GeneralSection.Title

   // We need to update the existing S_FirstAidSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralSection", "InitFirstAidSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidSect: " )

   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectFirstAidStmtForUpdate: " )

   // We need to update the existing S_FirstAidSection entity.  We have
   // position on the S_FirstAidStatement, but need to get position on
   // the S_GeneralStatement that corresponds to the S_FirstAidStatement.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_FirstAidStatement", "" )
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "SelectFirstAidStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // FirstAid

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szSectionType
   STRING ( 256  ) szTitle
   STRING ( 256  ) szMessage

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = wWebXfer.Root.CurrentContentType
   IF RESULT < 0

      GetStrFromAttrByContext( szSectionType, 33, wWebXfer,
                               "Root", "CurrentContentType", "ContentSectionType" )
      szTitle = "New " + szSectionType + " Statement"
      szMessage = "The " + szSectionType + " Section does not exist"
      MessageSend( ViewToWindow, "", szTitle,
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidStmtForInsert: " )

   // We need to create a new S_GeneralStatement entity.
// CreateTemporalEntity( mSubLC, "S_GeneralStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_GeneralStatement", "InitFirstAidStmtForInsert: " )
   mSubLC.S_GeneralStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitFirstAidStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitFirstAidStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   SET CURSOR FIRST mSubLC.S_GeneralSection WHERE mSubLC.S_GeneralSection.SectionType = "F" // "FirstAid"
   IF RESULT < 0

      MessageSend( ViewToWindow, "", "Update FirstAid Statement",
                   "The FirstAid Section does not exist",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2

   END

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitFirstAidStmtForUpdate: " )

   // We need to create a new S_GeneralStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_GeneralStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_GeneralStatement", "InitFirstAidStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "F"  // "FirstAid"
// DisplayEntityInstance( wWebXfer, "Root" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptFirstAidStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptFirstAidStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectFirstAidStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectFirstAidStmtForDelete( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_FirstAidStatement", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteFirstAidStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteFirstAidStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteFirstAidStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteFirstAidStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteFirstAidStmt: " )
   DELETE ENTITY mSubLC.S_GeneralStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_FirstAidStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_FirstAidStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_FirstAidStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_FirstAidStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_FirstAidStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_FirstAidStatement",
                  mSubLC, "S_FirstAidStatement",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveFirstAidStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveFirstAidStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveFirstAidStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_FirstAidStatement
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_GeneralStatement", mSubLC, "S_FirstAidStatement", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_GeneralStatement", mTempLC, "S_FirstAidStatement", "" )

// SetCursorFirstEntityByAttr( mSubLC, "S_GeneralStatement", "ID",
//                             mSubLC, "S_FirstAidStatement", "ID", "" )
// SetCursorFirstEntityByAttr( mTempLC, "S_GeneralStatement", "ID",
//                             mTempLC, "S_FirstAidStatement", "ID", "" )

   MoveSubobject( mTempLC, "S_FirstAidStatement",
                  mSubLC, "S_FirstAidStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "S_GeneralStatement",
                  mSubLC, "S_GeneralStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditHumanHazardSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditHumanHazardSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "H"  // "HumanHazard"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHumanHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHumanHazardSect: " )

   IF mSubLC.S_HumanHazardSection EXISTS
   // CreateTemporalSubobjectVersion( mSubLC, "S_HumanHazardSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_HumanHazardSection", "InitHumanHazardSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSubLC, "S_HumanHazardSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_HumanHazardSection", "InitHumanHazardSect2: " )
      mSubLC.S_HumanHazardSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "H"  // Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelHumanHazardSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelHumanHazardSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptHumanHazardSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptHumanHazardSect: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditIngredientsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditIngredientsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsSect: " )

   IF mSubLC.S_IngredientsSection EXISTS
   // CreateTemporalSubobjectVersion( mSubLC, "S_IngredientsSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_IngredientsSection", "InitIngredientsSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSubLC, "S_IngredientsSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_IngredientsSection", "InitIngredientsSect2: " )
      mSubLC.S_IngredientsSection.ActiveBoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_IngredientsSection entity.
// CreateTemporalEntity( mSubLC, "S_IngredientsSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_IngredientsSection", "InitIngredientsSectForInsert: " )
   mSubLC.S_IngredientsSection.ActiveBoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_IngredientsSection.ActiveTitle

   // We need to update the existing S_IngredientsSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_IngredientsSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_IngredientsSection", "InitIngredientsSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szSectionType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsSect: " )

   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectIngredientsStmtForUpdate: " )

   // We need to update the existing S_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_IngredientsStatement", "SelectIngredientsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // Ingredients

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "InitIngredientsStmtForInsert: " )

   // We need to create a new S_IngredientsStatement entity.
// CreateTemporalEntity( mSubLC, "S_IngredientsStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_IngredientsStatement", "InitIngredientsStmtForInsert: " )
   mSubLC.S_IngredientsStatement.Active = "A"
   mSubLC.S_IngredientsStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitIngredientsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsStmtForUpdate: " )

   // We need to update an S_IngredientsStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_IngredientsStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_IngredientsStatement", "InitIngredientsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "I"  // "Ingredients"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelIngredientsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelIngredientsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptIngredientsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptIngredientsStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptIngredientsStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewIngredient
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewIngredient( VIEW ViewToWindow )

   VIEW  mSubLC   REGISTERED AS mSubLC
   STRING ( 256 ) szPrompt
   SHORT nRC

   nRC = AcceptIngredientsStmt( ViewToWindow )
   IF nRC = 0
      szPrompt = mSubLC.S_IngredientsStatement.Prompt
      InitIngredientsStmtForInsert( ViewToWindow )
      mSubLC.S_IngredientsStatement.Prompt = szPrompt
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Ingredients Statement",
                   "Error saving ingredient statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectIngredientsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectIngredientsStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteIngredientStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteIngredientStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteIngredientStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteIngredientStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteIngredientStmt: " )
   DELETE ENTITY mSubLC.S_IngredientsStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_IngredientsStatement",
                  mSubLC, "S_IngredientsStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveIngredientsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveIngredientsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveIngredientsStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_IngredientsStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_IngredientsStatement",
                  mSubLC, "S_IngredientsStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CleanupMarketingWorkEntities
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanupMarketingWorkEntities( VIEW mSubLC )

   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING (  32  ) szClaimsClassification
   STRING (   1  ) szUsageType
   SHORT   nRC

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to traverse S_MarketingUsageOrdering entities and delete the work sub-entities.
   FOR EACH mTempLC.S_MarketingUsageOrdering

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mTempLC.S_MarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mTempLC.S_MarketingUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingSurface
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAppType
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAreasOfUse
         END
      END
      END
      END
      END

   END

   DropView( mTempLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: LoadMarketingUsageList
//
// We traverse the Ordering entities since the Usage entities are one-to-one
// under the Ordering entities.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
LoadMarketingUsageList( VIEW ViewToWindow,
                        VIEW mSubLC_In BASED ON LOD mSubLC )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   BASED ON LOD  mSubLC 
   VIEW mPosLC   BASED ON LOD  mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING ( 32 ) szClaimsClassification
   STRING ( 1 )  szUsageType
   INTEGER  lID

   CleanupMarketingWorkEntities( mSubLC_In )

   CreateViewFromView( mPosLC, mSubLC_In )
   NAME VIEW mPosLC "mPosLC"
   CreateViewFromView( mTempLC, mSubLC_In )
   NAME VIEW mTempLC "mTempLC"
   CreateViewFromView( mSubLC, mSubLC_In )
   NAME VIEW mSubLC "mSubLC1"

   // Get position on included S_MarketingUsage entities (which will be marked as selected).
   SetCursorFirstEntity( mPosLC, "S_MarketingUsageOrdering", "" )

   // Mark included S_MarketingUsage entities as "selected" and include S_OriginalMarketingUsage not
   // already included into the S_MarketingUsage entity and mark as "not selected".
   FOR EACH mSubLC.S_OriginalMarketingUsageOrdering

      lID = mSubLC.S_OriginalMarketingUsage.ID
      SET CURSOR FIRST mTempLC.S_MarketingUsage WITHIN mTempLC.S_MarketingSection
                                                WHERE mTempLC.S_MarketingUsage.ID = lID
      IF RESULT >= 0
         SET CURSOR FIRST mPosLC.S_MarketingUsage WITHIN mPosLC.S_MarketingSection
                                                  WHERE mPosLC.S_MarketingUsage.ID = lID
         mPosLC.S_MarketingUsage.wkSelected = "Y"
      ELSE
         CreateEntity( mPosLC, "S_MarketingUsageOrdering", zPOS_AFTER )
         IncludeSubobjectFromSubobject( mPosLC, "S_MarketingUsage",
                                        mSubLC, "S_OriginalMarketingUsage", zPOS_NEXT )
         mPosLC.S_MarketingUsage.wkSelected = ""
      END

      // "C"-Claim; "S"-Surface; "T"-ApplicationType; "U"-AreasOfUse
      szUsageType = mSubLC.S_OriginalMarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mSubLC.S_OriginalMarketingUsage.ClaimsClassification
         CreateEntity( mPosLC, szClaimsClassification, zPOS_AFTER )
      ELSE
      IF szUsageType = "S"
         CreateEntity( mPosLC, "MarketingSurface", zPOS_AFTER )
      ELSE
      IF szUsageType = "T"
         CreateEntity( mPosLC, "MarketingAppType", zPOS_AFTER )
      ELSE
      IF szUsageType = "U"
         CreateEntity( mPosLC, "MarketingAreasOfUse", zPOS_AFTER )
      ELSE
         IssueError( ViewToWindow, 0, 0, "Invalid MarketingUsage Type" )
      END
      END
      END
      END

   END

   DropView( mPosLC )
   DropView( mTempLC )
   DropView( mSubLC )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditMarketingSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditMarketingSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "M"  // "Marketing"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingSect: " )

   IF mSubLC.S_MarketingSection EXISTS
   // CreateTemporalSubobjectVersion( mSubLC, "S_MarketingSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingSection", "InitMarketingSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSubLC, "S_MarketingSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_MarketingSection", "InitMarketingSect2: " )
      mSubLC.S_MarketingSection.BoldItalic = "R"
   END

   LoadMarketingUsageList( ViewToWindow, mSubLC )
   wWebXfer.Root.CurrentContentType = "M"  // Marketing

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForUpdate( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectMarketingSectForUpdate: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_MarketingSection entity.
// CreateTemporalEntity( mSubLC, "S_MarketingSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_MarketingSection", "InitMarketingSectForInsert: " )
   mSubLC.S_MarketingSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_MarketingSection.Title

   // We need to update the existing S_MarketingSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_MarketingSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingSection", "InitMarketingSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING (  32  ) szEntityName
   STRING (  32  ) szClaimsClassification
   STRING (  32  ) szSectionType
   STRING (   1  ) szUsageType
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity

   GET VIEW mTempLC NAMED "mTempLC"
   IF mTempLC != 0
      DropView( mTempLC )
   END
   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"

   // We need to exclude S_MarketingUsage entities that are not selected, but
   // the new structure, we need to traverse S_MarketingUsageOrdering entities.
   FOR EACH mTempLC.S_MarketingUsageOrdering

      szUsageType = mTempLC.S_MarketingUsage.UsageType
      IF szUsageType = "C"
         szClaimsClassification = "Marketing" + mTempLC.S_MarketingUsage.ClaimsClassification
         nRC = CheckExistenceOfEntity( mTempLC, szClaimsClassification )
         IF nRC = 0
            DeleteEntity( mTempLC, szClaimsClassification, zREPOS_NONE )
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingClaim.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "S"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingSurface" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingSurface
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingSurface.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "T"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAppType" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAppType
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingAppType.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
      IF szUsageType = "U"
         nRC = CheckExistenceOfEntity( mTempLC, "MarketingAreasOfUse" )
         IF nRC = 0
            DELETE ENTITY mTempLC.MarketingAreasOfUse
      /*
         ELSE
            DisplayEntityInstance( mTempLC, "S_MarketingUsage" )
            MessageSend( ViewToWindow, "", "Delete Error???",
                         "Expected MarketingAreasOfUse.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropView( mTempLC )
            RETURN 2
      */
         END
      ELSE
         DisplayEntityInstance( mTempLC, "MarketingAreasOfUse" )
         MessageSend( ViewToWindow, "", "Unexpected Type",
                      szUsageType,
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropView( mTempLC )
         RETURN 2
      END
      END
      END
      END

      IF mTempLC.S_MarketingUsage.wkSelected != "Y"
      // ExcludeEntity( mTempLC, "S_MarketingUsage", zREPOS_NONE )
         DeleteEntity( mTempLC, "S_MarketingUsageOrdering", zREPOS_NONE )
      END

   END

   DropView( mTempLC )

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptMarketingSect: " )
   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingSect( ViewToWindow )
   IF nRC = 0
      InitMarketingSectForInsert( ViewToWindow )
   ELSE
   // MessageSend( ViewToWindow, "", "Save And Add New Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NextMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextMarketingSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_NEXT + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSubLC, "S_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Next Marketing Section",
                   "There is not a next marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSubLC.S_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSubLC.S_MarketingSection
          WHERE mSubLC.S_MarketingSection.ID = lID
      SET CURSOR NEXT mSubLC.S_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingSection", "NextMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Next Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: PreviousMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousMarketingSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 32 ) szVoid
   INTEGER lID
   INTEGER lControl
   SHORT   nRC

   lControl = zPOS_PREV + zTEST_CSR_RESULT
   nRC = SetEntityCursor( mSubLC, "S_MarketingSection", "", lControl,
                          szVoid, "", "", 0, "", "" )
   IF nRC < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Previous Marketing Section",
                   "There is not a previous marketing section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      nRC = 2
   ELSE
      lID = mSubLC.S_MarketingSection.ID
      nRC = AcceptMarketingSect( ViewToWindow )
   END

   IF nRC = 0
      SET CURSOR FIRST mSubLC.S_MarketingSection
          WHERE mSubLC.S_MarketingSection.ID = lID
      SET CURSOR PREVIOUS mSubLC.S_MarketingSection
   // CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingSection", "PreviousMarketingSect: " )
   ELSE
   // MessageSend( ViewToWindow, "", "Previous Marketing Section",
   //              "Error saving marketing section.",
   //              zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingSect: " )
   DELETE ENTITY mSubLC.S_MarketingSection
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectMarketingStmtForUpdate: " )

// CreateTemporalSubobjectVersion( mSubLC, "S_MarketingStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingStatement", "SelectMarketingStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // Marketing

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingStmtForInsert: " )

   // We need to create a new S_MarketingStatement entity.
// CreateTemporalEntity( mSubLC, "S_MarketingStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_MarketingStatement", "InitMarketingStmtForInsert: " )
   mSubLC.S_MarketingStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitMarketingStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMarketingStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitMarketingStmtForUpdate: " )

   // We need to update an S_MarketingStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_MarketingStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_MarketingStatement", "InitMarketingStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "M"  // "Marketing"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptMarketingStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewMarketingStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptMarketingStmt( ViewToWindow )
   IF nRC = 0
      InitMarketingStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Marketing Statement",
                   "Error saving marketing statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectMarketingStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMarketingStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMarketingStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteMarketingStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMarketingStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMarketingStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteMarketingStmt: " )
   DELETE ENTITY mSubLC.S_MarketingStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_MarketingSection",
                  mSubLC, "S_MarketingSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingSectDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_MarketingSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_MarketingSection",
                  mSubLC, "S_MarketingSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END
/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_MarketingStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_MarketingStatement",
                  mSubLC, "S_MarketingStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMarketingStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMarketingStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveMarketingStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_MarketingStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_MarketingStatement",
                  mSubLC, "S_MarketingStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispContent( VIEW ViewToWindow )

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispContent( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispContent: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispContent( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispContent: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectStorDispSectForUpdate: " )

   // We need to update the existing S_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_StorageDisposalSection", "SelectStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditStorDispSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditStorDispSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispSect: " )

   wWebXfer.Root.Units = "Gallons"
   IF mSubLC.S_StorageDisposalSection EXISTS
   // CreateTemporalSubobjectVersion( mSubLC, "S_StorageDisposalSection" )
      CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_StorageDisposalSection", "InitStorDispSect1: " )
   ELSE
      // Get here the first time into the section.
   // CreateTemporalEntity( mSubLC, "S_StorageDisposalSection", zPOS_LAST )
      CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_StorageDisposalSection", "InitStorDispSect2: " )
      mSubLC.S_StorageDisposalSection.BoldItalic = "R"
   END

   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   wWebXfer.Root.AttemptSectionName = ""

   // We need to create a new S_StorageDisposalSection entity.
// CreateTemporalEntity( mSubLC, "S_StorageDisposalSection", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_StorageDisposalSection", "InitStorDispSectForInsert: " )
   mSubLC.S_StorageDisposalSection.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForUpdate( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.AttemptSectionName = mSubLC.S_StorageDisposalSection.Title

   // We need to update the existing S_StorageDisposalSection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_StorageDisposalSection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_StorageDisposalSection", "InitStorDispSectForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING (  32  ) szSectionType
   STRING (  32  ) szEntityName
   INTEGER lControl
   SHORT   nRC

   szEntityName = wWebXfer.Root.CurrentTemporalEntity
   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispSect: " )

   IF szEntityName = "S_GeneralSection" AND wWebXfer.Root.CurrentUpdate = "N"

   // szSectionType = mSubLC.S_GeneralSection.SectionType
      GetStrFromAttrByContext( szSectionType, 33, mSubLC,
                               "S_GeneralSection", "SectionType", "ContentSectionType" )
      szEntityName = "SI_" + szSectionType + "Section"
      IncludeSubobjectFromSubobject( mSubLC, szEntityName,
                                     mSubLC, "S_GeneralSection", zPOS_FIRST )
   END

   COMMIT mSubLC
   wWebXfer.Root.CurrentContentType = "D"  // "StorageDisposal"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispSect( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispSect( ViewToWindow )
   IF nRC = 0
      InitStorDispSectForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal Section",
                   "Error saving Storage and Disposal section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispSectForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispSectForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispSectForDelete( VIEW ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispSect: " )
   DELETE ENTITY mSubLC.S_StorageDisposalSection
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_StorageDisposalSection",
                  mSubLC, "S_StorageDisposalSection",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispSectDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispSectDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_StorageDisposalSection
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_StorageDisposalSection",
                  mSubLC, "S_StorageDisposalSection",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectStorDispStmtForUpdate: " )

   // We need to update the existing S_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_StorageDisposalStatement", "SelectStorDispStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // StorageDisposal

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForInsert: " )

   // We need to create a new S_StorageDisposalStatement entity.
// CreateTemporalEntity( mSubLC, "S_StorageDisposalStatement", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_StorageDisposalStatement", "InitStorDispStmtForInsert: " )
   mSubLC.S_StorageDisposalStatement.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitStorDispStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitStorDispStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitStorDispStmtForUpdate: " )

   // We need to update an S_StorageDisposalStatement entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_StorageDisposalStatement" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_StorageDisposalStatement", "InitStorDispStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "D"  // "StorDisp"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptStorDispStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewStorDispStmt( VIEW ViewToWindow )

   SHORT nRC

   nRC = AcceptStorDispStmt( ViewToWindow )
   IF nRC = 0
      InitStorDispStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal statement",
                   "Error saving Storage and Disposal statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectStorDispStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectStorDispStmtForDelete( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteStorDispStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteStorDispStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteStorDispStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteStorDispStmt: " )
   DELETE ENTITY mSubLC.S_StorageDisposalStatement
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.S_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_StorageDisposalStatement",
                  mSubLC, "S_StorageDisposalStatement",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveStorDispStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveStorDispStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveStorDispStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.S_StorageDisposalStatement
      lMove = lMove - 1
   END

   MoveSubobject( mTempLC, "S_StorageDisposalStatement",
                  mSubLC, "S_StorageDisposalStatement",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAreasOfUseSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAreasOfUseSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseSect: " )

   SET CURSOR FIRST mSubLC.SI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSubLC, "SI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_UsageList
   END

   // We need to create SI_UsageList (AreasOfUse) entities.
   FOR EACH mSubLC.S_Usage
      IF mSubLC.S_Usage.UsageType = "U" // "AreasOfUse"
         IncludeSubobjectFromSubobject( mSubLC, "SI_UsageList",
                                        mSubLC, "S_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_UsageList", "InitAreasOfUseSect1: " )
      END
   END

   wWebXfer.Root.CurrentStatementText = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseSect
// There is no AreasOfUseSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseSect: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseStmtForInsert: " )

   // We need to create a new S_Usage entity.
// CreateTemporalEntity( mSubLC, "S_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_Usage", "InitAreasOfUseStmtForInsert: " )
   mSubLC.S_Usage.UsageType = "U" // "AreasOfUse"
   mSubLC.S_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAreasOfUseStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAreasOfUseStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAreasOfUseStmtForUpdate: " )

   // We need to update the existing S_Usage (AreasOfUse) entity. We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (AreasOfUse) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   // We need to update an S_Usage entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_Usage", "InitAreasOfUseStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAreasOfUseStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAreasOfUseStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewAreasOfUse
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewAreasOfUse( VIEW ViewToWindow )

   VIEW  mSubLC  REGISTERED AS mSubLC
   SHORT nRC

   nRC = AcceptAreasOfUseStmt( ViewToWindow )
   IF nRC = 0
      InitAreasOfUseStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Area of Use Statement",
                   "Error saving area of use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAreasOfUseStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAreasOfUseStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAreasOfUseStmtForDelete: " )

   // We need to update the existing S_Usage (AreasOfUse) entity. We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (AreasOfUse) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteAreasOfUseStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteAreasOfUseStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteAreasOfUseStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteAreasOfUseStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteAreasOfUseStmt: " )
   DELETE ENTITY mSubLC.S_Usage
   COMMIT mSubLC

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "U"  // "AreasOfUse"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAreasOfUseStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAreasOfUseStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAreasOfUseStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   NAME VIEW mTempLC "mTempLC"
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportAreasOfUseStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportAreasOfUseStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportAreasOfUseStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAreasOfUseStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAreasOfUseStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Areas of Use Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSubLC, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Areas of Use Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditAppTypesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditAppTypesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesSect: " )

   SET CURSOR FIRST mSubLC.SI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSubLC, "SI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_UsageList
   END

   // We need to create SI_UsageList entities.
   FOR EACH mSubLC.S_Usage
      IF mSubLC.S_Usage.UsageType = "T" // "AppTypes"
         IncludeSubobjectFromSubobject( mSubLC, "SI_UsageList",
                                        mSubLC, "S_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_UsageList", "InitAppTypesSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesSect
// There is no AppTypesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesSect: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesStmtForInsert: " )

   // We need to create a new S_Usage entity.
// CreateTemporalEntity( mSubLC, "S_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_Usage", "InitAppTypesStmtForInsert: " )
   mSubLC.S_Usage.UsageType = "T" // "C"
   mSubLC.S_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "T"  // "V"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitAppTypesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitAppTypesStmtForUpdate: " )

   // We need to update the existing S_Usage (AppTypes) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (AppTypes) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   // We need to update an S_Usage entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_Usage", "InitAppTypesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "T"  // "V"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAppTypesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelAppTypesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAppTypesStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptAppTypesStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewAppType
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewAppType( VIEW ViewToWindow )

   VIEW  mSubLC   REGISTERED AS mSubLC
   SHORT nRC

   nRC = AcceptAppTypesStmt( ViewToWindow )
   IF nRC = 0
      InitAppTypesStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Application Type Statement",
                   "Error saving area of use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectAppTypesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectAppTypesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectAppTypesStmtForDelete: " )

   // We need to update the existing S_Usage (AppTypes) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (AppTypes) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   wWebXfer.Root.CurrentContentType = "T"  // "V"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteAppTypesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteAppTypesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteAppTypesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteAppTypesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteAppTypesStmt: " )
   DELETE ENTITY mSubLC.S_Usage
   COMMIT mSubLC

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "T"  // "AppTypes"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveAppTypesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveAppTypesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveAppTypesStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportAppTypesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportAppTypesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportAppTypesStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportAppTypesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportAppTypesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Areas Of Use Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Areas of Use Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSubLC, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Areas of Use Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditClaimsSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditClaimsSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "C"  // "Claims"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsSect: " )

   SET CURSOR FIRST mSubLC.SI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSubLC, "SI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_UsageList
   END

   // We need to create SI_UsageList entities.
   FOR EACH mSubLC.S_Usage
      IF mSubLC.S_Usage.UsageType = "C" // "Claim"
         IncludeSubobjectFromSubobject( mSubLC, "SI_UsageList",
                                        mSubLC, "S_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_UsageList", "InitClaimsSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsSect
// There is no ClaimsSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsSect: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForUpdate( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsStmtForInsert: " )

   // We need to create a new S_Usage entity.
// CreateTemporalEntity( mSubLC, "S_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_Usage", "InitClaimsStmtForInsert: " )
   mSubLC.S_Usage.UsageType = "C" // "Claim"
   mSubLC.S_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitClaimsStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitClaimsStmtForUpdate: " )

   // We need to update the existing S_Usage (Claims) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (Claims) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   // We need to update an S_Usage entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_Usage", "InitClaimsStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelClaimsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelClaimsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptClaimsStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptClaimsStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewClaim
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewClaim( VIEW ViewToWindow )

   VIEW  mSubLC   REGISTERED AS mSubLC
   SHORT nRC

   nRC = AcceptClaimsStmt( ViewToWindow )
   IF nRC = 0
      InitClaimsStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Claims Statement",
                   "Error saving Claims statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectClaimsStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectClaimsStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectClaimsStmtForDelete: " )

   // We need to update the existing S_Usage (Claims) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (Claims) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteClaimsStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteClaimsStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteClaimsStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteClaimsStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteClaimsStmt: " )
   DELETE ENTITY mSubLC.S_Usage
   COMMIT mSubLC

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "C"  // "Claim"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveClaimsStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveClaimsStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveClaimsStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportClaimsStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportClaimsStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportClaimsStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportClaimsStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportClaimsStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSubLC, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Claims Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: EditSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditSurfacesSect( VIEW ViewToWindow )

   VIEW  wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   nRC = AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "EditSurfacesSect: " )
   IF nRC = 0
      wWebXfer.Root.CurrentContentType = "S"  // "Surfaces"
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesSect: " )

   SET CURSOR FIRST mSubLC.SI_UsageList
   LOOP WHILE RESULT >= 0
      ExcludeEntity( mSubLC, "SI_UsageList", zREPOS_NONE )
      SET CURSOR FIRST mSubLC.SI_UsageList
   END

   // We need to create SI_UsageList entities.
   FOR EACH mSubLC.S_Usage
      IF mSubLC.S_Usage.UsageType = "S" // "Surface"
         IncludeSubobjectFromSubobject( mSubLC, "SI_UsageList",
                                        mSubLC, "S_Usage", zPOS_LAST )

         // We need to create a temporal UsageList entity.
         CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "SI_UsageList", "InitSurfacesSect1: " )
      END
   END

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesSect( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesSect: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesSect
// There is no SurfacesSect, but here for compatibility
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesSect( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesSect: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForUpdate( VIEW ViewToWindow )

   // nothing to do here ... just for positioning

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesStmtForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtForInsert( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesStmtForInsert: " )

   // We need to create a new S_Usage entity.
// CreateTemporalEntity( mSubLC, "S_Usage", zPOS_LAST )
   CreateCurrentTemporalVersion( ViewToWindow, zPOS_LAST, "mSubLC", "S_Usage", "InitSurfacesStmtForInsert: " )
   mSubLC.S_Usage.UsageType = "S" // "Surface"
   mSubLC.S_Usage.BoldItalic = "R"
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSurfacesStmtForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitSurfacesStmtForUpdate: " )

   // We need to update the existing S_Usage (Surfaces) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (Surfaces) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   // We need to update an S_Usage entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_Usage" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_Usage", "InitSurfacesStmtForUpdate: " )
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSurfacesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSurfacesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSurfacesStmt( VIEW ViewToWindow )

   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "AcceptSurfacesStmt: " )
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveAddNewSurface
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewSurface( VIEW ViewToWindow )

   VIEW  mSubLC   REGISTERED AS mSubLC
   SHORT nRC

   nRC = AcceptSurfacesStmt( ViewToWindow )
   IF nRC = 0
      InitSurfacesStmtForInsert( ViewToWindow )
   ELSE
      MessageSend( ViewToWindow, "", "Save And Add New Surfaces Statement",
                   "Error saving surfaces statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SelectSurfacesStmtForDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectSurfacesStmtForDelete( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "SelectSurfacesStmtForDelete: " )

   // We need to update the existing S_Usage (Surfaces) entity.  We have
   // position on the SI_UsageList entity, but need to get position on
   // the S_Usage (Surfaces) entity that corresponds to the SI_UsageList entity.
   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )

   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteSurfacesStmt( VIEW ViewToWindow )

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelDeleteSurfacesStmt: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteSurfacesStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteSurfacesStmt( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC

   // We will cancel any changes including those for entities that may be involved.
   // We could accept, but a problem could arise if the accept triggered an error.
   CancelCurrentTemporalSubobject( ViewToWindow, "ConfirmDeleteSurfacesStmt: " )
   DELETE ENTITY mSubLC.S_Usage
   COMMIT mSubLC

   wWebXfer.Root.CurrentUpdate = ""
   wWebXfer.Root.CurrentContentType = "S"  // "Surface"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtUp( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtUp: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_PREV, zREPOS_PREV )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSurfacesStmtDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSurfacesStmtDown( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lMove

   AcceptCurrentTemporalSubobject( ViewToWindow, FALSE, "MoveSurfacesStmtDown: " )

   CreateViewFromView( mTempLC, mSubLC )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempLC.SI_UsageList
      lMove = lMove - 1
   END

   SetCursorFirstEntityByEntityCsr( mSubLC, "S_Usage", mSubLC, "SI_UsageList", "" )
   SetCursorFirstEntityByEntityCsr( mTempLC, "S_Usage", mTempLC, "SI_UsageList", "" )

   MoveSubobject( mTempLC, "S_Usage",
                  mSubLC, "S_Usage",
                  zPOS_NEXT, zREPOS_NEXT )
   MoveSubobject( mTempLC, "SI_UsageList",
                  mSubLC, "SI_UsageList",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempLC )

   // We now commit the Master Label Content to maintain order!
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitImportSurfacesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitImportSurfacesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = ""
   CancelCurrentTemporalSubobject( ViewToWindow, "InitImportSurfacesStatements: " )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ImportSurfacesStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ImportSurfacesStatements( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   STRING ( 512 ) szMessage
   STRING ( 512 ) szDirectoryName
   STRING ( 256 ) szFileName
   SHORT   nRC

   // Initialize Input FileName.
   szDirectoryName = ""
   SysReadZeidonIni( -1, "App.ePamms", "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "Zeidon INI file does not have WebDirectory entry in Application: App.ePamms.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   ELSE
      SysAppendcDirSep( szDirectoryName )
   END

   szFileName = wWebXfer.Root.String
   IF szFileName = ""
      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   "The Import File Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   szDirectoryName = szDirectoryName + szFileName
   nRC = ImportCSV_ToZeidonOI( mSubLC, szDirectoryName )
   IF nRC < 0
      IF nRC = -1
         szMessage = "The Import File " + szDirectoryName + " cannot be opened."
      ELSE
         szMessage = "The Import File " + szDirectoryName + " does not contain a valid entity.attribute header."
      END

      MessageSend( ViewToWindow, "", "Import Surfaces Statements",
                   szMessage,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopySLC_ToNewVersion
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopySLC_ToNewVersion( VIEW ViewToWindow )


END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: FinalizeSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
FinalizeSLC( VIEW ViewToWindow )


END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: SaveSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveSLC( VIEW ViewToWindow )


END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ReloadSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ReloadSLC( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mMasProd BASED ON LOD  mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lSubregID
   INTEGER lProductID
   INTEGER lSLC_ID
   SHORT   nRC

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      IF mSubLC.SubregLabelContent EXISTS
         DeleteEntity( mSubLC, "SubregLabelContent", zREPOS_NONE )
         COMMIT mSubLC
      END

      DropObjectInstance( mSubLC )
   END

   GET VIEW mSubreg NAMED "mSubreg"
   IF mSubreg.SubregLabelContent EXISTS
      AcceptSubobject( mSubreg, "SubregProduct" )
      SET CURSOR FIRST mSubreg.SubregLabelContent
      LOOP WHILE RESULT >= 0
         DeleteEntity( mSubreg, "SubregLabelContent", zREPOS_NONE )
      // ExcludeEntity( mSubreg, "SubregLabelContent", zREPOS_NONE )
         SET CURSOR FIRST mSubreg.SubregLabelContent
      END

   // ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = mSubreg.SubregLabelContent.ID
   // IF mSubLC.SubregLabelContent EXISTS
      ACTIVATE mSubLC WHERE mSubLC.SubregProduct.ID = mSubreg.SubregProduct.ID
      IF mSubLC.SubregLabelContent EXISTS
         DELETE ENTITY mSubLC.SubregLabelContent
         COMMIT mSubLC
      END

      DropObjectInstance( mSubLC )

      AcceptSubobject( mSubreg, "SubregProduct" )
      COMMIT mSubreg
   END

   // Let's first get rid of all Product Label Content definitions for this product
   // since we only want one???
   ACTIVATE mSubLC WHERE mSubLC.SubregProduct.ID = mSubreg.SubregProduct.ID
   LOOP WHILE mSubLC.SubregLabelContent EXISTS
      DeleteEntity( mSubLC, "SubregLabelContent", zREPOS_NONE )
      COMMIT mSubLC
      DropObjectInstance( mSubLC )
      ACTIVATE mSubLC WHERE mSubLC.SubregProduct.ID = mSubreg.SubregProduct.ID
   END

   IF mSubLC != 0
      DropObjectInstance( mSubLC )
   END

// // We need to create a new SubregLabelContent entity.
// CreateEntity( mSubreg, "SubregLabelContent", zPOS_LAST )

   // It is now time to initialize a new Product Label Content.  That is a
   // bit of work, but here goes ...
   // First, activate a MasterProduct OI so we can figure out the latest
   // Master Label Content version.
   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = mSubreg.MasterProduct.ID
   NAME VIEW mMasProd "mMasProd"

   // Now because we keep the latest version of the Master Product Label
   // first in the list, we will just make sure we have an entity and use it.
   IF mMasProd.MasterLabelContent EXISTS

      // Now activate the latest Master Label Content OI.
      ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
      NAME VIEW mMasLC "mMasLC_ReloadPLC"

      // We need to create and initialize a new SubregLabelContent entity.
      ACTIVATE mSubLC EMPTY
      NAME VIEW mSubLC "mSubLC"
      CREATE ENTITY mSubLC.SubregLabelContent
      SetMatchingAttributesByName( mSubLC, "SubregLabelContent",
                                   mMasLC, "MasterLabelContent", zSET_NOTNULL )
      SetMatchingAttributesByName( mSubLC, "SubregLabelContent",
                                   mMasLC, "MasterProduct", zSET_NOTNULL )
      IncludeSubobjectFromSubobject( mSubLC, "SubregProduct",
                                     mSubreg, "SubregProduct", zPOS_BEFORE )

      // Now run through the Master Label Content entities and create the corresponding
      // Subregistrant Label Content entities.
      BuildSLC_FromMLC( mSubLC, mMasLC )

      DropObjectInstance( mMasLC )

   END

   lSubregID = mSubreg.Subregistrant.ID
   lProductID = mSubLC.SubregProduct.ID
   lSLC_ID = mSubLC.SubregLabelContent.ID

   DropObjectInstance( mMasProd )
   COMMIT mSubLC

   DropObjectInstance( mSubreg )

   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lSubregID
   NAME VIEW mSubreg "mSubreg"
   SetCursorFirstEntityByInteger( mSubreg, "SubregProduct", "ID", lProductID, "" )
   SetCursorFirstEntityByInteger( mSubreg, "SubregLabelContent", "ID", lSLC_ID, "" )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC REGISTERED AS mSubLC
   STRING ( 50 ) szSectionName
   STRING ( 50 ) szSectionNameNew

   AcceptSubobject( mSubLC, "S_PrecautionarySection" )
   COMMIT mSubLC

//?szSectionName = mSubLC.S_PrecautionarySection.Title
   szSectionNameNew = szSectionName + "a"
   wWebXfer.Root.NameBefore = szSectionNameNew
   szSectionNameNew = szSectionName + "b"
   wWebXfer.Root.NameAfter = szSectionNameNew
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

   // We may update the existing S_PrecautionarySection entity.
// CreateTemporalSubobjectVersion( mSubLC, "S_PrecautionarySection" )
   CreateCurrentTemporalVersion( ViewToWindow, 0, "mSubLC", "S_PrecautionarySection", "InitSplitMasterSect: " )
   wWebXfer.Root.CurrentContentType = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: AcceptSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   STRING ( 50 ) szSectionName
   INTEGER lControl
   INTEGER lSectionNameLth
   INTEGER lID
   SHORT   nRC

   lControl = zQUAL_STRING + zPOS_FIRST + zTEST_CSR_RESULT
   IF wWebXfer.Root.SplitHTML_Before != ""
      szSectionName = wWebXfer.Root.NameBefore
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mSubLC, "S_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Previous Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_After != ""
      szSectionName = wWebXfer.Root.NameAfter
      lSectionNameLth = zGetStringLen( szSectionName )
      IF lSectionNameLth < 1

         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name cannot be blank.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END

      nRC = SetEntityCursor( mSubLC, "S_PrecautionarySection", "Name", lControl,
                             szSectionName, "", "", 0, "", "" )
      IF nRC >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Split Master Product Section",
                      "The Next Master Product Section Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF wWebXfer.Root.SplitHTML_Before != ""

      CreateViewFromView( mTempLC, mSubLC )
      CreateEntity( mTempLC, "S_PrecautionarySection", zPOS_BEFORE )
      SetMatchingAttributesByName( mTempLC, "S_PrecautionarySection",
                                   mSubLC, "S_PrecautionarySection", zSET_NOTNULL )
//?   mTempLC.S_PrecautionarySection.Title = wWebXfer.Root.NameBefore
      mTempLC.S_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_Before
      DropView( mTempLC )

   END

   IF wWebXfer.Root.SplitHTML_After != ""

      CreateViewFromView( mTempLC, mSubLC )
      CreateEntity( mTempLC, "S_PrecautionarySection", zPOS_AFTER )
      SetMatchingAttributesByName( mTempLC, "S_PrecautionarySection",
                                   mSubLC, "S_PrecautionarySection", zSET_NOTNULL )
//?   mTempLC.S_PrecautionarySection.Title = wWebXfer.Root.NameAfter
      mTempLC.S_PrecautionaryStatement.Text = wWebXfer.Root.SplitHTML_After
      DropView( mTempLC )
   END

   AcceptSubobject( mSubLC, "S_PrecautionarySection" )
   COMMIT mSubLC

   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelSplitMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelSplitMasterSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   CancelCurrentTemporalSubobject( ViewToWindow, "CancelSplitMasterSect: " )
   wWebXfer.Root.SplitHTML_Before = ""
   wWebXfer.Root.SplitHTML_After = ""

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteMasterSect( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubLC REGISTERED AS mSubLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSubLC.SubregLabelContent.ID
   lContentID = mSubLC.SubregLabelContent.ID
//?lSectionID = mSubLC.S_PrecautionarySection.ID

   // We have to make sure the Content is in good shape before we go on!
   nRC = AcceptUpdateSubregLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lID
      NAME VIEW mSubLC "mSubLC"
      SET CURSOR FIRST mSubLC.SubregLabelContent
          WHERE mSubLC.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSubLC.S_PrecautionarySection
//?       WHERE mSubLC.S_PrecautionarySection.ID = lSectionID
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ConfirmDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterSect( VIEW ViewToWindow )

   VIEW mSubLC REGISTERED AS mSubLC

//?DELETE ENTITY mSubLC.S_PrecautionarySection
   COMMIT mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CancelDeleteMasterSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterSect( VIEW ViewToWindow )

// VIEW mSubLC REGISTERED AS mSubLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectUp
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectUp( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSubLC.SubregLabelContent.ID
   lContentID = mSubLC.SubregLabelContent.ID
//?lSectionID = mSubLC.S_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lID
      NAME VIEW mSubLC "mSubLC"
      SET CURSOR FIRST mSubLC.SubregLabelContent
          WHERE mSubLC.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSubLC.S_PrecautionarySection
//?       WHERE mSubLC.S_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempLC, mSubLC )
      NAME VIEW mTempLC "mTempLC"
//?   SET CURSOR PREVIOUS mTempLC.S_PrecautionarySection
      MoveSubobject( mTempLC, "S_PrecautionarySection",
                     mSubLC, "S_PrecautionarySection",
                     zPOS_PREV, zREPOS_PREV )
      DropView( mTempLC )
      COMMIT mSubLC
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveMasterSectDown
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveMasterSectDown( VIEW ViewToWindow )

   VIEW mSubreg  BASED ON LOD  mSubreg
   VIEW mSubLC   REGISTERED AS mSubLC
   VIEW mTempLC  BASED ON LOD  mSubLC
   INTEGER lID
   INTEGER lContentID
   INTEGER lSectionID
   SHORT   nRC

   lID = mSubLC.SubregLabelContent.ID
   lContentID = mSubLC.SubregLabelContent.ID
//?lSectionID = mSubLC.S_PrecautionarySection.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregLabelContent( ViewToWindow )
   IF nRC = 0
      ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lID
      NAME VIEW mSubLC "mSubLC"
      SET CURSOR FIRST mSubLC.SubregLabelContent
          WHERE mSubLC.SubregLabelContent.ID = lContentID
//?   SET CURSOR FIRST mSubLC.S_PrecautionarySection
//?       WHERE mSubLC.S_PrecautionarySection.ID = lSectionID

      CreateViewFromView( mTempLC, mSubLC )
      NAME VIEW mTempLC "mTempLC"
//?   SET CURSOR NEXT mTempLC.S_PrecautionarySection
      MoveSubobject( mTempLC, "S_PrecautionarySection",
                     mSubLC, "S_PrecautionarySection",
                     zPOS_NEXT, zREPOS_NEXT )
      DropView( mTempLC )
      COMMIT mSubLC
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: UpdatePhysicalLabel
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdatePhysicalLabel( VIEW ViewToWindow )

   VIEW mSubreg  REGISTERED AS mSubreg
   VIEW mSubProd BASED ON LOD  mSubProd
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lSubregID
   INTEGER lContentID
   INTEGER lID
   SHORT   nRC

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "UpdatePhysicalLabel: " )

   GET VIEW mSubLC NAMED "mSubLC"
   IF mSubLC != 0
      lID = mSubLC.SubregLabelContent.ID
      DropObjectInstance( mSubLC )
   END

   GET VIEW mSubProd NAMED "mSubProd"

   IF mSubProd.SubregLabelContent DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Update Physical Label Definition",
                   "The Product Label Content does not exist.  Please initialize it.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   lSubregID = mSubreg.Subregistrant.ID
   lID = mSubProd.SubregProduct.ID
   lContentID = mSubProd.SubregLabelContent.ID

   // We have to make sure the Product is in good shape before we go on!
   nRC = AcceptUpdateSubregProduct( ViewToWindow ) // this kills mSubreg and mSubProd
   IF nRC = 0

      GET VIEW mSubreg NAMED "mSubreg"
      IF mSubreg != 0
         DropObjectInstance( mSubreg )
      END

      ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lSubregID
      NAME VIEW mSubreg "mSubreg"
      SET CURSOR FIRST mSubreg.SubregProduct WHERE mSubreg.SubregProduct.ID = lID

      GET VIEW mSubProd NAMED "mSubProd"
      IF mSubProd != 0
         DropObjectInstance( mSubProd )
      END

      ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
      NAME VIEW mSubProd "mSubProd"
      SET CURSOR FIRST mSubProd.SubregLabelContent WHERE mSubProd.SubregLabelContent.ID = lContentID
      ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lContentID
      NAME VIEW mSubLC "mSubLC"
      SetDynamicBannerName( ViewToWindow, "wSPLD", "SubregistrantLabel" )

   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: NewSPLD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NewSPLD( VIEW ViewToWindow )

   // Nothing to do

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSPLD_Up
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSPLD_Up( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempProd.SubregPhysicalLabelDef
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregPhysicalLabelDef",
                  mSubProd, "SubregPhysicalLabelDef",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempProd )

   // We now accept the SPLD to maintain order!
   COMMIT mSubProd

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSPLD_Down
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSPLD_Down( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempProd.SubregPhysicalLabelDef
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregPhysicalLabelDef",
                  mSubProd, "SubregPhysicalLabelDef",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempProd )

   // We now accept the SPLD to maintain order!
   COMMIT mSubProd

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GenerateNewSLC_Version
//
// Generates a new version of an SLC from an existing SLC by following the
// path from the original SLC to its parent MLC and to the next version of
// that MLC.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GenerateNewSLC_Version( VIEW ViewToWindow )

   VIEW mSubProd    REGISTERED AS mSubProd
   VIEW OriginalSLC BASED ON LOD  mSubLC
   VIEW NewSLC      BASED ON LOD  mSubLC
   VIEW SourceMLC   BASED ON LOD  mMasLC
   VIEW PreviousMLC BASED ON LOD  lMLCASrc
   STRING ( 64 ) szVersionNew
   INTEGER lID

   // Generate new SLC from the selected SLC.

   // Source SLC
   ACTIVATE OriginalSLC WHERE OriginalSLC.SubregLabelContent.ID = mSubProd.SubregLabelContent.ID
   NAME VIEW OriginalSLC "OriginalSLC"

   // MLC for Source SLC
   ACTIVATE PreviousMLC WHERE PreviousMLC.MasterLabelContent.ID = OriginalSLC.MasterLabelContent.ID
   NAME VIEW PreviousMLC "PreviousMLC"

   // MLC for next version of MLC
   IF PreviousMLC.MN_MasterLabelContent DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Generate SLC",
                   "The MLC for the selected SLC does not have a next version.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      DropObjectInstance( OriginalSLC )
      DropObjectInstance( PreviousMLC )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   ACTIVATE SourceMLC WHERE SourceMLC.MasterLabelContent.ID = PreviousMLC.MN_MasterLabelContent.ID
   NAME VIEW SourceMLC "SourceMLC"

   ACTIVATE NewSLC EMPTY
   NAME VIEW NewSLC "NewSLC"

   // Set the new version here since we have all the information.
   DetermineNextVersion( szVersionNew, mSubProd, "SubregLabelContent", "Version" )

   BuildNewSLC_Version( NewSLC, OriginalSLC, SourceMLC, PreviousMLC )    // Create NewSLC from OriginalSLC
   NewSLC.SubregLabelContent.Version = szVersionNew

   COMMIT NewSLC
   DropObjectInstance( OriginalSLC )
   DropObjectInstance( PreviousMLC )
   DropObjectInstance( SourceMLC )
   DropObjectInstance( NewSLC )

   // mSubProd needs to reflect new SLC.
   lID = mSubProd.SubregProduct.ID
   DropObjectInstance( mSubProd )
   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
   NAME VIEW mSubProd "mSubProd"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: fnCompareSLC_ToNextMLC
//
// Used by the Subregistrant to understand the impact of going to a new SLC
// version. It identifies the differences between two SLC versions, where one
// version was created from the other.  The list of differences shows ALL
// Section Titles, whether or not there are any changes to the section data ...
// or ONLY those Section Titles where there are changes in section data based
// on the bNet parameter.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
fnCompareSLC_ToNextMLC( VIEW ViewToWindow, SHORT bNet )

   VIEW mSubProd REGISTERED AS mSubProd
   VIEW lSLCAnal BASED ON LOD  lSLCAnal
   VIEW lMLCATgt BASED ON LOD  lMLCATgt
   VIEW lMLCASrc BASED ON LOD  lMLCASrc

   // Compare SLC (source) to MLC (target)
   // Three objects are involved in the comparison.
   //   lSLCAnal - The SLC being analyzed
   //   lMLCASrc - The MLC that is was created from
   //   lMLCATgt - The new MLC generated from lMLCASrc, which is the target of the compare.

   ACTIVATE lSLCAnal WHERE lSLCAnal.SubRegLabelContent.ID = mSubProd.SubregLabelContent.ID
   NAME VIEW lSLCAnal "lSLCAnal"

   IF lSLCAnal.MN_MasterLabelContent DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Compare MLS's",
                   "The MLC for the selected SLC does not have an MLC generated from it.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      DropObjectInstance( lSLCAnal )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   ACTIVATE lMLCASrc WHERE lMLCASrc.MasterLabelContent.ID = lSLCAnal.MasterLabelContent.ID
   NAME VIEW lMLCASrc "lMLCASrc"

   ACTIVATE lMLCATgt WHERE lMLCATgt.MasterLabelContent.ID = lSLCAnal.MN_MasterLabelContent.ID
   NAME VIEW lMLCATgt "lMLCATgt"

   BuildDifferencesSLC( lMLCATgt, lMLCASrc, lSLCAnal )
   IF bNet = 1
      DeleteEmptyTitles( lMLCATgt )
   END

   DropObjectInstance( lMLCASrc )
   DropObjectInstance( lSLCAnal )
   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CompareSLC_ToNextMLC
//
// Used by the Subregistrant to understand the impact of going to a new SLC
// version. It identifies the differences between two SLC versions, where one
// version was created from the other.  The list of differences shows ALL
// Section Titles, whether or not there are any changes to the section data.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CompareSLC_ToNextMLC( VIEW ViewToWindow )

   SHORT nRC

   nRC = fnCompareSLC_ToNextMLC( ViewToWindow, 0 )
   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CompareSLC_ToNextMLC_Net
//
// Used by the Subregistrant to understand the impact of going to a new SLC
// version. It identifies the differences between two SLC versions, where one
// version was created from the other.  The list of differences shows ONLY
// those Section Titles where there are changes in section data.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CompareSLC_ToNextMLC_Net( VIEW ViewToWindow )

   SHORT nRC

   nRC = fnCompareSLC_ToNextMLC( ViewToWindow, 1 )
   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DeleteSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DeleteSLC( VIEW ViewToWindow )

   VIEW mSubProd REGISTERED AS mSubProd
   VIEW mSubLC   BASED ON LOD  mSubLC
   INTEGER lID
   SHORT   nRC

// This prompt must occur from the JavaScript.
// nRC = MessagePrompt( ViewToWindow, "", "Delete", "OK to delete SLC?", 0, zBUTTONS_YESNO, zRESPONSE_YES, 0 )
// IF nRC = zRESPONSE_NO
//    RETURN -1
// END

   lID = mSubProd.SubregLabelContent.ID
   ACTIVATE mSubLC WHERE mSubLC.SubregLabelContent.ID = lID
   NAME VIEW mSubLC "mSubLC"
   DELETE ENTITY mSubLC.SubregLabelContent
   COMMIT mSubLC
   DropObjectInstance( mSubLC )

   // mSubProd needs to reflect deleted SLC.
   lID = mSubProd.SubregProduct.ID
   DropObjectInstance( mSubProd )
   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lID
   NAME VIEW mSubProd "mSubProd"

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: InitCopyNewProductSLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitCopyNewProductSLC( VIEW ViewToWindow )

   VIEW mSubProd BASED ON LOD  mSubProd

   ACTIVATE mSubProd EMPTY
   NAME VIEW mSubProd "mSubProd"
   CREATE ENTITY mSubProd.SubregProduct

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSLC_Up
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSLC_Up( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   AcceptSubobject( mSubProd, "SubregProduct" )
   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR PREVIOUS mTempProd.SubregLabelContent
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregLabelContent",
                  mSubProd, "SubregLabelContent",
                  zPOS_PREV, zREPOS_PREV )
   DropView( mTempProd )

   // We now accept the SubProd to maintain order!
   COMMIT mSubProd
   DropObjectInstance( mSubProd )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: MoveSLC_Down
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
MoveSLC_Down( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubProd  REGISTERED AS mSubProd
   VIEW mTempProd BASED ON LOD  mSubProd
   INTEGER lMove

   AcceptSubobject( mSubProd, "SubregProduct" )
   CreateViewFromView( mTempProd, mSubProd )
   lMove = wWebXfer.Root.MoveIncrement
   IF lMove <= 0
      lMove = 1
   END

   LOOP WHILE lMove > 0
      SET CURSOR NEXT mTempProd.SubregLabelContent
      lMove = lMove - 1
   END

   MoveSubobject( mTempProd, "SubregLabelContent",
                  mSubProd, "SubregLabelContent",
                  zPOS_NEXT, zREPOS_NEXT )
   DropView( mTempProd )

   // We now accept the SubProd to maintain order!
   COMMIT mSubProd
   DropObjectInstance( mSubProd )

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: GenerateNewSLC_FromMLC
//
// Generates an SLC from an MLC.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GenerateNewSLC_FromMLC( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mSubreg   REGISTERED AS mSubreg
   VIEW mSubProd  BASED ON LOD  mSubProd
   VIEW mMasProd  BASED ON LOD  mMasProd
   VIEW mMasLC    BASED ON LOD  mMasLC
   VIEW mSubLC    BASED ON LOD  mSubLC
   STRING ( 20 ) szVersion
   INTEGER       lProductID
   INTEGER       lID

   AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "GenerateNewSLC_FromMLC" )

   GET VIEW mSubProd NAMED "mSubProd"
   IF mSubProd != 0
      DropObjectInstance( mSubProd )
   END

   lID = mSubreg.Subregistrant.ID
   lProductID = mSubreg.SubregProduct.ID

   ACTIVATE mSubProd WHERE mSubProd.SubregProduct.ID = lProductID
   NAME VIEW mSubProd "mSubProd"
   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = mSubProd.MasterProduct.ID
   NAME VIEW mMasProd "mMasProd"

   // Remove these lines prior to deployment!!!
   // To get an SLC from a previous version MLC (not the current one).
// IssueError( ViewToWindow, 0, 0, "Build SLC based on previous version of the MLC" )
   // End of: Remove these lines prior to deployment!!!

   SET CURSOR LAST mMasProd.MasterLabelContent  // this might not be the correct one ... how to determine???
   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLC"

   SetMatchingAttributesByName( mSubProd, "SubregProduct", mMasLC, "MasterProduct", zSET_NULL )
   AcceptSubobject( mSubProd, "SubregProduct" )
   COMMIT mSubProd

   ACTIVATE mSubLC EMPTY
   NAME VIEW mSubLC "mSubLC"
   CREATE ENTITY mSubLC.SubregLabelContent
   SetAttributeFromCurrentDateTime( mSubLC, "SubregLabelContent", "RevisionDate" )
   szVersion = mSubLC.SubregLabelContent.RevisionDate
   zLeft( szVersion, 8, szVersion, 9 )
   mSubLC.SubregLabelContent.Version = szVersion
   mSubLC.SubregLabelContent.Description = "_New"
   mSubLC.SubregLabelContent.CreatedDateTime = wWebXfer.Root.dCurrentDateTime

   INCLUDE mSubLC.SubregProduct FROM mSubProd.SubregProduct

   BuildSLC_FromMLC( mSubLC, mMasLC )
   COMMIT mSubLC

   DropObjectInstance( mMasLC )
   DropObjectInstance( mMasProd )
   DropObjectInstance( mSubLC )
   DropObjectInstance( mSubProd )

   DropObjectInstance( mSubreg )  // in case there were changes
   ACTIVATE mSubreg WHERE mSubreg.Subregistrant.ID = lID
   NAME VIEW mSubreg "mSubreg"
   SET CURSOR FIRST mSubreg.SubregProduct WHERE mSubreg.SubregProduct.ID = lProductID

END